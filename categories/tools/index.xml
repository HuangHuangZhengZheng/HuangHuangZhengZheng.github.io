<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>TOOLS - Category - HHZZ`s space</title>
        <link>http://localhost:1313/categories/tools/</link>
        <description>TOOLS - Category - HHZZ`s space</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 29 Jun 2024 15:06:38 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/categories/tools/" rel="self" type="application/rss+xml" /><item>
    <title>Git</title>
    <link>http://localhost:1313/tools/git/git/</link>
    <pubDate>Sat, 29 Jun 2024 15:06:38 &#43;0800</pubDate>
    <author>HHZZ</author>
    <guid>http://localhost:1313/tools/git/git/</guid>
    <description><![CDATA[文件状态 未跟踪-未修改-已修改-暂存
git add &lt;name&gt; - *-&gt;暂存
git commit -m &quot;message&quot; - 暂存-&gt;未修改
git rm &lt;name&gt; - 未修改-&gt;未跟踪
查看状态 1 git status 更加细致几行几列
1 git diff 查看历史日志
1 2 git log --pretty=oneline git log --graph --oneline --decorate 基本操作 基础配置 1 2 git config --global user.name &#34;your name&#34; git config --global user.email &#34;your email&#34; 创建版本库 1 2 3 mkdir myproject cd myproject git init 克隆版本库 1 git clone https://github.com/username/repository.git 跟踪文件or文件夹 1 git add &lt;filename&gt; 1 2 git rm &lt;filename&gt; git rm --cache &lt;filename&gt; 设置缓存状态 1 git add 1 git reset HEAD &lt;filename&gt; 提交修改 1 git commit -m &#34;commit message str&#34; 撤销非首次修改]]></description>
</item>
<item>
    <title>正则表达式笔记</title>
    <link>http://localhost:1313/tools/reg/</link>
    <pubDate>Sat, 29 Jun 2024 13:37:39 &#43;0800</pubDate>
    <author>HHZZ</author>
    <guid>http://localhost:1313/tools/reg/</guid>
    <description><![CDATA[Regular Expressions 注意版本和文档！ 常用工具 https://regex101.com/ https://regexr.com/ python re模块
字符 . 匹配任意一个字符 [] 匹配括号中的任意一个字符,如 [a-zA-Z1-3] 匹配大写字母或小写字母或数字1-3, [^] 匹配除了括号中的字符
预定字符类 \d 匹配数字 \D 匹配非数字 \w 匹配字母、数字或下划线 \W 匹配非字母、数字或下划线 \s 匹配空白字符或者tab \S 匹配非空白字符
边界匹配 ^ 匹配字符串的开头 $ 匹配字符串的结尾 \b 匹配单词的边界, 如 \bthe\b 匹配the \B 匹配非单词边界
数量词 * 匹配前面的字符0次或多次 + 匹配前面的字符1次或多次 ? 匹配前面的字符0次或1次 {n} 匹配前面的字符n次 {n,} 匹配前面的字符至少n次 {n,m} 匹配前面的字符至少n次, 至多m次
非贪婪匹配 量词默认是贪婪匹配, 即尽可能多的匹配字符, 如 a.*b 会匹配到最长的以a开头的b 后面的量词加上? 则为非贪婪匹配, 即尽可能少的匹配字符, 如 a.*?b 会匹配到最短的以a开头的b
分组与捕获 () 用来创建分组, 捕获括号中的字符, 并在匹配时返回匹配到的内容 [] 用来创建字符类, 如 [Pp] 匹配P或p | 用来创建或关系, 如 a(bc|de) 匹配a后面是bc或de \n 引用分组, 如 \1 引用第一个分组 $n 引用第n个分组 ?]]></description>
</item>
</channel>
</rss>
