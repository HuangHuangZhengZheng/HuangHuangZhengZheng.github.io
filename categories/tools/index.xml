<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>TOOLS - Category - HHZZ`s space</title>
        <link>http://localhost:1313/categories/tools/</link>
        <description>TOOLS - Category - HHZZ`s space</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 15 Aug 2024 19:09:38 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/categories/tools/" rel="self" type="application/rss+xml" /><item>
    <title>Conda配置备忘录</title>
    <link>http://localhost:1313/tools/conda/</link>
    <pubDate>Thu, 15 Aug 2024 19:09:38 &#43;0800</pubDate>
    <author>HHZZ</author>
    <guid>http://localhost:1313/tools/conda/</guid>
    <description><![CDATA[Conda配置备忘录 导出与创建环境 使用YAML文件创建Conda环境的步骤如下：
创建YAML文件：首先，您需要创建一个YAML配置文件，通常命名为environment.yml。在该文件中，您可以定义环境的名称、所需的通道以及依赖的包。例如：
1 2 3 4 5 6 7 name: my_conda_env channels: - conda-forge dependencies: - numpy=1.19.5 - pandas=1.2.3 - scikit-learn=0.23.2 在这个示例中，定义了一个名为my_conda_env的环境，并指定了要安装的包及其版本。
使用Conda创建环境：在命令行中，导航到包含environment.yml文件的目录，然后运行以下命令：
1 conda env create -f environment.yml 这条命令会根据YAML文件中的定义创建新的Conda环境。
激活新环境：创建完成后，可以使用以下命令激活新环境：
1 conda activate my_conda_env 现在，您可以在新环境中安装、运行和测试软件包。
导出现有环境：如果您想将当前环境导出为YAML文件，可以使用以下命令：
1 conda env export &gt; environment.yml 这将创建一个包含当前环境所有包及其版本信息的YAML文件，方便在其他计算机上重建相同的环境
单纯创建、切换、删除环境 1 conda create -n YOUR_ENV_NAME python=3.8 1 conda activate YOUR_ENV_NAME 1 conda remove -n YOUR_ENV_NAME --all 查看环境
1 conda info -e pip install 第三方库 以topologylayer==0.]]></description>
</item>
<item>
    <title>COSTAR提示词框架笔记</title>
    <link>http://localhost:1313/tools/costar/</link>
    <pubDate>Wed, 24 Jul 2024 20:48:55 &#43;0800</pubDate>
    <author>HHZZ</author>
    <guid>http://localhost:1313/tools/costar/</guid>
    <description><![CDATA[原作者帖子？
COSTAR提示词框架是一个用于提升大语言模型（如GPT-3/4）生成结果质量的工具。这个框架的目标是通过提供详细和具体的提示，指导大语言模型生成更准确和有用的内容。以下是对CoSTAR提示词框架的详细介绍：
COSTAR提示词框架是一种用于优化和提升大语言模型（如GPT-4）生成效果的方法。通过应用这个框架，可以更好地指导模型生成更加相关、准确和有用的内容。COSTAR 是一个首字母缩略词，每个字母代表了提示框架中的一个重要方面：
Context（上下文）：
提供详细的背景信息和具体情境，帮助模型理解问题的具体需求。 示例：提供更多的上下文信息，使生成的内容更加符合预期。 Objective（目标）：
明确生成内容的目标和预期结果，帮助模型聚焦于特定任务。 示例：清晰地陈述希望模型生成何种类型的内容（如解释、总结、创建故事等）。 Style（风格）：
设定生成内容的语气、风格和格式，确保输出符合预期的风格。 示例：指定正式、非正式、幽默、学术等不同的风格。 Tone（语气）：
指定生成内容的情感基调，如友好、鼓励、警告等，以符合预期的交流效果。 示例：确定需要温和、严肃、轻松等不同的语气。 Audience（受众）：
明确生成内容的目标读者或观众，帮助模型调适内容的复杂度和适用性。 示例：区分是面向专业人士还是普通读者，使内容更具针对性。 Relevance（相关性）：
强调生成内容与主题的相关性，避免不必要的偏离和无关内容。 示例：确保模型生成的内容直接回答问题，避免偏题。 如何应用COSTAR提示词框架 上下文（Context）：
提供足够的背景信息。例如，如果需要生成关于特定历史事件的内容，可以先提供一些相关的历史背景。 1 请提供关于1969年阿波罗11号登月任务的详细描述。阿波罗11号是美国宇航局的一次任务，目的是将人类首次送上月球。 目标（Objective）：
明确生成内容的目标。例如，如果需要模型生成一篇介绍文章，可以明确说明这一点。 1 请写一篇关于可持续发展的介绍文章，重点介绍其重要性和主要策略。 风格（Style）：
指定生成内容的风格。例如，如果需要生成学术风格的文章，可以这样提示。 1 请以学术风格写一篇关于人工智能在医疗领域应用的论文。 语气（Tone）：
指定内容的语气。例如，如果希望内容具有激励性，可以明确说明。 1 请用鼓励的语气写一篇关于如何克服困难的文章。 受众（Audience）：
明确内容的受众。例如，如果内容是面向学生的，可以这样提示。 1 请为高中生写一篇关于气候变化的介绍文章。 相关性（Relevance）：
强调内容的相关性。例如，如果需要内容聚焦在某个主题，可以这样提示。 1 请写一篇关于电动车优势的文章，特别关注其对环境的积极影响。 ]]></description>
</item>
<item>
    <title>Git</title>
    <link>http://localhost:1313/tools/git/git/</link>
    <pubDate>Sat, 29 Jun 2024 15:06:38 &#43;0800</pubDate>
    <author>HHZZ</author>
    <guid>http://localhost:1313/tools/git/git/</guid>
    <description><![CDATA[文件状态 未跟踪-未修改-已修改-暂存
git add &lt;name&gt; - *-&gt;暂存
git commit -m &quot;message&quot; - 暂存-&gt;未修改
git rm &lt;name&gt; - 未修改-&gt;未跟踪
查看状态 1 git status 更加细致几行几列
1 git diff 查看历史日志
1 2 git log --pretty=oneline git log --graph --oneline --decorate 基本操作 基础配置 1 2 git config --global user.name &#34;your name&#34; git config --global user.email &#34;your email&#34; 创建版本库 1 2 3 mkdir myproject cd myproject git init 克隆版本库 1 git clone https://github.com/username/repository.git 跟踪文件or文件夹 1 git add &lt;filename&gt; 1 2 git rm &lt;filename&gt; git rm --cache &lt;filename&gt; 设置缓存状态 1 git add 1 git reset HEAD &lt;filename&gt; 提交修改 1 git commit -m &#34;commit message str&#34; 撤销非首次修改]]></description>
</item>
<item>
    <title>正则表达式笔记</title>
    <link>http://localhost:1313/tools/reg/</link>
    <pubDate>Sat, 29 Jun 2024 13:37:39 &#43;0800</pubDate>
    <author>HHZZ</author>
    <guid>http://localhost:1313/tools/reg/</guid>
    <description><![CDATA[Regular Expressions 注意版本和文档！ 常用工具 https://regex101.com/ https://regexr.com/ python re模块
字符 . 匹配任意一个字符 [] 匹配括号中的任意一个字符,如 [a-zA-Z1-3] 匹配大写字母或小写字母或数字1-3, [^] 匹配除了括号中的字符
预定字符类 \d 匹配数字 \D 匹配非数字 \w 匹配字母、数字或下划线 \W 匹配非字母、数字或下划线 \s 匹配空白字符或者tab \S 匹配非空白字符
边界匹配 ^ 匹配字符串的开头 $ 匹配字符串的结尾 \b 匹配单词的边界, 如 \bthe\b 匹配the \B 匹配非单词边界
数量词 * 匹配前面的字符0次或多次 + 匹配前面的字符1次或多次 ? 匹配前面的字符0次或1次 {n} 匹配前面的字符n次 {n,} 匹配前面的字符至少n次 {n,m} 匹配前面的字符至少n次, 至多m次
非贪婪匹配 量词默认是贪婪匹配, 即尽可能多的匹配字符, 如 a.*b 会匹配到最长的以a开头的b 后面的量词加上? 则为非贪婪匹配, 即尽可能少的匹配字符, 如 a.*?b 会匹配到最短的以a开头的b
分组与捕获 () 用来创建分组, 捕获括号中的字符, 并在匹配时返回匹配到的内容 [] 用来创建字符类, 如 [Pp] 匹配P或p | 用来创建或关系, 如 a(bc|de) 匹配a后面是bc或de \n 引用分组, 如 \1 引用第一个分组 $n 引用第n个分组 ?]]></description>
</item>
</channel>
</rss>
