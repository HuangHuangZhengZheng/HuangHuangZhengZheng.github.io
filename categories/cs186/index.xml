<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>CS186 - Category - HHZZ`s space</title>
        <link>http://example.org/categories/cs186/</link>
        <description>CS186 - Category - HHZZ`s space</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 11 Aug 2024 13:09:05 &#43;0800</lastBuildDate><atom:link href="http://example.org/categories/cs186/" rel="self" type="application/rss+xml" /><item>
    <title>CS186-L4: Disks, Buffers, Files II</title>
    <link>http://example.org/databasel4/</link>
    <pubDate>Sun, 11 Aug 2024 13:09:05 &#43;0800</pubDate>
    <author>HHZZ</author>
    <guid>http://example.org/databasel4/</guid>
    <description><![CDATA[cost model and analysis 基本量化指标定义 基本假设
single record insert and delete equality selection - exactly one match for heap files: insert always appends for sorted files: packed: files compacted after deletions sorted according to search key 以下是计算时间，类似渐进记法，但是有细节 &#x1f60e; side note:
$\times D$ 是简化了每次“操作”的时间，“操作”指的是“读”与“写” 考虑随机变量 操作次数 $N$ 及其 $\mathbb{E}(N)$ Equality Search对于sorted files: $$ \begin{equation} \begin{aligned} \mathbb{E}(N) &amp;= \sum_{i=1}^{log_2B} i \times \frac{2^{i-1}}{B} \notag\ &amp;= log_2B - \frac{B-1}{B}\ &amp;\approx log_2B \end{aligned} \end{equation} $$]]></description>
</item>
<item>
    <title>CS186-L3: Disk, Buffers, Files I</title>
    <link>http://example.org/databasel3/</link>
    <pubDate>Sun, 11 Aug 2024 08:46:58 &#43;0800</pubDate>
    <author>HHZZ</author>
    <guid>http://example.org/databasel3/</guid>
    <description><![CDATA[big picture sql client -&gt; DBMS -&gt; database &#x1f913;
DBMS parsing &amp; optimization 执行SQL语句时，DBMS需要解析SQL语句，并将其转换为执行计划。优化器会根据统计信息、查询模式、索引等因素，选择最优的执行计划。 relational operators 处理数据流 or 关系运算符？ files and index management buffer management disk space management 事实上纵向还有两个模块：concurrency control和recovery。 省流：从RAM &amp; DISK获取数据非常慢， 相对于CPU
Disk 注意sector, disk head， 其中后者似乎只能单次读写 access time flash SSD 注意：
read很快，随着数据变大，可以预测
write很慢，slower for random，写入放大 disk space management block level storage block: unit of transfer for disk read/write (64~128KB in 2018)
page: a common synonym for block, in some contexts, it means in RAM]]></description>
</item>
<item>
    <title>CS186-L2: SQLⅡ</title>
    <link>http://example.org/databasel2/</link>
    <pubDate>Mon, 22 Jul 2024 21:33:38 &#43;0800</pubDate>
    <author>HHZZ</author>
    <guid>http://example.org/databasel2/</guid>
    <description><![CDATA[怎么读懂SQL语句？ FROM WHERE, to eliminate rows SELECT GROUP BY HAVING, to eliminate groups DISTINCT ORDER BY, LIMIT, OFFSET等等格式化输出 Join Queries cross product 生成所有的组合，然后过滤掉不符合条件的组合，但是低效
考虑以下sql，更加简洁
1 2 3 SELECT S.sid, sname, bid FROM Sailors AS S, Reserves AS R WHERE S.sid = R.sid self join and more aliases 1 2 3 4 SELECT x.sname, x.age, y.sname AS sname2, y.age AS age2 FROM Sailors AS x, Sailors AS y WHERE x.age &gt; y.]]></description>
</item>
<item>
    <title>CS186-L1: Introduction &#43; SQL I</title>
    <link>http://example.org/databasel1/</link>
    <pubDate>Mon, 22 Jul 2024 14:39:02 &#43;0800</pubDate>
    <author>HHZZ</author>
    <guid>http://example.org/databasel1/</guid>
    <description><![CDATA[大纲进程： sheet
SQL I pros and cons relational Terminology and concepts database: set of name relations relation(table): schema: descriptions &ldquo;metadata&rdquo; fixed, unique attribute names, atomic types instance: set of data 符合description often changed, can duplicate multiset of tuples or &ldquo;rows&rdquo; attribute (column,field) tuple (row,record),怀疑一些python概念也来自于此 DDL (Data Definition Language) 1 2 3 4 5 6 7 8 9 10 CREATE TABLE myTable ( ID INTEGER, myName CHAR(50), Age INTEGER, Salary FLOAT, PRIMARY KEY (ID, myName), FOREIGN KEY (ID) REFERENCES myOtherTable(ID), FOREIGN KEY (myName) REFERENCES myOtherTable(myName) ); 1 2 3 SELECT [DISTINCT] &lt;column expression list&gt; FROM &lt;single_table&gt; [WHERE &lt;predicate&gt;] ORDER BY Lexicographic order by default 字典序 LIMIT Aggregation functions AVG: average COUNT: count the number of rows MAX: maximum value MIN: minimum value SUM: sum of values 1 2 SELECT AVG(Salary) FROM myTable; GROUP BY HAVING]]></description>
</item>
</channel>
</rss>
