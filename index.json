[{"categories":null,"content":"lessons learned and taught 不要在能量低落的时候思考未来 / 做出重要决策 / sth important …… ⚠️ 规划，规划，规划！战略，战略，战略！ ","date":"2025-03-06","objectID":"/beyondcode/thinking5/:0:0","tags":null,"title":"Thinking5","uri":"/beyondcode/thinking5/"},{"categories":["TOOLS"],"content":"uncond train, and eval ","date":"2025-03-05","objectID":"/tools/linux/cli/:1:0","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"train # vae OMP_NUM_THREADS=3 python main.py -b configs/autoencoder/kitti/autoencoder_c2_p4.yaml -t --gpus 0,1, -r logs/kitti/2025-02-27T11-19-07_autoencoder_c2_p4 OMP_NUM_THREADS=3 python main.py -b configs/autoencoder/kitti/autoencoder_c2_p4.yaml -t --gpus 3, # lidm both for cond and uncond OMP_NUM_THREADS=3 python main.py -b configs/lidar_diffusion/kitti/uncond_vig_dec0.yaml -t --gpus 0, OMP_NUM_THREADS=3 python main.py -b configs/lidar_diffusion/kitti/cond_t2l_vig_dec0.yaml -t --gpus 1,3 -r logs/kitti/2025-02-25T12-14-50_cond_t2l_vig_dec0 ","date":"2025-03-05","objectID":"/tools/linux/cli/:1:1","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"eval # sample and eval CUDA_VISIBLE_DEVICES=2 python scripts/sample.py -d kitti -r models/lidm/kitti/vig_dec0/epoch=000027.ckpt -n 2000 -s 250 --eval # for current best model, and specify the seed CUDA_VISIBLE_DEVICES=1 python scripts/sample.py -d kitti -r models/lidm/kitti/vig_dec0/epoch=000027.ckpt -n 2000 -c 25 --eval # for inference steps CUDA_VISIBLE_DEVICES=1 python scripts/sample.py -d kitti -r models/lidm/kitti/vig_dec0/last.ckpt -n 2000 --eval # eval only CUDA_VISIBLE_DEVICES=1 python scripts/sample.py -d kitti -f models/lidm/kitti/gcn_tr1d/samples/00452624/2025-02-03-15-44-42/numpy/samples.pcd --eval conditional sample # text2lidar OMP_NUM_THREADS=3 CUDA_VISIBLE_DEVICES=1 python scripts/text2lidar.py -r models/lidm/kitti/t2l/epoch=000020.ckpt -d kitti -p \"there is a crosswalk in front of the ego vehicle\" # 有个十字路口的场景 ","date":"2025-03-05","objectID":"/tools/linux/cli/:1:2","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"docker setup ","date":"2025-03-05","objectID":"/tools/linux/cli/:2:0","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"unix helpful commands ","date":"2025-03-05","objectID":"/tools/linux/cli/:3:0","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"find and delete folders containing sth 在Unix系统中，你可以使用find命令结合rm命令来删除所有包含break的文件夹。这里有一个命令示例，它会查找当前路径下所有包含break的文件夹，并删除它们： find . -type d -name '*2025-03-02-10-04-43*' -exec rm -rf {} + find . -type f -name '*00002*' -exec rm {} + 下面是命令的详细解释： find .：从当前目录开始查找。 -type d：查找的类型是目录。 -name ‘*break*’：查找名称中包含break的目录。 -exec：对找到的每个项目执行后面的命令。 rm -rf {} +：删除找到的每个目录及其内容。{}是一个占位符，代表find命令找到的每个项目，+表示将所有找到的项目传递给rm命令，而不是一次传递一个。 ","date":"2025-03-05","objectID":"/tools/linux/cli/:3:1","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"zip zip -r topo_1000.zip *.txt ","date":"2025-03-05","objectID":"/tools/linux/cli/:3:2","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"peek the gpu usage watch -n 1 nvidia-smi ","date":"2025-03-05","objectID":"/tools/linux/cli/:3:3","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"peek the cpu usage top OMP_NUM_THREADS=3 ","date":"2025-03-05","objectID":"/tools/linux/cli/:3:4","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"kill a process kill -9 \u003cpid\u003e 在你提供的截图中，通过 ps aux | grep python 命令列出了包含 “python” 关键词的进程。 如果你想要终止所有正在运行的 Python 进程，你可以使用 pkill 命令： pkill -f python ","date":"2025-03-05","objectID":"/tools/linux/cli/:3:5","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"peek the disk usage df -h ","date":"2025-03-05","objectID":"/tools/linux/cli/:3:6","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"ssh to a remote server ssh -P \u003cport\u003e \u003cusername\u003e@\u003cremote_server_ip\u003e ","date":"2025-03-05","objectID":"/tools/linux/cli/:3:7","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"nohup nohup python GLiDR_kitti.py --data /data/data_odometry_static_dynamic/scan/ --exp_name find_shapes_kitti_mlpdiff --beam 16 --dim 8 --batch_size 32 --mode kitti \u003e training_mlp_diff_100.log 2\u003e\u00261 \u0026 ","date":"2025-03-05","objectID":"/tools/linux/cli/:3:8","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"cd cd - # 回到上一级目录 cd \"/path/to/directory with spaces\" # 进入带有空格的目录 ","date":"2025-03-05","objectID":"/tools/linux/cli/:3:9","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"tmux后台使用逻辑 # install tmux sudo apt-get update sudo apt-get install tmux ","date":"2025-03-05","objectID":"/tools/linux/cli/:4:0","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"Session 新建会话 tmux new -s lidm 离开会话 Ctrl+b d 重连会话 tmux attach -t my_session 列出会话 tmux ls 杀死会话 Ctrl+b :kill-session 上下滚动 Ctrl+b [ q ","date":"2025-03-05","objectID":"/tools/linux/cli/:4:1","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"Window 创建新窗口 Ctrl+b c 切换窗口 Ctrl+b p （上一个窗口） Ctrl+b n （下一个窗口）Ctrl+b \u003cnumber\u003e （指定窗口）Ctrl+b w （窗口列表） 为窗口命名 Ctrl+b , ","date":"2025-03-05","objectID":"/tools/linux/cli/:4:2","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"Panes 切分窗格 Ctrl+b % 垂直分割 Ctrl+b \" 水平分割 转换窗口 Ctrl+b \u003carrow key\u003e 关闭当前 pane Ctrl+b x ","date":"2025-03-05","objectID":"/tools/linux/cli/:4:3","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"build essentials sudo apt-get update sudo apt-get install build-essential ","date":"2025-03-05","objectID":"/tools/linux/cli/:4:4","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"ssh docker image transfer ","date":"2025-03-05","objectID":"/tools/linux/cli/:5:0","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"docker run nvidia-docker run -it --name 'hz_lidargen' --shm-size 16g -v /data0/dataset/:/data -v /home/liujiuming/hz:/home/hz fzhiheng/deep_envs:py38-torch110-cu113-pointnet2 /bin/bash docker start hz_lidargen # lidardiff / lidargen / ultralidar docker exec -it hz_lidargen /bin/bash ","date":"2025-03-05","objectID":"/tools/linux/cli/:5:1","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"docker save and load docker save -o my-image.tar my-image:tag scp 'epoch=000037.ckpt' liujiuming@10.129.22.67:~/GLIDR/GLiDR-main/LiDAR-Diffusion-main/models/lidm/kitti/uncond_vig_dec1 # folder scp -r my-folder user@remote-server:/path/to/destination docker load -i /path/to/destination/my-image.tar ","date":"2025-03-05","objectID":"/tools/linux/cli/:5:2","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"ifconfig ifconfig 6012 10.129.22.57 6017 10.129.22.67 6016 10.129.22.66 ","date":"2025-03-05","objectID":"/tools/linux/cli/:5:3","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"Python Lib ","date":"2025-03-05","objectID":"/tools/linux/cli/:6:0","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"knn_cuda pip install --upgrade https://github.com/unlimblue/KNN_CUDA/releases/download/0.2/KNN_CUDA-0.2-py3-none-any.whl -i http://pypi.doubanio.com/simple/ --trusted-host pypi.doubanio.com ","date":"2025-03-05","objectID":"/tools/linux/cli/:6:1","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"pointnet2_ops_lib pip install git+https://github.com/erikwijmans/Pointnet2_PyTorch.git#subdirectory=pointnet2_ops_lib ","date":"2025-03-05","objectID":"/tools/linux/cli/:6:2","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"topologylayer pip install git+https://github.com/Topologic/topologylayer.git # topologylayer np.int --\u003e np.int64 ","date":"2025-03-05","objectID":"/tools/linux/cli/:6:3","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"ninja https://kimi.moonshot.cn/chat/ctjnjk8pe77ot9u80lvg sudo apt-get install ninja-build ","date":"2025-03-05","objectID":"/tools/linux/cli/:6:4","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"pip configs / 换源 / conda 换源 pip install open3d -i https://pypi.tuna.tsinghua.edu.cn/simple # 临时 pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple # 永久 conda config --show channels conda config --set show_channel_urls yes # 加进去 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ # conda-forge conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ # 注意windows prefers http instead of https ","date":"2025-03-05","objectID":"/tools/linux/cli/:7:0","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":["TOOLS"],"content":"lidargen / ultralidar commands export PYTHONPATH=/home/hz/mmdetection3d:$PYTHONPATH # in docker CUDA_VISIBLE_DEVICES=3 ./tools/dist_test.sh configs/ultralidar_kitti360_static_blank_code.py ./epoch_200.pth 1 --eval \"mIoU\" CUDA_VISIBLE_DEVICES=3 ./tools/dist_test.sh configs/ultralidar_kitti360_gene.py ./epoch_200.pth 1 --eval \"mIoU\" for viz draft export KITTI360_DATASET=/data/KITTI-360/ OMP_NUM_THREADS=3 CUDA_VISIBLE_DEVICES=3 python lidargen.py --sample --exp kitti_pretrained --config kitti.yml OMP_NUM_THREADS=3 CUDA_VISIBLE_DEVICES=3 python try.py --loop_count 200 --mid 4 OMP_NUM_THREADS=3 CUDA_VISIBLE_DEVICES=3 python try.py --loop_count 5000 --mid 4 ","date":"2025-03-05","objectID":"/tools/linux/cli/:8:0","tags":null,"title":"Useful Linux CLI Commands","uri":"/tools/linux/cli/"},{"categories":null,"content":"Excellent Sheep 优秀的绵羊 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:0:0","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"前言 本书分为四个部分： 第一部分：讨论美国精英教育系统的现状及其对学生的影响。 第二部分：探讨学生如何摆脱精英教育系统的束缚，找到自己的人生方向。 第三部分：强调博雅教育的重要性，以及教师在培养学生独立思考能力中的作用。 第四部分：分析精英教育系统对社会的影响，探讨如何通过教育改革实现社会的公平和进步。 —— 至于教育到底是什么，你为什么要读大学，大学如何帮助你找到自我，或者说大学如何帮助你独立思考，找到自己在这个世界上的位置，这些问题你根本想都没想过。 😎 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:1:0","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第一部分 优秀的绵羊 —— 经常有人会说，他们没有去体会自己的青春，他们从没有生活在当下，他们总是在追逐一些未经深思熟虑的目标。他们总会思索，曾经的努力是否都值得？ ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:2:0","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第一章 那些头顶光环的年轻人 现状 🪞 光鲜亮丽 vs 内在窒息的恐惧、焦虑、失落、无助、空虚孤独 并且不会自愈 缺少强大的自理 自立 自控能力 并非个案 对外没有时间建立真正的感情 对成功压迫式的追求 内心的恐惧 对内没有和自己建立深层联系 成年人对这些现象没有意识，审视的角度错了 年轻人擅长隐藏自己的问题 不懂得如何思考 大局的认知 无止境的课内外活动，牺牲了理智探索的机会，没有时间找到挚爱 “我和我的朋友并非去尝试过上千种职业道路，游遍了世界各地，才决定自己要做什么。事实上，我们都是抱着从众心理，在一条久经测试过的职业道路上，步步谨慎，步步为营，确保自己能够在几年之后有所收获。同时还是能做回干细胞，与大家一样，充满着无限的可能。”——某种心态 “三角欲”：当你观察到众人都在追逐同一样东西的时候，你判断它肯定是有价值的。 所有决定动机的关键在于安全感，被恐惧驱动 更多的学生则会长期深陷于那种选择的迷茫和压力之中 但是进入精英教育之前，不是优秀的绵羊。之后怀着“资质至上”的想法，视野受限制 —— 华尔街对大学生的心态了如指掌。顶尖大学毕业的学生是一群极其聪明，但是又完全缺乏方向感的年轻人。这些年轻人拥有最强的大脑和无可挑剔的敬业精神，但是严重缺乏对自己的洞察力。他们按部就班地生活，缺乏新生活的想象力，在内心深处，他们也缺乏勇气和自由来创造自己的道路。 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:2:1","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第二章 “哈耶普”上位史 讲了讲美国精英教育系统的起源、演变及其对社会的影响 三驾马车：财富、资历和声誉 竞争趋向白热化——唯一的答案收敛于超越他人 系统性问题 —— 就算你自己的家庭或父母是理性的，他们也会显得力不从心，因为其他家长并不理性，因此学校也就不理性，甚至整个社会都不理性。 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:2:2","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第三章 “天才”背后的“魔鬼”式训练 讲了讲精英育儿模式和过度竞争的教育环境，盲目的野心，对风险习惯性的回避，霍布斯式的物质上的野蛮性竞争 霍布斯认为，在自然状态下，资源是稀缺的，人们为了争夺有限的资源，往往会陷入 “所有人对所有人的战争” 状态。这种状态是由于人类的欲望和资源的稀缺性导致的，人们为了满足自己的需求，不得不与他人竞争。在这种状态下，人们的行为往往被恐惧和竞争心理所驱动，缺乏合作和信任。 美国大学狂风暴雨的录取：实质上，这是资本阶层家庭确认自己在这个阶层里具体排位的游戏。 两种育儿经验：直升机 / 溺爱式，都是来自对孩子“过度保护”的冲动 幼龄化：学生似乎并不排斥被当作小孩子对待 动机：不少父母利用孩子的成就来填补自己脆弱的内心 本质是控制 优等生的父母往往意识不到，甚至有意识不去了解他们的孩子的痛苦挣扎，无情的压力\u0026对成绩的无限追求，是大错特错的 如今教育似乎围绕着单一的目标进行建设，似乎在孩子的潜意识里面种下“只有自己成功才值得被爱”的种子，结果是极度自卑还有自负交错折磨 为了迎合父母的需求而建立起来的“自我”是“伪自我” 学生很难察觉到自己的生活其实是受制于他人的，同样的，父母也很难察觉自己是“那种”父母 —— 在我不再因他人的成绩而感到威胁时，我的生命得到了解放，那份轻松让我学会了欣赏他人的成就给这个世界所带来的美妙。 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:2:3","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第四章 一流名校是如何运行的？ 历史遗留问题：传统英国（人文 道德品质） vs 德国（tech）高等教育 教学远远小于科研，碎片化和专业化的课题主导了本科教育 教育商业化运作，学生\u0026家长逐步变为消费者，大学之间的竞争更加激烈 但是牺牲了长期利益：学校要做的是，不断地向学生提问，而且问得最多的问题应该是他们到底追求什么。 通识教育减弱 成绩膨胀，真实的反馈消失，要求逐步变高，问题在于，你参与的事情越多，你能做好的事情就越少，并且最后什么事情都做得不理想 教育理想的缺失，需要学生和学校进行博弈，以更好地获得教育 —— 首先，大学几乎认识不到学生的问题所在，因此也就不会帮助学生认清他们高中期间所形成的不良习惯和扭曲的价值观。正因如此，我们也就不难理解，为什么众人的大学求学经历始终是他们高中的翻版。 🪞 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:2:4","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第二部分 自我 大学的4年，也就是青少年向成年转变最黄金的4年，倘若仅仅是为了职业做准备，而忽视了其他方面的培养，那简直是荒谬至极。如果你在大学毕业之际与你入学初期并无区别，你的信念、价值观、愿望以及人生目标依旧如故，那么你全盘皆输，必须重新开始。 😭 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:3:0","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第五章 大学的使命 主要围绕大学教育的真正目的展开讨论，批判了当前精英教育体系中存在的问题，并提出了大学教育应有的使命和目标 🤔 大学首先的职责是教会学生如何思考：简单来讲，学会思考就是以批判的眼光审视身边任何事物，不自以为是，不妄下结论。每当学习之前，记得“放空”。认清，质疑，思考——真正的教育（博雅教育的首要责任） 大学给每位学子提供了一次真正思考的机会：远离社会，暂时摆脱来自家庭影响和职业规划的束缚，站在远处以纯净并批判的眼光审视整个世界。 大学所赋予的自由简直是一种特权，不是吗？绝对是。你怎么可以轻易地抛弃呢？ 大学的意义是帮助我们生活得更警觉，更有责任感，更有自由度并更加完整 真正的教育是让学生带着问题迎接社会，而不是给学生一份个人简历。 一种苏格拉底式的老师belike: 这位老师的教学方式与苏格拉底（即柏拉图的老师）的方式如出一辙：他倾听学生的意见，启发式地把问题映射回去，或者迫使学生清晰地表达自己的观点。学生必须先承认自己的观点本质并为其辩护，在聚光灯之下以严谨的角度审视自己的观点，从而每位学生都能够剖析自己的想法，以批判式逻辑来检查自己的思想，这样学生才开始培养出自己的理智。整个过程就是让学生在不熟悉、不舒适的环境中得到锻炼，通过不断提出疑问，而不是吸收老师的观点，学会独立思考。 我们生活中需要的是，有专业人士提醒我们到底哪里出错了。 大学所提供的另一个重要资源就是朝夕相处的同学 课堂/宿舍闲聊：前者是为了建立一种共识；后者是为了推翻共识 最特殊的思考对象——你自己 建立自我（自我的内涵）是每个人必须要为自己做的一件事，过程将充满挑战和困难 😩 什么是优质的生活？如何实现？ 大学里困难、情感，所听所闻所感所见所思所想所触，促使你质疑你之前所有的自我认知，全身心投入，避免掉入他人哺喂给你的思想以及为你设计梦想的“二手生活” “博雅教育将质疑所有事物，因此它要求学生愿意接受推翻先前所有认知的风险。只有这样，真正的博雅教育才能彻底改变一个学生的生命” 大学是我们应该开始为自己做决定的初始阶段。 每个人在大学期间真正需要培养的是反思的习惯，即拥有从变化中成长的能力。 自我意识是一个极其私密的空间，在这个空间里，你能找到自己的力量、安全感、自主、创造力和快乐。人可以一直忙忙碌碌，不需要灵魂，只需要放大的自我和意志力，但是不乏内心空虚者。 大学的使命是成就一个更有意思的你，你认识到你将是陪伴自己终其一生的唯一人选：一个人之所以有意思，是因为他大量阅读，习惯思考，放缓脚步，投入深度对话，并为自己创建了一个丰满的内心世界。 —— 这种人群根本不能表达与“我”相关的概念，比如“我想要”，因为“我想要”的前提是要明白“我是谁”，因此这些人只会说“要钱”“要豪宅”或“要哈佛”（最终跟“我”没有关系）。😎 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:3:1","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第六章 创建自己的生活 方向 “我擅长做什么？”“我关心什么？”“我坚信什么？”，自我了解是有效的工具。找到自我的前提是解放自我，不被外界所干扰，倾听呼唤 对创新需要新的思考：另一种创新——生活创新，“精神想象力”意指一个人有能力摆脱固有的生活方式，以最大尺度去想象所有的可能性，创造属于自己的生活方式。 对勇气的思考：肉体和精神。精神勇气的不易之处就是，个体必须只身作战。要有壮士断腕的勇气与传统和平庸决裂，与内心那个声音并肩作战！精神勇气者，更愿意承担风险 传统大众的外界声音，或许我们就是其创造者而不自知 如何找到热爱？ 选择做一些自发纯粹的事情，就如同你小时候那样； 选择做一些即使没有外在奖励你也会选择做的事情； 选择做一些你可以废寝忘食地专注去做的事情； 做你最喜欢做的事，不是你认为自己喜欢或者应该喜欢的，而是你的真爱。 在满足基础物质条件之上，一个人的幸福感来自健康的社交圈以及从事有意义的工作，鸡汤文学。然鹅找不到热爱，会有恐惧感，记住意义在于你在做什么，而不是你是什么。生活应该是可持续性的生活 一个人可以为了等待未来的收获，无限期忍受工作的煎熬，延迟自己的满足感或者放弃享受工作本身，但是遗憾似乎不可避免会在过程中产生。 始终有寻找热爱的自由：现代社会给予了个人思考和选择的自由，这既是一件礼物也是一个负担。自由可能带来恐慌和迷失，因此我们更容易选择放弃，让他人告诉我们应该怎么去做，但无论如何，我们至少不能无视这种自由的存在。同时，速战速决如此令人兴奋，同时也令人安心。面对大学的各种陌生和不确定，我不知所措，因此我的第一反应不是开启大门，而是要迅速把它关闭。 “遇到-解决问题+找到自我”有局限，相比之下，理想拥有更强大的力量，比世界上任何东西都珍贵，它给予我们力量抵挡地位、财富和成功的诱惑。 注意是否曾经释放过信号 有了方向，并不是一帆风顺，反而可能困难重重！ 风险 有一个前提：铲除心里潜意识的种子——害怕失败。一直成功（即从未失败）并不是能力的体现，而是脆弱的表现，因为出于害怕失败，个体往往放弃一些本来能够造就他成就自己的机会。 不论我们的目标是伟大的还是平凡的，我们尝试走自己的道路的理由是：这将是自己的生活，自己的选择，自己的错误。生命本来就是一场长途旅行，逐渐才能发现自己最真实的生活方式，前提是，你的方向是对的。 面对恐惧。必须降伏它，相当一部分恐惧缺乏立足的逻辑 但是个人探索是有截止时间的，年轻人不应该惧怕自己生活中所经历的冲动和疑虑——即使它们很有可能迫使自己偏离甚至改变自己原来的人生轨道 虽然我强调创建自己的生活方式，但是我同样要强调为之付出的代价。“寻找你的热爱”的同时，你必须清楚“你要为此做出牺牲”（而这种牺牲可能不仅仅是放弃你可能获得的社会地位） 为了学习而学习vs为了名次而学习，本质上不可调和 与其为成功而工作，不如为工作本身而全身心投入，评判标准只有一个：是否过上满意的生活？ “做自己”似乎被口号化了，成为独立个体，拥有精神勇气是不可能通过配备装饰的方式而实现的。总而言之，如果你未曾放弃什么，那根本就谈不上精神勇气。挫折、牺牲、内心挣扎、出师不利、走弯路、与家人和朋友之间的矛盾等，这些才算是真正意义上走向独立的特征。 自欺欺人是另一种风险，我们都无法忽略一个大前提——现实，金钱是基础，但是不是决定因素。这里的核心问题是一个人的内心自由度。你在20多岁所能够承受的不确定性的程度以及能够管理的财富取决于你是谁。思想可以扩展，价值观可以改变，但是我们的个性一旦形成就很难变化 平时生活朴素本身就是一种自由，因为你能更适应简单的生活。 经济基础较差，本身试错成本较低 重建自己的生活是一种特权，有机会追随自己的热情是每个人最终应得的权利，即使公开反对这些不争的事实，我们也并不能使它们完全消失 得到父母的支持固然重要，但相对而言，学会不受父母左右更加重要，这也是成熟的表现 当然反叛并非一蹴而就，而是个缓慢的过程，每个人都需要空间测试极限，但是如果一个人不跨出第一步，认为每一步都极具风险，那么成长将永远不会开始。 与父母的交流频率不超过一周一次，最好是一个月一次 同时，也不要期望求助于父母 花时间休整或者放慢脚步，跳出永无止境的名利追逐的陷阱，脱离无时无刻的被管理的状态，去探索学校之外的世界，去发展你一直以来没有机会获得的技能。脱离框架式的生活。寻找答案的唯一途径就是付出行动 面对无穷的选择无从下手，你选择了一条路，在这条道路上克服千辛万苦徒步前进，你会遇见不同的人，发现新鲜未知的世界，从而你会思考这个世界能够给你带来什么（况且这个世界无时无刻在变），以及你能够给这个世界带来什么。通过这个过程，遇见那个更好的自己。 创建自己的生活并不意味着你可以成就任何事情。快乐来自我们能够发挥自己擅长的能力，也就是说，我们各自拥有某些特长，但只是某些。 创建自己的生活也并不意味着世界围绕着自己转动。在工作的过程中，我们会经历焦虑、挫败、羞耻等等，甚至有些时候想放弃，重新做选择，稍稍坚持 最后补充一句，创建自己的生活并非不思进取。你还是要努力工作，尤其是在起步阶段。不同的是，当你所做的事情具有强大的使命感时，你会感受到无比的成就感。 —— 欲度关山，何惧狂澜，风生水起，正好扬帆，提醒自己要放慢脚步给自己思考的空间，给自己机会。当你试图拒绝不确定性，那么你就拒绝了生命的意义。可能会落后，也许吧。但是如果方向错了，跑得快又有何意义呢？这时停止就是前进！ ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:3:2","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第七章 聪明人的道德和责任 大学教育的目的不止停在个体层面 什么是领导力？什么是未来的社会领导者？ 事实上，顶级大学所倡导的领导力与社会进步的关系相当薄弱，与过去大学所提倡的社会进步更相去甚远，更不用说与领导力的本意所存在的距离了。 其核心就是，只要掌权，不在乎你所选择的领域 官僚系统里，dd归其原因是因为，在这种体制下，上升的速度取决于个人在体制内周旋的娴熟程度，而非专业背景的卓越。 与其培养领导者，不如致力于培养公民 and 思想家 最好的领导者就是思想家。思想家具有叛逆思维：不只是解答问题，还提出新的问题；不只是完成任务，还思考任何一件事情的价值所在；不只是勇于冲锋陷阵，更重要的是为公司、行业乃至整个国家制订新的战略方向。 拥有领导力不亚于重建自己，最核心的元素是勇气和想象力。最核心的任务是，筹建一个有能力与这个社会现状对抗的个体。需要 意志力， 找出并揭示棘手的问题 只有当你的内心或者灵魂感受到现在的自我和追求的自我之间的差距时，变化才会随之产生。 为什么在顶尖高校就读的学生与自己所处的系统如此亲密？那是因为他们在这个系统里如鱼得水。以至于缺乏魄力and想象力。试问新一代中，到底有多少人考虑过投身改变社会的架构；就算思考过，又有多少人愿意去行动呢？任何理想、理念、远大抱负不过是20世纪的挣扎。这种科技主义至上的思路正在统领着现代高等教育，其所缺失的正是整体大局观的教育，缺失的是对社会最根本存在的审视。 问题关键是，你是否知道自己做事的理念和原则是什么？如果不清楚，那么你很有可能随波逐流，接受最时髦的事物，并且不知道你的言行正在受其影响、被其浸染。 人们普通抱着一种远离纷扰的大环境的心态，比如远离政治舞台，千禧年一代尤为如此。 倘若掌权者是不上心的政治家，那么我们所做的小事将永远微不足道。远离政治并不能消除政治无所不在的影响力。政治是一场丑陋的、漫长的战争。参与这场战争的绝大多数人都处于第一线。 “服务他人”同样被严重曲解 改变世界需要是我们的共同目标，但是每个人都需要寻找符合自己的道路。哲学家爱默生呼吁，我们每个人都必须发动个人革命，把自己从现世的意识形态中解救出来 大学教育的意义的确远超个人教育。如果你就是大学本意要培养的那种领导者，那么至少你就应该具备质疑的能力，并且首先应该质疑你自己所接受的大学教育 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:3:3","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第三部分 我们到底应该在大学里得到什么？ 我们所学的在10年内就会被淘汰。最重要的是学会如何学习 🤓☝️ ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:4:0","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第八章 博雅教育和人文经典 经久不衰的最佳方案就是以人文为中心、由敬业的教授主导小班教学的博雅教育。 博雅教育是什么 博雅教育定义涵盖了自然科学和社会科学。简单来讲，博雅教育追求学识的目的是学识本身，即一种纯净的求学理念。 博雅教育是探究和追求真理的教育，而非为了任何形式的实用性回报。 博雅教育所探究的是知识的产生过程，是对知识的溯源，而不是去接受现有的知识；学生不是吸收知识，而是对新旧知识进行思辨。学会论证！ 怎么做？ 接受知识的深度，前沿上feel your way 接受知识广度，不仅要学会思考，还要学会不同的思考方式。最重要的是，你学会了自我引导 为什么？ 培养创造性人才 现在的社会，信息唾手可得，关键在于是否懂得如何有效利用信息。 博雅教育的终极目标并非实用主义，而是培养你超越空间和时间来思考问题、不受工作性质所限制的能力 构建自己并非空穴来风，一个有效的办法是向前人借鉴智慧。 我们在享用他们硕果的时候，针对的并不是某个固定领域或某种职业，而是人性 改变其他人的生活 【专才\u0026通才】博雅教育的最终目的是合二为一的，学生在博雅教育中所获得的智慧将贯穿未来的任何专业或领域，我们将不再刻意区分左边是工作，右边是生活；上面是通识，下面是专业。它们是融合的统一体，是相互渗透的。 如今寻求真理的途径变得多元化，经历也更加个性化，人们摒弃了过去的教条式模式，逐渐来到人文主义/唯美主义/艺术 我们在阅读文章或者欣赏艺术品时，最关键的问题不是我是否看明白了，而是该篇文章或该件艺术品是否能引起我的共鸣，从而帮助我更懂得自己。这也应该是大学教育的作用“这就是我”的欢呼就是艺术作品的最高境界。我们从他人身上看到了自己，他人也在我们身上看到他们自己 可以找到生活的范本/缩本，事实上，生活中的一切都可以在艺术中找到 艺术与其他形式的刺激的本质区别在于：它不仅仅为读者提供了生活榜样，而且也提供了质疑艺术本身的方法。阅读文学作品要求的是一份审慎的态度，而非冲动。 看透他，看出“个人欲望” 我们需要研究人类是如何思考的，人类的追求是什么，行为习惯是什么等等，同时我们要了解未来的规划中可能存在的缺陷。人文艺术以简单的方式填补了社会科学的缺失。 同时也能了解过去：在个人层面，了解自己的过去，你才会明白自己言语背后的动机 人文经典有其价值，每个人都应该学点 培养公民意识是学习古典学的首要目标，但是更关键的事情是学习名著，而不仅限于西方范畴的名著 —— 既然现在可以不同于过去，那么未来也可以不同于现在。要成为一位领导者，过去就是最合适的开端。 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:4:1","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第九章 教师的本职和学生最核心的能力 教师工作的本质是激发并唤醒潜伏在每个学生体内处于睡眠状态的能量。 家庭之外的成年人对孩子的成长起关键作用。 导师不局限于技术知识，更多的是倾听，帮助学生听到自己的声音 讲课的时候分享一定的人生 旁征博引，全能的 改变了生活 思考的培养与身体方面的技能培养本质上没有差异，我们不要忘却，大学致力于培养学生的最核心的能力是学会分析他人的观点并阐述自己的观点。“自我定位”也是一种需要获取的能力 学习新事物需要在小班环境中得到足够的机会尝试和锻炼，并根据自己的天资和需求接受一对一的辅导。大学致力于培养学生的最核心的能力是学会分析他人的观点并阐述自己的观点。 讲课是一种落后的教学方式，对此我表示同意。因此我们的课堂应该小而精，方便研讨.课堂是一种缓慢艰苦的过程。 —— 本科教育\u0026教师面临的挑战的评价参见《生存手册》 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:4:2","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第十章 隐藏的常春藤 名校之外的，能够弥补名校不足的选择？🤔 学生之间的影响是时时刻刻，实实在在的 学生背景多元化，有利。名校同质化背景，不利。“学校之间最关键的差异永远是学生群体” 有博雅教育的项目，人文学科教学质量不差 大学教育的出口与入门同等重要，因此择校的另一个考虑是，大学如何帮助学生从本科过渡到大学之后的生活 你为什么要上大学以及如何利用大学教育？—— 相比于去哪所大学？ 初到大学，我们要以敏锐的嗅觉迅速寻找良师，并要勇于在课堂之外同他们建立关系，道之所存，师之所存也 至于具体的专业选择，那要听从你的直觉，一定要选择一个让你能够兴奋四年的专业 —— 哈佛、耶鲁、斯坦福该何去何从？深红色、品蓝色和鲜红色三种校园颜色，最喜欢哪一种？ ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:4:3","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第四部分 社会 深入探讨了美国精英教育系统对社会阶层固化和社会不平等的加剧作用 👀 社会正义意味着你需要放弃一些你拥有的东西，从而让别人能够拥有更多。 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:5:0","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第十一章 看不见的“特权堡垒” 简言之，精英教育系统在不断复制繁衍美国的阶级系统，其影响与一个世纪之前的“三驾马车”所为并无二致。具体来说，它是在扩大社会不平等，妨碍社会流动性，固化阶级特权，并创造了一个与盎格鲁-撒克逊贵族类似的与社会隔离的精英阶层 培养成本越来越高 精英治理 局限在一定的范围之内 自我恭维，自我夸大 表面多样性掩盖了经济背景的差异 精英心态，与社会的脱离：我也不知道，我最多只能建议他们去公立大学看看。要想真正懂得与自己背景不同的人，你只能实际进入他们的世界 “奉献意识”，为了强化傲慢与优越感 不安全感：权力感总是伴随着一种焦躁和自私，拥有权力感的人总是被笼罩在对失败的恐惧之中。 理所应当，只是更加努力罢了 真正的问题是，当前的环境让我们很难做出其他选择。事实上，真正的问题在于精英治理本身。 —— 学生们在校的学习方式，甚至包括他们在校所接触的学习之外的东西，都会影响他们未来所处的阶层位置。工薪阶层的孩子们会学习如何严格遵守纪律，所受的教育也都比较机械，大都是死记硬背的；职业人士的子女们则会学习如何创造，如何表达自我；而商业阶层的孩子们则会学习掌握权力、统治和自我掌控等内容。 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:5:1","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"第十二章 精英教育的自我救赎 集中探讨了美国精英教育系统的问题根源，并提出了对这一系统进行改革和自我救赎的必要性与可能路径 精英治理的现状 与所有统治阶级一样，精英阶层也主张“一切从大众利益出 发”。根据定义，这一思想本身就是一种捍卫自身利益的方式，它绝 口不提责任和义务，不提性格或领导力，而只是强调个人成功和个人 利益。 所有领导阶层都会发展一套证明自己权力合法性的意识形态 其实精英们知道那些人是存在的，但他们就是无法想象后者的生 活是怎样的。虽然他们做出的很多决定都会影响普罗大众的生活，但 他们却根本没兴趣去体验大众的生活。 所有的总统候选人，一旦达到这个层次，都会展现出惊人 的野心。比如克林顿，所有人都看得出来，他就是在野心中泡大的。 他很清楚自己想要什么，但却不知道自己为什么要那个。 但是笨蛋。他们的确聪明、有天分、活力四射，但同时又充满焦虑、贪婪、冷漠、怯懦，没有勇气，没有远见——这就是今天的精英阶层。刻意回避困难的事情 随着优秀大学的增多以及越来越多的优秀学生被哈佛、耶鲁、普 林斯顿和斯坦福拒之门外，为什么这个社会还那么看重名校呢？根源 还是在于推动整个系统的那种精英主义心态。 精英治理不仅自我封闭，自我强化，它还会假公济私。 似乎没有人认为领导本身就意味着机遇和责任。精英们只效忠自己的野心，其他一切都不重要。 事实上，精英阶层是在以牺牲子孙后代的幸福为代价来换取自己 今天的地位。 改变方式 新的社会形态必须保证特权不会代代相传，这个非常重要。 他们需要重新思考“美德”一词的含义 我们希望孩子们更能承受挫折，更自立，更有精神独立性，对世界充满好奇，更有创造力，更愿意去冒险，更愿意去犯错误。谁还会认为今天的常春藤盟校学生在智力活动上依然生机勃勃呢？谁还会认为今天的他们（极少数除外）依然才华横溢呢？（别忘了，才华横溢和极其聪明并不是一回事） 改变录取流程或许能够解决庸才的问题，但却无法改变这个社会的不平等。私立学校和大学可以向穷人或中产阶级敞开大门，但他们能做的，也只有这些。我们需要的是对整个教育系统来一次大修。🤷 现在我突然意识到，我们真正要做的，不是让所有孩子都能上常春藤盟校，而是要让那些没上常春藤盟校（或任何私立学校）的孩子，也能享受到一流的教育 但如果我们想创造一个真正公平的社会，仅仅提供一流的免费高等教育是不够的。要想让孩子有公平的机会考上大学，就要让他们在准备申请大学之前就享受公平 首先，我们要消除K-12阶段的不平等 税收，不要回避阶级问题 自我救赎是一件非常严肃的事情。 血统真的是一个很愚蠢的问题。为什么要考虑这个问题呢？当你想要培养一个孩子时，他到底是不是你的亲生骨肉又有什么关系呢？我们这个时代的所有孩子，都是这个时代成年人的孩子，都应该得到所有成年人的照顾。 —— 一旦精英主义开始内部繁殖，它就会绵绵不绝。所以那些位高权重的人，虽然他们个个出身显赫，却总是会一次又一次地重复相同的错误。结果就是，美国整个国家的命运都可以追溯到小学，或者更贴切地说，追溯到子宫。 ","date":"2025-02-13","objectID":"/beyondcode/thinking4/:5:2","tags":null,"title":"Thinking4","uri":"/beyondcode/thinking4/"},{"categories":null,"content":"超速学习笔记 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:0:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第一章 引入，讲了讲mit挑战、流利外语、学习任何问题、以及一群超速学习的人 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:1:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第二章 什么是超速学习？ 一种策略，自主的（学什么、为什么学）、高强度的（采取特殊步骤达到最高学习效率） 超速学习的好处？ survive 带给你信心 超速学习的因素 天赋、时间都不是主要影响因素 ——每个人都能超速学习 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:2:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第三章 如何超速学习？ 一个钢琴家训练公开演说的故事 因为还没有系统提出法则，所以我来简单列举一下关键词 选定学习主题 组织 练习 反馈 毅力 决心 推论：有九个法则 + 一种学习精神 ——你是掌管全局的人，也是最终对你做出的成果负责的人。若你用那样的精神去从事超速学习，应该把这些原则当作有弹性的指导方案，而非死板的规则。 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:3:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第四章 1 后设学习 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:4:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"是什么 学习如何学习，画一张学习地图，具有短期（有变化）和长期（战略上来看）效应 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:4:1","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"如何画出地图？ 回答三个问题 为什么（功利性 本质性 十五分钟以内专家访谈法） 做什么（概念 事实 程序）标出最具挑战性的任务 知道瓶颈是什么 怎么做：标杆学习法（人们的共同方式） + 强调排除法（找出与目标相一致的 + 延迟与目标不一致的） 但是怎么把握调研 vs 学习？ 百分之十法则：预期投入的10%左右 计算报酬递减与边际效应：问自己研究是否有用？做研究：不做研究 事实上，长期效应更具有价值，一次成功的经验带来信心，接着投入下一场计划之中 ——你知道自己在拖延时间，开始去做就对了 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:4:2","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第五章 2 专心致志 拖延？ 有些时候是在用工作逃避另一个工作 😎 拖延更多是无意识的 练习开始专注的三个支架：1. 支撑开头难 2. 番茄钟减短休息 3. 日程表 分心？ 心流可能存在 长时间学习记得切换主题 三个来源取消：1. 环境？ 2. 学习任务？（难度？有没有反馈？） 3. 你的心？（避免负面情绪） 真正的专注？ 兴奋感过强，不利于专注 放松的专注 or 长时间的专注后完全放松 专注力可以被刻意锻炼出来的 ——放下一个主题，之后能够立刻回到那个主题 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:5:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第六章 3 直戳了当 自学的时候不一定直接！因为直接学习可能会不太舒服、无聊或者挫折，但是真正的学习其实是在直接做你想变得擅长的事情。简单自学容易不知不觉陷入糟糕且无效的学习策略里面 正式教育并不能保证学习迁移 学习新事物的时候，永远致力于和想使用这些能力的环境想联结——直接从源头学习 如何直接学习？ minds and hands 或许并不是具体的技能，而是想深入了解某一领域？搭建知识体系 并且 迁移 具体方法？ 以计划为基础，创造为导向 沉浸式学习 模拟认知学习环境 突然把自己放到一个要求极高的环境里，不断获得教训or回馈 ——必须给他们看，你从第一天就能直接开始工作，并且是有用的团队成员，而非负担 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:6:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第七章 4 直击弱点 仔细分析（找到瓶颈），刻意练习（资源集中在这一部分） ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:7:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"先直接学习，后反复操练 直接练习想要学会的技能 分析该技能独立的要素 回到直接练习，整合所学 注意以上循环会越来越快，且时间会越来越集中到反复操练上面 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:7:1","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"反复操练的三个步骤 时间and项目 设计怎么操练 如何克服挫败感？ 切割一小段时间 / 认知练习（只是针对概念） / 模仿别人（直接复制不想操练的部分） / 放大镜法（侧重花时间） / 连动法（以终为始，递归学习） ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:7:2","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"有意识的操练 要有 强烈的动机 ，知道背后的缘由来龙去脉 ——别害怕直面重拳 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:7:3","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第八章 5 提取记忆 直接复习，书越读越差，主动去构建知识 提高难度并且选择在“准备好”之前就自我测验（注意难度不要太高） —— 在课程开始前，就参加期末考【前向测验效应】 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:8:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"提取什么记忆？ 直接练习 积累殊途同归的知识点 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:8:1","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"如何提取记忆？ 快闪卡 自由回想 合上书本，question yourself ——无论你是否准备好，提取记忆练习的效果都比较好 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:8:2","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第九章 6 意见回馈 务必取得回馈，回馈是不舒服的，对于回馈的恐惧本身更加不舒服，所以要有 极大的自信、决心、坚持 回馈的类型： 结果（小用） / 信息（哪里做错了） / 改正（找到专家） 【从较弱到较强的形式，如果实际上做不到，那么不要强求】 多快取得回馈？立刻 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:9:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"如何改善回馈 消除噪音，有一些可以被量化的信号能帮你参考 尽量避免总是让你对自我表现感觉良好or不好的情境 可以追踪学习速率的回馈，学习速度有多快？ 高强度且快速的回馈 / 暴露在大量的回馈里面 ——反而最好是提早上场，接受重击，才不会让回馈把你击倒 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:9:1","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第十章 7 保留记忆 执着的高强度训练，超越了被视为正常的努力的付出 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:10:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"如何预防遗忘？ 会达成你的目标、且简单到足以持续的记忆方法 间隔法：重复记忆 程序化：你是怎么骑车的 过度学习：频繁的使用某点技能： 精练 / 预先练习更高阶的技能 记忆法：use graph ——为什么不用disk呢？ ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:10:1","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第十一章 8 培养直觉 两种天才：一旦了解别人做到了什么事，我们就很确定自己也能做到 vs 即使我们了解他做了什么事情，对于他做那些事情的过程，却完全不可知 费曼的直觉 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:11:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"如何建立直觉？ 别轻易放弃困难的问题 【5min挣扎计时器】 用证明的过程来理解，小心理解的错觉 永远从具体的例子开始 别欺骗自己，而你是最容易欺骗的人，多问笨问题 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:11:1","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"费曼学习法 我喜欢橡皮鸭？🦆 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:11:2","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第十二章 9 勇于实验 假设/实验/成果/重复 不断循环 运用的方法、观念、资源的多样性 + 高强度 实验的类型： 学习资源 / 技巧 / 风格 实验的心态： growth mindset ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:12:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"如何进行实验？ 先模仿，再创造 把各种方法进行比较 添加新的限制，逼出新的能力 混合不同技能 0.8*0.8 探索极限 ——你掌握这些基础后，能力可能停滞不前，开始实验吧 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:12:1","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第十三章 第一个超速学习计划 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:13:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"1.深入研究 学习的主题与大致范围：狭窄开始，学你必须学的 主要资源：人、物 他人如何学会这项技能的基准点：避免完全错过某件事情 直接练习活动：你可能会如何使用这项技能？ 备用教材与操练：less is more ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:13:1","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"2.安排时间 why： 控制你的潜意识\u0026预留时间 三个决定：投入时间、什么时候开始去做、花的时间长度（短的commit优于长的、较短的间隔式的时间区块更优记忆）？ 放入日历表：六个月左右的计划以周为单位 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:13:2","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"3.执行计划 不断回顾9个原则，DP ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:13:3","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"4.检视成果 每天分析，每周分析，每月分析 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:13:4","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"5.选择维持or专精 维持 投入练习 融入生活 重新学习 专精 🤔 可能的替代选择 低强度学习：积累-\u003e习惯，想要忘记无效的行为或技能or存在障碍使得无法轻松建立习惯？-\u003e超速学习 大学教育：培养正确的心态，不是排斥任何较慢的或较标准化的学习方式，而是承认学习任何事物的可能性比一开始看来要宽广得多 ——最大的障碍是你不在乎自己的自学计划，以至于无法展开行动；终身学习，是要扩展而非缩小你能得到的机会 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:13:5","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":null,"content":"第十四章 一种非传统的教育 tldr: 理论上可以教会别人超速学习 😎 ","date":"2025-02-06","objectID":"/beyondcode/thinking3/:14:0","tags":null,"title":"Thinking3","uri":"/beyondcode/thinking3/"},{"categories":["Stanford-CS224W"],"content":"Scaling up GNNs 直接load全部nodes又不太可能【naive approach】4090 / A100带不动 ","date":"2025-01-29","objectID":"/l17-huge-gnn/:0:0","tags":null,"title":"L17-huge GNN","uri":"/l17-huge-gnn/"},{"categories":["Stanford-CS224W"],"content":"neighbor sampling 对hub node的思考 see the paper ","date":"2025-01-29","objectID":"/l17-huge-gnn/:1:0","tags":null,"title":"L17-huge GNN","uri":"/l17-huge-gnn/"},{"categories":["Stanford-CS224W"],"content":"cluster-GCN advanced ","date":"2025-01-29","objectID":"/l17-huge-gnn/:2:0","tags":null,"title":"L17-huge GNN","uri":"/l17-huge-gnn/"},{"categories":["Stanford-CS224W"],"content":"Simplified GCN 舍弃了GCN的non-linearity，直接用linear layer 同质性？但是我想知道和glidar的区别？ ","date":"2025-01-29","objectID":"/l17-huge-gnn/:3:0","tags":null,"title":"L17-huge GNN","uri":"/l17-huge-gnn/"},{"categories":["Stanford-CS224W"],"content":"Improved GNN ","date":"2025-01-29","objectID":"/l16-improvedgnn/:0:0","tags":null,"title":"L16-improvedGNN","uri":"/l16-improvedgnn/"},{"categories":["Stanford-CS224W"],"content":"positionally-aware gnn anchor数量 大小 （指数守恒） refer to the paper of Position-aware Graph Neural Networks (P-GNN) ","date":"2025-01-29","objectID":"/l16-improvedgnn/:0:1","tags":null,"title":"L16-improvedGNN","uri":"/l16-improvedgnn/"},{"categories":["Stanford-CS224W"],"content":"L7-GNN theory 1 所有gnn的原型在这里 一个layer layers之间的交互 input graph -\u003e computational graph的构建 GO!!!! ","date":"2025-01-28","objectID":"/l7-gnn-t1/:0:0","tags":null,"title":"L7-GNN t1","uri":"/l7-gnn-t1/"},{"categories":["Stanford-CS224W"],"content":"a simple layer of GNN msg computations 原神处理dddd aggregation 核心：order invariance 焯这就是pointnet的核心之一啊！！！ issue： 容易忽略自己节点 ","date":"2025-01-28","objectID":"/l7-gnn-t1/:1:0","tags":null,"title":"L7-GNN t1","uri":"/l7-gnn-t1/"},{"categories":["Stanford-CS224W"],"content":"some examples of GNNs GCN GraphSAGE 这里的细节在于如何聚合邻居的信息 同时每层来个norm GAT 首先解释一下什么是attention mechanism 单个attention的计算 多头attention的计算（更容易收敛） ","date":"2025-01-28","objectID":"/l7-gnn-t1/:1:1","tags":null,"title":"L7-GNN t1","uri":"/l7-gnn-t1/"},{"categories":["Stanford-CS224W"],"content":"GNN layers in practice glidar呼之欲出了 😱 有意思的东西😋 ","date":"2025-01-28","objectID":"/l7-gnn-t1/:1:2","tags":null,"title":"L7-GNN t1","uri":"/l7-gnn-t1/"},{"categories":["Stanford-CS224W"],"content":"stacking GNN layers ","date":"2025-01-28","objectID":"/l7-gnn-t1/:2:0","tags":null,"title":"L7-GNN t1","uri":"/l7-gnn-t1/"},{"categories":["Stanford-CS224W"],"content":"GNN Intro ","date":"2025-01-27","objectID":"/l6-gnn-intro/:0:0","tags":null,"title":"L6-GNN intro","uri":"/l6-gnn-intro/"},{"categories":["Stanford-CS224W"],"content":"shallow ","date":"2025-01-27","objectID":"/l6-gnn-intro/:1:0","tags":null,"title":"L6-GNN intro","uri":"/l6-gnn-intro/"},{"categories":["Stanford-CS224W"],"content":"deep graph encoder tmd 终于来了 !!! 借鉴cnn，但是 没有fixed notion or sliding window permutation invariance！ ","date":"2025-01-27","objectID":"/l6-gnn-intro/:2:0","tags":null,"title":"L6-GNN intro","uri":"/l6-gnn-intro/"},{"categories":["Stanford-CS224W"],"content":"GCNN 直觉上的思考 其实就是3 + 1步走 找到aggregate function 找到loss function train on a set of nodes apply to new nodes 7 8.1 9 16.2 17 ","date":"2025-01-27","objectID":"/l6-gnn-intro/:2:1","tags":null,"title":"L6-GNN intro","uri":"/l6-gnn-intro/"},{"categories":["Stanford-CS224W"],"content":"Node Embeddings https://web.stanford.edu/class/cs224w/slides/02-nodeemb.pdf ","date":"2025-01-27","objectID":"/l3-node-embeddings/:0:0","tags":null,"title":"L3-Node Embeddings","uri":"/l3-node-embeddings/"},{"categories":["Stanford-CS224W"],"content":"encoder and decoder ","date":"2025-01-27","objectID":"/l3-node-embeddings/:1:0","tags":null,"title":"L3-Node Embeddings","uri":"/l3-node-embeddings/"},{"categories":["Stanford-CS224W"],"content":"encoder: simple example ？？注意这里矩阵是one column per node， 这里似乎解释通了为什么glidar里面node在encode的过程中数量不变，换句话说就是 not scalable 呼之欲出啊啊啊啊啊 😱 以下内容非常具有启发性 ","date":"2025-01-27","objectID":"/l3-node-embeddings/:1:1","tags":null,"title":"L3-Node Embeddings","uri":"/l3-node-embeddings/"},{"categories":["Stanford-CS224W"],"content":"Random walks 怎么理解高效率？ 对特征学习的考量 提出损失函数 用了一个近似来化简 （不约而同走到了noise-denoise） k在5~20之间！又是glidar的论文！ ","date":"2025-01-27","objectID":"/l3-node-embeddings/:2:0","tags":null,"title":"L3-Node Embeddings","uri":"/l3-node-embeddings/"},{"categories":["Stanford-CS224W"],"content":"summary ","date":"2025-01-27","objectID":"/l3-node-embeddings/:2:1","tags":null,"title":"L3-Node Embeddings","uri":"/l3-node-embeddings/"},{"categories":["Stanford-CS224W"],"content":"node2vec ","date":"2025-01-27","objectID":"/l3-node-embeddings/:2:2","tags":null,"title":"L3-Node Embeddings","uri":"/l3-node-embeddings/"},{"categories":["Stanford-CS224W"],"content":"embedding the entire graph SKIP ","date":"2025-01-27","objectID":"/l3-node-embeddings/:3:0","tags":null,"title":"L3-Node Embeddings","uri":"/l3-node-embeddings/"},{"categories":["Stanford-CS224W"],"content":"Traditional Methods in Graph Learning ","date":"2025-01-27","objectID":"/l2-traditional-methods/:0:0","tags":null,"title":"L2-traditional methods","uri":"/l2-traditional-methods/"},{"categories":["Stanford-CS224W"],"content":"node-level features degree Centrality measures: degree centrality, betweenness centrality, eigenvector centrality, closeness centrality, clustering coefficent 进一步引申GDV ","date":"2025-01-27","objectID":"/l2-traditional-methods/:0:1","tags":null,"title":"L2-traditional methods","uri":"/l2-traditional-methods/"},{"categories":["Stanford-CS224W"],"content":"edge-level features 我觉得这个很像我们的vae encoder想法 距离表征容易理解…… 邻接矩阵的幂（类似于归纳法 略） ","date":"2025-01-27","objectID":"/l2-traditional-methods/:0:2","tags":null,"title":"L2-traditional methods","uri":"/l2-traditional-methods/"},{"categories":["Stanford-CS224W"],"content":"graph-level features 核方法（但是skip） bag of sth… recall when you need ","date":"2025-01-27","objectID":"/l2-traditional-methods/:0:3","tags":null,"title":"L2-traditional methods","uri":"/l2-traditional-methods/"},{"categories":["Stanford-CS224W"],"content":"CS224W: Intro to Graph Deep Learning ","date":"2025-01-26","objectID":"/l1-intro/:0:0","tags":null,"title":"L1-Intro","uri":"/l1-intro/"},{"categories":["Stanford-CS224W"],"content":"GNN for img 也就是说gnn会比传统的cnn更好 🤔 gnn as encoder and diffusion process! ","date":"2025-01-26","objectID":"/l1-intro/:0:1","tags":null,"title":"L1-Intro","uri":"/l1-intro/"},{"categories":["Stanford-CS224W"],"content":"how to build a graph? 基本图论知识见CS61B nodes??? edges??? 新的图的表示 双向图与投影图（仔细看线条） 自环的增加的degree为1 接邻矩阵表示连接性 ","date":"2025-01-26","objectID":"/l1-intro/:0:2","tags":null,"title":"L1-Intro","uri":"/l1-intro/"},{"categories":["UCB-CS61C"],"content":"Lecture 16: Combinational Logic ","date":"2025-01-23","objectID":"/lec16-cl/:0:0","tags":null,"title":"Lec16-CL","uri":"/lec16-cl/"},{"categories":["UCB-CS61C"],"content":"Lecture 15: State and State Machines https://www.learncs.site/resource/cs61c/lectures/lec15.pdf ","date":"2025-01-22","objectID":"/lec15-state-and-state-machines/:0:0","tags":null,"title":"Lec15-State and State Machines","uri":"/lec15-state-and-state-machines/"},{"categories":["UCB-CS61C"],"content":"Flip-flops? details of registers! n位寄存器，n个并行的1位触发器 ","date":"2025-01-22","objectID":"/lec15-state-and-state-machines/:1:0","tags":null,"title":"Lec15-State and State Machines","uri":"/lec15-state-and-state-machines/"},{"categories":["UCB-CS61C"],"content":"timing of flip-flops clk to q 越小越好 ","date":"2025-01-22","objectID":"/lec15-state-and-state-machines/:1:1","tags":null,"title":"Lec15-State and State Machines","uri":"/lec15-state-and-state-machines/"},{"categories":["UCB-CS61C"],"content":"Accumulators revisited 如果超频… ","date":"2025-01-22","objectID":"/lec15-state-and-state-machines/:2:0","tags":null,"title":"Lec15-State and State Machines","uri":"/lec15-state-and-state-machines/"},{"categories":["UCB-CS61C"],"content":"pipelines and pipelining ","date":"2025-01-22","objectID":"/lec15-state-and-state-machines/:3:0","tags":null,"title":"Lec15-State and State Machines","uri":"/lec15-state-and-state-machines/"},{"categories":["UCB-CS61C"],"content":"max clock frequency 简单总结 感觉数电知识更多一点？ 减少延时 ","date":"2025-01-22","objectID":"/lec15-state-and-state-machines/:3:1","tags":null,"title":"Lec15-State and State Machines","uri":"/lec15-state-and-state-machines/"},{"categories":["UCB-CS61C"],"content":"Finite State Machines 一个例子 等价翻译 ","date":"2025-01-22","objectID":"/lec15-state-and-state-machines/:4:0","tags":null,"title":"Lec15-State and State Machines","uri":"/lec15-state-and-state-machines/"},{"categories":["UCB-CS61C"],"content":"Lecture 14: Intro to Synchronous Digital Systems ","date":"2025-01-22","objectID":"/lec14-intro-to-synchronous-digital-systems/:0:0","tags":null,"title":"Lec14-Intro to Synchronous Digital Systems","uri":"/lec14-intro-to-synchronous-digital-systems/"},{"categories":["UCB-CS61C"],"content":"MOS Transistors normal n-channel gate G is low, open. ","date":"2025-01-22","objectID":"/lec14-intro-to-synchronous-digital-systems/:1:0","tags":null,"title":"Lec14-Intro to Synchronous Digital Systems","uri":"/lec14-intro-to-synchronous-digital-systems/"},{"categories":["UCB-CS61C"],"content":"NAND Gates 与非门 ","date":"2025-01-22","objectID":"/lec14-intro-to-synchronous-digital-systems/:2:0","tags":null,"title":"Lec14-Intro to Synchronous Digital Systems","uri":"/lec14-intro-to-synchronous-digital-systems/"},{"categories":["UCB-CS61C"],"content":"电路存储与构成 组合逻辑电路 有状态元件 like 寄存器 ","date":"2025-01-22","objectID":"/lec14-intro-to-synchronous-digital-systems/:3:0","tags":null,"title":"Lec14-Intro to Synchronous Digital Systems","uri":"/lec14-intro-to-synchronous-digital-systems/"},{"categories":["UMich-EECS-498"],"content":"Visualizing and Understanding ","date":"2024-11-06","objectID":"/l14-visualizing-and-understanding/:0:0","tags":null,"title":"L14-Visualizing and Understanding","uri":"/l14-visualizing-and-understanding/"},{"categories":["UMich-EECS-498"],"content":"Visualizing 对第一层、第二层以及最后进入FC层的特征图进行可视化 PCA√ t-SNE√ 非线性降维 最大激活 ","date":"2024-11-06","objectID":"/l14-visualizing-and-understanding/:1:0","tags":null,"title":"L14-Visualizing and Understanding","uri":"/l14-visualizing-and-understanding/"},{"categories":["UMich-EECS-498"],"content":"Understanding 细节 ","date":"2024-11-06","objectID":"/l14-visualizing-and-understanding/:2:0","tags":null,"title":"L14-Visualizing and Understanding","uri":"/l14-visualizing-and-understanding/"},{"categories":["UMich-EECS-498"],"content":"Training I ","date":"2024-11-04","objectID":"/l10-training-i/:0:0","tags":null,"title":"L10-Training I","uri":"/l10-training-i/"},{"categories":["UMich-EECS-498"],"content":"Activation Functions Sigmoid function: $\\sigma(x) = \\frac{1}{1 + e^{-x}}$ 不是0中心 两端饱和 always all positive or negative :( exp() 计算复杂，但是对于GPU不是问题 tanh function: $\\tanh(x) = \\frac{e^x - e^{-x}}{e^x + e^{-x}}$ sigmoid变体 ReLU function: $f(x) = max(0, x)$ 不会饱和 计算快 非0中心 dead relu ==\u003e leaky relu Leaky ReLU function: $f(x) = max(0.01x, x)$ 解决了dead relu问题 ==\u003e PRelu function：把0.01改成可学习的参数 ELU function: $f(x) = \\begin{cases} x \u0026 x \\geq 0 \\ \\alpha(e^x - 1) \u0026 x \u003c 0 \\end{cases}$ ","date":"2024-11-04","objectID":"/l10-training-i/:1:0","tags":null,"title":"L10-Training I","uri":"/l10-training-i/"},{"categories":["UMich-EECS-498"],"content":"Data Preprocessing 参见DATA-100相关课程 敏感性问题 ","date":"2024-11-04","objectID":"/l10-training-i/:2:0","tags":null,"title":"L10-Training I","uri":"/l10-training-i/"},{"categories":["UMich-EECS-498"],"content":"Weight Initialization 参考cmu 10414课程notes HW3左右部分 or MSRA （MicroSoft Research Asia） ","date":"2024-11-04","objectID":"/l10-training-i/:3:0","tags":null,"title":"L10-Training I","uri":"/l10-training-i/"},{"categories":["UMich-EECS-498"],"content":"Regularization L1/L2 regularization略，DATA-100相关课程 ","date":"2024-11-04","objectID":"/l10-training-i/:4:0","tags":null,"title":"L10-Training I","uri":"/l10-training-i/"},{"categories":["UMich-EECS-498"],"content":"Dropout NNDL的观点也有讲到 随机性 子模型叠加 Test Time激活所有的神经元，用一个缩放因子 $p$ 处理，或者inverting dropout mask BN和dropout看起来似乎一样 ","date":"2024-11-04","objectID":"/l10-training-i/:4:1","tags":null,"title":"L10-Training I","uri":"/l10-training-i/"},{"categories":["UMich-EECS-498"],"content":"Augmentation import torchvision.transforms as transforms transform_train = transforms.Compose([ transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)), ]) 以及其他的一些数据增强方法，来自ECCV ICLR等 ","date":"2024-11-04","objectID":"/l10-training-i/:5:0","tags":null,"title":"L10-Training I","uri":"/l10-training-i/"},{"categories":["UMich-EECS-498"],"content":"Hard and Soft ware ","date":"2024-11-02","objectID":"/l9-hard-and-software/:0:0","tags":null,"title":"L9-Hard and Software","uri":"/l9-hard-and-software/"},{"categories":["UMich-EECS-498"],"content":"Hardware eecs 598.009 GPU programming! 其实我很想了解一下cuda编程 tensorflow支持TPU，pytorch呢？ 计算图存储在GPU内存里面 ","date":"2024-11-02","objectID":"/l9-hard-and-software/:1:0","tags":null,"title":"L9-Hard and Software","uri":"/l9-hard-and-software/"},{"categories":["UMich-EECS-498"],"content":"Software the point of deep learning frameworks allow rapid prototyping automatically compute gradients run it all efficiently on GPUs or else ","date":"2024-11-02","objectID":"/l9-hard-and-software/:2:0","tags":null,"title":"L9-Hard and Software","uri":"/l9-hard-and-software/"},{"categories":["UMich-EECS-498"],"content":"PyTorch sigmoid0减少计算图节点的设计，因为反向传播重写了 class Sigmoid(torch.autograd.Function): @staticmethod def forward(ctx, input): y = 1 / (1 + torch.exp(-input)) ctx.save_for_backward(input) return y @staticmethod def backward(ctx, grad_output): input, = ctx.saved_tensors grad_input = grad_output * (1 - y) * y return grad_input def sigmoid(x): return Sigmoid.apply(x) 动态计算图 loss.backward() 之后计算图被丢弃？ 下一次计算的时候重新构建？ 非动态计算图JIT，优化，序列化 def model(x): return x * x graph = torch.jit.script(model, torch.rand(1, 1)) ","date":"2024-11-02","objectID":"/l9-hard-and-software/:2:1","tags":null,"title":"L9-Hard and Software","uri":"/l9-hard-and-software/"},{"categories":["UMich-EECS-498"],"content":"TensorFlow 1.0静态 2.0动态 TensorBroad ","date":"2024-11-02","objectID":"/l9-hard-and-software/:2:2","tags":null,"title":"L9-Hard and Software","uri":"/l9-hard-and-software/"},{"categories":["UMich-EECS-498"],"content":"CNN Architectures 今日首绷 ","date":"2024-11-02","objectID":"/l8-cnn-arch/:0:0","tags":null,"title":"L8-CNN Arch","uri":"/l8-cnn-arch/"},{"categories":["UMich-EECS-498"],"content":"计算题 4 bytes per elem 右边三列体现了一个规律 2013的ImageNet winner仍然是AlexNet变体(ZFNet, ECCV)，只是trial and error的结果 2014的ImageNet winner是VGGNet ICLR，提出了规则化 3x3卷积核? 两个3x3卷积核 比 一个5x5卷积核 Params和FLOPs更少，但是感受野一样，并且可以插入更多的relu channel翻倍，每次卷积计算cost same amount of floating points computation 2014的ImageNet有GoogLeNet CVPR: 初期快速下采样 Inception模块: 1x1, 3x3, 5x5卷积核(使得kernel size不再是一个超参数) 1x1适配器的引入 resnet雏形 Global Average Pooling: 替换掉一层fcnn 其次还有auxiliary classifier取中间层输出，作为loss加入到loss function中 2015年首先是BN被发现了，auxiliary classifier被弃用 接着ResNet CVPR: 引入残差结构，提升准确率 引入bottleneck结构，层数增加，但是flops减少 ECCV有一篇进一步讨论了残差块的结构 CVPR2017有一篇文章提出了ResNeXt torch.nn.Conv2d(groups=) # groups参数控制了分组卷积的数量 2017年的ImageNet结束 DenseNet: fancier 趋势 MobileNet: 轻量化趋势 ICLR 2017自动化设计神经网络结构 Neural Architecture Search ","date":"2024-11-02","objectID":"/l8-cnn-arch/:1:0","tags":null,"title":"L8-CNN Arch","uri":"/l8-cnn-arch/"},{"categories":["UMich-EECS-498"],"content":"Convolutional Neural Networks ","date":"2024-10-29","objectID":"/l7-cnn/:0:0","tags":null,"title":"L7-CNN","uri":"/l7-cnn/"},{"categories":["UMich-EECS-498"],"content":"Components of a CNN Convolutional layers Pooling layers Normalization layers ","date":"2024-10-29","objectID":"/l7-cnn/:1:0","tags":null,"title":"L7-CNN","uri":"/l7-cnn/"},{"categories":["UMich-EECS-498"],"content":"Convolutional Layers 注意到一个通道的卷积核也是全通道数 3 x5x5 偏置是一个向量 (b, c, h, w)表示batch size, channel, height, width! 注意四个维度的意义 卷积本质上也是一种linear layer，所以要relu等 高维全局，低维局部 ","date":"2024-10-29","objectID":"/l7-cnn/:2:0","tags":null,"title":"L7-CNN","uri":"/l7-cnn/"},{"categories":["UMich-EECS-498"],"content":"1x1 Convolutions 一种适配器，调整通道数 ","date":"2024-10-29","objectID":"/l7-cnn/:2:1","tags":null,"title":"L7-CNN","uri":"/l7-cnn/"},{"categories":["UMich-EECS-498"],"content":"other types of convolutions ","date":"2024-10-29","objectID":"/l7-cnn/:2:2","tags":null,"title":"L7-CNN","uri":"/l7-cnn/"},{"categories":["UMich-EECS-498"],"content":"PyTorch Implementation ","date":"2024-10-29","objectID":"/l7-cnn/:2:3","tags":null,"title":"L7-CNN","uri":"/l7-cnn/"},{"categories":["UMich-EECS-498"],"content":"Pooling Layers another way to downsample data, no learnable parameters 局部最大值微小移动不变性 ","date":"2024-10-29","objectID":"/l7-cnn/:3:0","tags":null,"title":"L7-CNN","uri":"/l7-cnn/"},{"categories":["UMich-EECS-498"],"content":"Normalization Layers 主要讨论的是batch normalization 层与层之间数据分布更加稳定 此时 model.eval() 此时bn可以作为线形层被fuse进入fcnn or conv layer norm也有，主要是rnn和transformer用到了 ","date":"2024-10-29","objectID":"/l7-cnn/:4:0","tags":null,"title":"L7-CNN","uri":"/l7-cnn/"},{"categories":["UMich-EECS-498"],"content":"Example: LeNet-5 ","date":"2024-10-29","objectID":"/l7-cnn/:5:0","tags":null,"title":"L7-CNN","uri":"/l7-cnn/"},{"categories":["UMich-EECS-498"],"content":"Backpropagation 参见cmu 10-414 😀 ","date":"2024-10-24","objectID":"/l6-bp/:0:0","tags":null,"title":"L6-BP","uri":"/l6-bp/"},{"categories":["UMich-EECS-498"],"content":"RNN 初见 ","date":"2024-10-24","objectID":"/l6-bp/:1:0","tags":null,"title":"L6-BP","uri":"/l6-bp/"},{"categories":["UMich-EECS-498"],"content":"Computation Graph 😏 A2要hardcode直接的反向传播了 555 真正的代码 😋 class Multiply(torch.autograd.Function): @staticmethod def forward(ctx, x, y): ctx.save_for_backward(x, y) return x * y @staticmethod def backward(ctx, grad_output): x, y = ctx.saved_tensors return grad_output * y, grad_output * x # 解析计算 PyTorch operators in deep engine 🤔 ","date":"2024-10-24","objectID":"/l6-bp/:2:0","tags":null,"title":"L6-BP","uri":"/l6-bp/"},{"categories":["UMich-EECS-498"],"content":"BP rules ","date":"2024-10-24","objectID":"/l6-bp/:3:0","tags":null,"title":"L6-BP","uri":"/l6-bp/"},{"categories":["UMich-EECS-498"],"content":"BP with vector-valued functions 假装标量求导，然后匹配矩阵形状即可（典中典） ","date":"2024-10-24","objectID":"/l6-bp/:3:1","tags":null,"title":"L6-BP","uri":"/l6-bp/"},{"categories":["UMich-EECS-498"],"content":"element-wise functions in BP 不用使用矩阵求导，直接一一对应去想梯度的传递即可 此时雅各比矩阵十分稀疏（低效），不直接显式计算，而是通过shape / mask隐式来做 ","date":"2024-10-24","objectID":"/l6-bp/:3:2","tags":null,"title":"L6-BP","uri":"/l6-bp/"},{"categories":["UMich-EECS-498"],"content":"matrix(or tensor)-valued functions in BP a possible strategy 元素层面来看（这个思路比较简单，但效率不高） 科学计算AD ","date":"2024-10-24","objectID":"/l6-bp/:3:3","tags":null,"title":"L6-BP","uri":"/l6-bp/"},{"categories":["UMich-EECS-498"],"content":"BP for Higher Order Derivatives PyTorch真正的实现，并非直接反向 ","date":"2024-10-24","objectID":"/l6-bp/:4:0","tags":null,"title":"L6-BP","uri":"/l6-bp/"},{"categories":["UMich-EECS-498"],"content":"Neural Networks ","date":"2024-10-24","objectID":"/l5-nn/:0:0","tags":null,"title":"L5-NN","uri":"/l5-nn/"},{"categories":["UMich-EECS-498"],"content":"线性不可分怎么处理？ 怎么encode不同的信息？ 王朝落幕 ","date":"2024-10-24","objectID":"/l5-nn/:1:0","tags":null,"title":"L5-NN","uri":"/l5-nn/"},{"categories":["UMich-EECS-498"],"content":"Neural Networks Architecture data -\u003e input layer -\u003e hidden layer -\u003e output layer data driven, non-linear 😋 😄 ? ","date":"2024-10-24","objectID":"/l5-nn/:2:0","tags":null,"title":"L5-NN","uri":"/l5-nn/"},{"categories":["UMich-EECS-498"],"content":"ReLU, 通用近似定理 详细证明看一看官方给出的课本 ","date":"2024-10-24","objectID":"/l5-nn/:3:0","tags":null,"title":"L5-NN","uri":"/l5-nn/"},{"categories":["UMich-EECS-498"],"content":"凸优化 牢NN当然是进行非凸优化 😀 ","date":"2024-10-24","objectID":"/l5-nn/:4:0","tags":null,"title":"L5-NN","uri":"/l5-nn/"},{"categories":["UMich-EECS-498"],"content":"Optimization ","date":"2024-10-24","objectID":"/l4-optimization/:0:0","tags":null,"title":"L4-Optimization","uri":"/l4-optimization/"},{"categories":["UMich-EECS-498"],"content":"grad check 解析计算后数值计算梯度验证之 import torch torch.autograd.gradcheck(func, inputs, eps=1e-6, atol=1e-4, raise_exception=True) torch.autograd.gradgradcheck(func, inputs, grad_outputs=None, eps=1e-6, atol=1e-4, raise_exception=True) # numpy allclose np.allclose(a, b, rtol=1e-5, atol=1e-8) ","date":"2024-10-24","objectID":"/l4-optimization/:1:0","tags":null,"title":"L4-Optimization","uri":"/l4-optimization/"},{"categories":["UMich-EECS-498"],"content":"梯度下降法 略 ","date":"2024-10-24","objectID":"/l4-optimization/:2:0","tags":null,"title":"L4-Optimization","uri":"/l4-optimization/"},{"categories":["UMich-EECS-498"],"content":"蒙特卡洛 把期望转化为数值求解，上图的等式两边求导也可，从而得到梯度 ","date":"2024-10-24","objectID":"/l4-optimization/:3:0","tags":null,"title":"L4-Optimization","uri":"/l4-optimization/"},{"categories":["UMich-EECS-498"],"content":"混合优化方法 Adam = RMSprop + Momentum 😮 为什么只是一阶函数优化？ ","date":"2024-10-24","objectID":"/l4-optimization/:4:0","tags":null,"title":"L4-Optimization","uri":"/l4-optimization/"},{"categories":["UCB-CS61A"],"content":"Final Project: The Game of Life ? about the title: well, umm, this title just pop up in the cursor and I don’t mean to write that… it just feels like a good idea to write something about the game of life ==\u003e 61B or 61C must have a project on this topic 🤔 ","date":"2024-10-23","objectID":"/lec37-final/:0:0","tags":null,"title":"Lec37-Final","uri":"/lec37-final/"},{"categories":["UCB-CS61A"],"content":"Trees ","date":"2024-10-23","objectID":"/lec37-final/:1:0","tags":null,"title":"Lec37-Final","uri":"/lec37-final/"},{"categories":["UCB-CS61A"],"content":"Processing def里面def的风格感觉是CS106里面提到的递归helper function的风格 😮 ","date":"2024-10-23","objectID":"/lec37-final/:1:1","tags":null,"title":"Lec37-Final","uri":"/lec37-final/"},{"categories":["UCB-CS61A"],"content":"Recursive Accumulation using static variables to accumulate the results of recursive calls 😮 ","date":"2024-10-23","objectID":"/lec37-final/:2:0","tags":null,"title":"Lec37-Final","uri":"/lec37-final/"},{"categories":["UCB-CS61A"],"content":"how to design a Function? example driven 🎉 summer went away, stillness stayed 🎉 ","date":"2024-10-23","objectID":"/lec37-final/:3:0","tags":null,"title":"Lec37-Final","uri":"/lec37-final/"},{"categories":["UCB-CS61A"],"content":"Databases ","date":"2024-10-23","objectID":"/lec36-databases/:0:0","tags":null,"title":"Lec36-Databases","uri":"/lec36-databases/"},{"categories":["UCB-CS61A"],"content":"method of tables ","date":"2024-10-23","objectID":"/lec36-databases/:1:0","tags":null,"title":"Lec36-Databases","uri":"/lec36-databases/"},{"categories":["UCB-CS61A"],"content":"create and drop tables 🤓 create table numbers (n, note); create table numbers (n UNIQUE, note DEFAULT 'unknown'); drop table if exists t; ","date":"2024-10-23","objectID":"/lec36-databases/:1:1","tags":null,"title":"Lec36-Databases","uri":"/lec36-databases/"},{"categories":["UCB-CS61A"],"content":"insert data into tables insert into t values (1, 'one'); insert into t(col1) values (2); ","date":"2024-10-23","objectID":"/lec36-databases/:1:2","tags":null,"title":"Lec36-Databases","uri":"/lec36-databases/"},{"categories":["UCB-CS61A"],"content":"update update t set col1 = 3 where col2 = 'two'; ","date":"2024-10-23","objectID":"/lec36-databases/:1:3","tags":null,"title":"Lec36-Databases","uri":"/lec36-databases/"},{"categories":["UCB-CS61A"],"content":"delete delete from t where col1 = 1; ","date":"2024-10-23","objectID":"/lec36-databases/:1:4","tags":null,"title":"Lec36-Databases","uri":"/lec36-databases/"},{"categories":["UCB-CS61A"],"content":"Python and SQL import sqlite3 # connect to the database conn = sqlite3.connect('mydatabase.db') conn.execute('''CREATE TABLE IF NOT EXISTS mytable (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)''') conn.execute(\"INSERT INTO mytable (name, age) VALUES ('Alice', 25)\") # a cursor object is used conn.commit() # save changes into db file ","date":"2024-10-23","objectID":"/lec36-databases/:2:0","tags":null,"title":"Lec36-Databases","uri":"/lec36-databases/"},{"categories":["UCB-CS61A"],"content":"database connection 一个db可以被多个程序连接操作 😋 ","date":"2024-10-23","objectID":"/lec36-databases/:3:0","tags":null,"title":"Lec36-Databases","uri":"/lec36-databases/"},{"categories":["UCB-CS61A"],"content":"Aggregation see here ","date":"2024-10-23","objectID":"/lec35-agg/:0:0","tags":null,"title":"Lec35-Agg","uri":"/lec35-agg/"},{"categories":["UCB-CS61A"],"content":"Tables ","date":"2024-10-23","objectID":"/lec34-tables/:0:0","tags":null,"title":"Lec34-Tables","uri":"/lec34-tables/"},{"categories":["UCB-CS61A"],"content":"Joining Tables 见CS186 重点从eval / SICP 角度看语句是如何被eval的 ","date":"2024-10-23","objectID":"/lec34-tables/:1:0","tags":null,"title":"Lec34-Tables","uri":"/lec34-tables/"},{"categories":["UCB-CS61A"],"content":"Strings methods ","date":"2024-10-23","objectID":"/lec34-tables/:2:0","tags":null,"title":"Lec34-Tables","uri":"/lec34-tables/"},{"categories":["UCB-CS61A"],"content":"SQL DATA100 / CS186先导课名副其实 😏 ","date":"2024-10-23","objectID":"/lec33-sql/:0:0","tags":null,"title":"Lec33-SQL","uri":"/lec33-sql/"},{"categories":["UCB-CS61A"],"content":"create 不说了见186第一节课第二节课 ","date":"2024-10-23","objectID":"/lec33-sql/:1:0","tags":null,"title":"Lec33-SQL","uri":"/lec33-sql/"},{"categories":["UCB-CS61A"],"content":"overview ","date":"2024-10-23","objectID":"/lec33-sql/:2:0","tags":null,"title":"Lec33-SQL","uri":"/lec33-sql/"},{"categories":["UCB-CS61A"],"content":"select select ... union select ... union select ... union ","date":"2024-10-23","objectID":"/lec33-sql/:3:0","tags":null,"title":"Lec33-SQL","uri":"/lec33-sql/"},{"categories":["UCB-CS61A"],"content":"Macros ","date":"2024-10-23","objectID":"/lec32-macros/:0:0","tags":null,"title":"Lec32-Macros","uri":"/lec32-macros/"},{"categories":["UCB-CS61A"],"content":"quote or unquote 在于怎么eval 🤔 , 后面的 (some_expression) 不会被quote ","date":"2024-10-23","objectID":"/lec32-macros/:1:0","tags":null,"title":"Lec32-Macros","uri":"/lec32-macros/"},{"categories":["UCB-CS61A"],"content":"Macros in Scheme define new special form in scheme… define-macro 定义一个新的宏，接收一个 \u003cexpression\u003e 作为参数，返回一个新的\u003cexpression\u003e 并且eval之, 先不对参数eval 注意和define的区别，define在意的是传进来的 value another example, to show info of your expression using macro (define-macro (check expr) (list 'if expr ''pass (list 'quote (list 'failed: expr)))) ","date":"2024-10-23","objectID":"/lec32-macros/:2:0","tags":null,"title":"Lec32-Macros","uri":"/lec32-macros/"},{"categories":["UCB-CS61A"],"content":"For Macro in Scheme (define (map fn vals) (if (null? vals) () (cons (fn (car vals)) (map fn (cdr vals))))) \u003e (map (lambda (x) (* x x)) '(2 3 4 5)) ; without using macro case (4 9 16 25) (define-macro (for sym vals expr) (list 'map lambda (sym) (expr) (vals)) ;? wrong! (list 'map (list 'lambda (list sym) expr) vals)) ","date":"2024-10-23","objectID":"/lec32-macros/:3:0","tags":null,"title":"Lec32-Macros","uri":"/lec32-macros/"},{"categories":["UCB-CS61A"],"content":"Trace def trace(fn): def traced(n): print(f\"Calling {fn.__name__} with {n}\") return fn(n) # n is fn's argument! return traced @trace def fact(n): if n == 0: return 1 else: return n * fact(n-1) print(fact(5)) scheme example, without using macro with using macro ","date":"2024-10-23","objectID":"/lec32-macros/:4:0","tags":null,"title":"Lec32-Macros","uri":"/lec32-macros/"},{"categories":["UCB-CS61A"],"content":"Interpreters ","date":"2024-10-22","objectID":"/lec29-interpreters/:0:0","tags":null,"title":"Lec29-Interpreters","uri":"/lec29-interpreters/"},{"categories":["UCB-CS61A"],"content":"Special Forms ","date":"2024-10-22","objectID":"/lec29-interpreters/:1:0","tags":null,"title":"Lec29-Interpreters","uri":"/lec29-interpreters/"},{"categories":["UCB-CS61A"],"content":"Quotation ","date":"2024-10-22","objectID":"/lec29-interpreters/:2:0","tags":null,"title":"Lec29-Interpreters","uri":"/lec29-interpreters/"},{"categories":["UCB-CS61A"],"content":"Logical Forms ","date":"2024-10-22","objectID":"/lec29-interpreters/:3:0","tags":null,"title":"Lec29-Interpreters","uri":"/lec29-interpreters/"},{"categories":["UCB-CS61A"],"content":"Lambda Expressions (lambda (x) (+ x 1)) ","date":"2024-10-22","objectID":"/lec29-interpreters/:4:0","tags":null,"title":"Lec29-Interpreters","uri":"/lec29-interpreters/"},{"categories":["UCB-CS61A"],"content":"Frame and Environment ","date":"2024-10-22","objectID":"/lec29-interpreters/:5:0","tags":null,"title":"Lec29-Interpreters","uri":"/lec29-interpreters/"},{"categories":["UCB-CS61A"],"content":"Dynamic Scope who calls you can provide the value you need rather than static scope… ","date":"2024-10-22","objectID":"/lec29-interpreters/:6:0","tags":null,"title":"Lec29-Interpreters","uri":"/lec29-interpreters/"},{"categories":["UCB-CS61A"],"content":"Interpreting Scheme Code 核心在此 ","date":"2024-10-22","objectID":"/lec29-interpreters/:7:0","tags":null,"title":"Lec29-Interpreters","uri":"/lec29-interpreters/"},{"categories":["UCB-CS61A"],"content":"Define Expressions ","date":"2024-10-22","objectID":"/lec29-interpreters/:8:0","tags":null,"title":"Lec29-Interpreters","uri":"/lec29-interpreters/"},{"categories":["UCB-CS61A"],"content":"Tail Calls ","date":"2024-10-22","objectID":"/lec30-tail-calls/:0:0","tags":null,"title":"Lec30-Tail Calls","uri":"/lec30-tail-calls/"},{"categories":["UCB-CS61A"],"content":"Functional Programming ","date":"2024-10-22","objectID":"/lec30-tail-calls/:1:0","tags":null,"title":"Lec30-Tail Calls","uri":"/lec30-tail-calls/"},{"categories":["UCB-CS61A"],"content":"Tail Call 相同时间复杂度，对空间复杂度的限制，常量空间运行 get the len of a list ","date":"2024-10-22","objectID":"/lec30-tail-calls/:2:0","tags":null,"title":"Lec30-Tail Calls","uri":"/lec30-tail-calls/"},{"categories":["UCB-CS61A"],"content":"Map and Reduce ","date":"2024-10-22","objectID":"/lec30-tail-calls/:3:0","tags":null,"title":"Lec30-Tail Calls","uri":"/lec30-tail-calls/"},{"categories":["UCB-CS61A"],"content":"Reduce eg (reduce * '(3 4 5) 2) ; 120 ","date":"2024-10-22","objectID":"/lec30-tail-calls/:3:1","tags":null,"title":"Lec30-Tail Calls","uri":"/lec30-tail-calls/"},{"categories":["UCB-CS61A"],"content":"Map Map with only a constant numbers of Frames ","date":"2024-10-22","objectID":"/lec30-tail-calls/:3:2","tags":null,"title":"Lec30-Tail Calls","uri":"/lec30-tail-calls/"},{"categories":["UCB-CS61A"],"content":"General Computing Machine 😮 ","date":"2024-10-22","objectID":"/lec30-tail-calls/:4:0","tags":null,"title":"Lec30-Tail Calls","uri":"/lec30-tail-calls/"},{"categories":["UCB-CS61A"],"content":"Programs as Data ","date":"2024-10-22","objectID":"/lec31-programs-as-data/:0:0","tags":null,"title":"Lec31-Programs as Data","uri":"/lec31-programs-as-data/"},{"categories":["UCB-CS61A"],"content":"eval 在字符串上面eval ","date":"2024-10-22","objectID":"/lec31-programs-as-data/:1:0","tags":null,"title":"Lec31-Programs as Data","uri":"/lec31-programs-as-data/"},{"categories":["UCB-CS61A"],"content":"Generating Code Quasiquotes while statements in Scheme…how to generate generic code ","date":"2024-10-22","objectID":"/lec31-programs-as-data/:2:0","tags":null,"title":"Lec31-Programs as Data","uri":"/lec31-programs-as-data/"},{"categories":["UCB-CS61A"],"content":"Calculator ","date":"2024-10-21","objectID":"/lec28-calculator/:0:0","tags":null,"title":"Lec28-Calculator","uri":"/lec28-calculator/"},{"categories":["UCB-CS61A"],"content":"Exception raise Exception(\"Invalid input\") try: # code that may raise an exception except Exception as e: print(e) 见java try-catch 😏 float('inf') # positive infinity float('-inf') # negative infinity ","date":"2024-10-21","objectID":"/lec28-calculator/:1:0","tags":null,"title":"Lec28-Calculator","uri":"/lec28-calculator/"},{"categories":["UCB-CS61A"],"content":"Programming Languages Programs are trees… and the way interpreters work is through a tree recursion. ","date":"2024-10-21","objectID":"/lec28-calculator/:2:0","tags":null,"title":"Lec28-Calculator","uri":"/lec28-calculator/"},{"categories":["UCB-CS61A"],"content":"Parsing 把文本转化为抽象语法树（Abstract Syntax Tree，AST） base case: only symbols and numbers recursive case: expressions and statements ","date":"2024-10-21","objectID":"/lec28-calculator/:3:0","tags":null,"title":"Lec28-Calculator","uri":"/lec28-calculator/"},{"categories":["UCB-CS61A"],"content":"Scheme-Syntax Calculator using Python Pair to describe pairs of expressions and statements ","date":"2024-10-21","objectID":"/lec28-calculator/:4:0","tags":null,"title":"Lec28-Calculator","uri":"/lec28-calculator/"},{"categories":["UCB-CS61A"],"content":"the eval function def calc_apply(op, args): \"\"\" args: Iterable \"\"\" if op == '+': ... elif op == '-': ... elif op == '*': ... elif op == '/': ... else: raise Exception(\"Invalid operator\") ","date":"2024-10-21","objectID":"/lec28-calculator/:4:1","tags":null,"title":"Lec28-Calculator","uri":"/lec28-calculator/"},{"categories":["UCB-CS61A"],"content":"interactive cli Read-Eval-Print-Loop (REPL) 😮 ","date":"2024-10-21","objectID":"/lec28-calculator/:4:2","tags":null,"title":"Lec28-Calculator","uri":"/lec28-calculator/"},{"categories":["UCB-CS61A"],"content":"raise exception ","date":"2024-10-21","objectID":"/lec28-calculator/:4:3","tags":null,"title":"Lec28-Calculator","uri":"/lec28-calculator/"},{"categories":["UCB-CS61A"],"content":"Scheme Lists ","date":"2024-10-21","objectID":"/lec27-scheme-lists/:0:0","tags":null,"title":"Lec27-Scheme Lists","uri":"/lec27-scheme-lists/"},{"categories":["UCB-CS61A"],"content":"cons / car / cdr / nil (null? nil) ; #t (null? (cons 1 nil)) ; #f (car (cons 1 2)) ; 1 (list 1 2 3) ; (1 2 3) ","date":"2024-10-21","objectID":"/lec27-scheme-lists/:1:0","tags":null,"title":"Lec27-Scheme Lists","uri":"/lec27-scheme-lists/"},{"categories":["UCB-CS61A"],"content":"Symbolic Programming Lisp is a symbolic programming language, which uses in AI for a long time…? 注意单引号 (car (cdr (car (cdr '(1 (2 3) 4))))) ; 3 ","date":"2024-10-21","objectID":"/lec27-scheme-lists/:2:0","tags":null,"title":"Lec27-Scheme Lists","uri":"/lec27-scheme-lists/"},{"categories":["UCB-CS61A"],"content":"List Processing 纯看scheme属实有点抽象了 helper function 化简之 进一步化简 语法稍微了解一些，似乎interpreter才是重点 🤔 ","date":"2024-10-21","objectID":"/lec27-scheme-lists/:3:0","tags":null,"title":"Lec27-Scheme Lists","uri":"/lec27-scheme-lists/"},{"categories":["UCB-CS61A"],"content":"Efficiency ","date":"2024-10-21","objectID":"/lec23-eifficiency/:0:0","tags":null,"title":"Lec23-Eifficiency","uri":"/lec23-eifficiency/"},{"categories":["UCB-CS61A"],"content":"Memorization Idea: Memorize a large set of information and use it to quickly recall it. ","date":"2024-10-21","objectID":"/lec23-eifficiency/:1:0","tags":null,"title":"Lec23-Eifficiency","uri":"/lec23-eifficiency/"},{"categories":["UCB-CS61A"],"content":"fib def memo(f): cache = {} def memoized(n): if n not in cache: cache[n] = f(n) return cache[n] return memoized ","date":"2024-10-21","objectID":"/lec23-eifficiency/:2:0","tags":null,"title":"Lec23-Eifficiency","uri":"/lec23-eifficiency/"},{"categories":["UCB-CS61A"],"content":"Exponentiation 前者 O(N) ，后者 O(logN) ","date":"2024-10-21","objectID":"/lec23-eifficiency/:3:0","tags":null,"title":"Lec23-Eifficiency","uri":"/lec23-eifficiency/"},{"categories":["UCB-CS61A"],"content":"省流 CS61B前瞻，对时间复杂度和空间复杂度初步探索 ","date":"2024-10-21","objectID":"/lec23-eifficiency/:4:0","tags":null,"title":"Lec23-Eifficiency","uri":"/lec23-eifficiency/"},{"categories":["UCB-CS61A"],"content":"Decomposition ","date":"2024-10-21","objectID":"/lec24-decomposition/:0:0","tags":null,"title":"Lec24-Decomposition","uri":"/lec24-decomposition/"},{"categories":["UCB-CS61A"],"content":"Modular Design dddd ","date":"2024-10-21","objectID":"/lec24-decomposition/:1:0","tags":null,"title":"Lec24-Decomposition","uri":"/lec24-decomposition/"},{"categories":["UCB-CS61A"],"content":"有趣的语法 ... # 用于省略代码 import json for i in open('data.json'): data = json.loads(i) # 处理数据... ","date":"2024-10-21","objectID":"/lec24-decomposition/:2:0","tags":null,"title":"Lec24-Decomposition","uri":"/lec24-decomposition/"},{"categories":["UCB-CS61A"],"content":"Data Examples ","date":"2024-10-21","objectID":"/lec25-data-examples/:0:0","tags":null,"title":"Lec25-Data Examples","uri":"/lec25-data-examples/"},{"categories":["UCB-CS61A"],"content":"Lists in Environment Diagrams 注意：切片 or addition 是引用，而不是复制，有时候可能不经意改变 \u003e\u003e\u003e t = [1,2,3] \u003e\u003e\u003e t[1:3] = [t] \u003e\u003e\u003e t.extend(t) \u003e\u003e\u003e print(t) [1, [...], 1, [...]] 在Python中，当你尝试打印一个包含自身的列表时，列表无法递归地打印出所有的元素，因为它会无限循环地引用自己。为了避免这种无限循环，Python会用[…]来表示列表中被省略的部分。 ","date":"2024-10-21","objectID":"/lec25-data-examples/:1:0","tags":null,"title":"Lec25-Data Examples","uri":"/lec25-data-examples/"},{"categories":["UCB-CS61A"],"content":"Obj Systems in Python return a string -\u003e 'str', print a string -\u003e str .some_attr: can create a new attribute for the instance at once, or get the value of an existing attribute ","date":"2024-10-21","objectID":"/lec25-data-examples/:2:0","tags":null,"title":"Lec25-Data Examples","uri":"/lec25-data-examples/"},{"categories":["UCB-CS61A"],"content":"Iterators and Iterables in Python training test def digit_dict(s): \"\"\" \u003e\u003e\u003e digit_dict([5, 2, 13]) {2: [2], 3: [13], 5: [5]} \"\"\" last_digit = [x % 10 for x in s] return {d: [x for x in s if x % 10 == d] for d in range(10) if d in last_digit} .count() method: \u003cbuilt-in method count of list object at 0x000001\u003e [1 for x in range(10) if ...] 计数 ","date":"2024-10-21","objectID":"/lec25-data-examples/:3:0","tags":null,"title":"Lec25-Data Examples","uri":"/lec25-data-examples/"},{"categories":["UCB-CS61A"],"content":"Scheme ","date":"2024-10-21","objectID":"/lec26-scheme/:0:0","tags":null,"title":"Lec26-Scheme","uri":"/lec26-scheme/"},{"categories":["UCB-CS61A"],"content":"Scheme Fundamentals (number? 123) ; #t (number? \"123\") ; #f (string? \"hello\") ; #t ","date":"2024-10-21","objectID":"/lec26-scheme/:1:0","tags":null,"title":"Lec26-Scheme","uri":"/lec26-scheme/"},{"categories":["UCB-CS61A"],"content":"Special Forms (define x 10) ; define a variable x with value 10 (if #t 10 20) ; if #t is true, return 10, otherwise return 20 (cond ((= x 10) \"x is 10\") ((= x 20) \"x is 20\") (else \"x is not 10 or 20\")) ; conditional statement (and #t #f) ; #f (or #t #f) ; #t (let ((x 10) (y 20)) (+ x y)) ; let statement to create local variables (let* ((x 10) (y (+ x 10))) (+ x y)) ; let* statement to create local variables and use the value of previous variables (lambda (x) (+ x 10)) ; lambda expression to create a function that adds 10 to a given number (map (lambda (x) (+ x 10)) (list 1 2 3)) ; map function to apply a function to each element of a list (define (sum-of-squares x y) (+ (* x x) (* y y))) ; define a function that takes two numbers and returns their sum of squares (sum-of-squares 3 4) ; 25 ","date":"2024-10-21","objectID":"/lec26-scheme/:2:0","tags":null,"title":"Lec26-Scheme","uri":"/lec26-scheme/"},{"categories":["UCB-CS61A"],"content":"lambda expression (define (add-ten x) (+ x 10)) ; define a function that adds 10 to a given number (add-ten 5) ; 15 ","date":"2024-10-21","objectID":"/lec26-scheme/:2:1","tags":null,"title":"Lec26-Scheme","uri":"/lec26-scheme/"},{"categories":["UCB-CS61A"],"content":"Cond and Begin ","date":"2024-10-21","objectID":"/lec26-scheme/:2:2","tags":null,"title":"Lec26-Scheme","uri":"/lec26-scheme/"},{"categories":["UCB-CS61A"],"content":"let 临时绑定 define则是永久绑定 ","date":"2024-10-21","objectID":"/lec26-scheme/:2:3","tags":null,"title":"Lec26-Scheme","uri":"/lec26-scheme/"},{"categories":["UCB-CS61A"],"content":"Composition ","date":"2024-10-20","objectID":"/lec22-composition/:0:0","tags":null,"title":"Lec22-Composition","uri":"/lec22-composition/"},{"categories":["UCB-CS61A"],"content":"Linked Lists 😏 递归 增、删、改、查 ","date":"2024-10-20","objectID":"/lec22-composition/:1:0","tags":null,"title":"Lec22-Composition","uri":"/lec22-composition/"},{"categories":["UCB-CS61A"],"content":"Trees 用好递归 ","date":"2024-10-20","objectID":"/lec22-composition/:2:0","tags":null,"title":"Lec22-Composition","uri":"/lec22-composition/"},{"categories":["UCB-CS61A"],"content":"Representation ","date":"2024-10-20","objectID":"/lec21-representation/:0:0","tags":null,"title":"Lec21-Representation","uri":"/lec21-representation/"},{"categories":["UCB-CS61A"],"content":"Strings 一个是Python表达式（解释器可以直接运行的形式），一个是字符串（人类可读的形式） ","date":"2024-10-20","objectID":"/lec21-representation/:1:0","tags":null,"title":"Lec21-Representation","uri":"/lec21-representation/"},{"categories":["UCB-CS61A"],"content":"repr \u003e\u003e\u003e s = 'hello' \u003e\u003e\u003e print(repr(s)) 'hello' \u003e\u003e\u003e repr(min) '\u003cbuilt-in function min\u003e' ","date":"2024-10-20","objectID":"/lec21-representation/:1:1","tags":null,"title":"Lec21-Representation","uri":"/lec21-representation/"},{"categories":["UCB-CS61A"],"content":"str \u003e\u003e\u003e from fractions import Fraction \u003e\u003e\u003e half = Fraction(1, 2) \u003e\u003e\u003e print(half) # calls __str__ 1/2 \u003e\u003e\u003e repr(half) # calls __repr__ 'Fraction(1, 2)' \u003e\u003e\u003e eval(repr(half)) # creates a new Fraction object Fraction(1, 2) ","date":"2024-10-20","objectID":"/lec21-representation/:1:2","tags":null,"title":"Lec21-Representation","uri":"/lec21-representation/"},{"categories":["UCB-CS61A"],"content":"F-Strings { }里面的按照表达式来计算 \u003e\u003e\u003e x = 10 \u003e\u003e\u003e y = 20 \u003e\u003e\u003e f\"x + y = {x + y}\" 'x + y = 30' ","date":"2024-10-20","objectID":"/lec21-representation/:2:0","tags":null,"title":"Lec21-Representation","uri":"/lec21-representation/"},{"categories":["UCB-CS61A"],"content":"多态函数 Functions that apply to many different forms of data… \u003e\u003e\u003e half.__repr__() 'Fraction(1, 2)' \u003e\u003e\u003e half.__str__() '1/2' 实现 __repr__ 和 __str__ 方法 __repr__: Only class attributes are found! Ignore instance attributes. __str__: Ignore instance attributes. If no __str__ method is defined, it will use __repr__ method. def repr(obj): return type(obj).__repr__(obj) ","date":"2024-10-20","objectID":"/lec21-representation/:3:0","tags":null,"title":"Lec21-Representation","uri":"/lec21-representation/"},{"categories":["UCB-CS61A"],"content":"Interfaces 类似61B的课程，实现接口（长得像是__xx__） 喜欢Java 😋 ","date":"2024-10-20","objectID":"/lec21-representation/:4:0","tags":null,"title":"Lec21-Representation","uri":"/lec21-representation/"},{"categories":["UCB-CS61A"],"content":"special methods 群 贤 毕 至 终于和cmu 10-414对上了 左右值 ","date":"2024-10-20","objectID":"/lec21-representation/:4:1","tags":null,"title":"Lec21-Representation","uri":"/lec21-representation/"},{"categories":["UCB-CS61A"],"content":"Generators a kind of special iterator! ","date":"2024-10-20","objectID":"/lec17-generators/:0:0","tags":null,"title":"Lec17-Generators","uri":"/lec17-generators/"},{"categories":["UCB-CS61A"],"content":"yield def count_to(n): for i in range(n): yield i for i in count_to(5): print(i) t = count_to(5) # t is like a generator object at \u003cgenerator object count_to at 0x000001\u003e print(next(t)) ","date":"2024-10-20","objectID":"/lec17-generators/:1:0","tags":null,"title":"Lec17-Generators","uri":"/lec17-generators/"},{"categories":["UCB-CS61A"],"content":"Generator vs Iterator yield from is a new syntax in Python 3.3 that allows you to delegate iteration to another generator. def countdown(k): if k \u003e 0: yield k yield from countdown(k-1) # element-wise iteration of the sub-generator for i in countdown(5): print(i) list(countdown(5)) # [5, 4, 3, 2, 1] ","date":"2024-10-20","objectID":"/lec17-generators/:2:0","tags":null,"title":"Lec17-Generators","uri":"/lec17-generators/"},{"categories":["UCB-CS61A"],"content":"Example: ","date":"2024-10-20","objectID":"/lec17-generators/:3:0","tags":null,"title":"Lec17-Generators","uri":"/lec17-generators/"},{"categories":["UCB-CS61A"],"content":"Object-Oriented Programming ","date":"2024-10-20","objectID":"/lec18-oop/:0:0","tags":null,"title":"Lec18-OOP","uri":"/lec18-oop/"},{"categories":["UCB-CS61A"],"content":"class class MyClass: def __init__(self, x, y): # constructor # instance variables self.x = x self.y = y def my_method(self): # non-static method print(self.x, self.y) @staticmethod def my_static_method(x, y): # static method print(x, y) Python uses dynamic typing…… 😋 Binding an object to a new name does not create a new object. It creates a new reference to the same object. ","date":"2024-10-20","objectID":"/lec18-oop/:1:0","tags":null,"title":"Lec18-OOP","uri":"/lec18-oop/"},{"categories":["UCB-CS61A"],"content":"Attributes ","date":"2024-10-20","objectID":"/lec19-attributes/:0:0","tags":null,"title":"Lec19-Attributes","uri":"/lec19-attributes/"},{"categories":["UCB-CS61A"],"content":"class attribute class MyClass: x = 10 def __init__(self): self.y = 20 print(MyClass.x) # 10 like static member variables ","date":"2024-10-20","objectID":"/lec19-attributes/:1:0","tags":null,"title":"Lec19-Attributes","uri":"/lec19-attributes/"},{"categories":["UCB-CS61A"],"content":"getattr and hasattr class MyClass: x = 10 def __init__(self): self.y = 20 print(getattr(MyClass, 'x')) # 10 print(hasattr(MyClass, 'z')) # False ","date":"2024-10-20","objectID":"/lec19-attributes/:1:1","tags":null,"title":"Lec19-Attributes","uri":"/lec19-attributes/"},{"categories":["UCB-CS61A"],"content":"assignment to attributes 如果重名，先查看实例的属性 ","date":"2024-10-20","objectID":"/lec19-attributes/:2:0","tags":null,"title":"Lec19-Attributes","uri":"/lec19-attributes/"},{"categories":["UCB-CS61A"],"content":"Function calls in class bound method class MyClass: def __init__(self, x): self.x = x def my_method(self): print(self.x) obj = MyClass(10) obj.my_method # \u003cbound method MyClass.my_method of \u003c__main__.MyClass object at 0x000001E8D7D7D708\u003e\u003e why bound? because the method is bound to the instance of the class, so it is filled with the self parameter ","date":"2024-10-20","objectID":"/lec19-attributes/:3:0","tags":null,"title":"Lec19-Attributes","uri":"/lec19-attributes/"},{"categories":["UCB-CS61A"],"content":"Inheritance ","date":"2024-10-20","objectID":"/lec20-inheritance/:0:0","tags":null,"title":"Lec20-Inheritance","uri":"/lec20-inheritance/"},{"categories":["UCB-CS61A"],"content":"Object-Oriented Design 代码复现！ 注意instance属性可以随时更改,look at the instance, then the subclass before looking at the superclass ","date":"2024-10-20","objectID":"/lec20-inheritance/:1:0","tags":null,"title":"Lec20-Inheritance","uri":"/lec20-inheritance/"},{"categories":["UCB-CS61A"],"content":"Multiple Inheritance class A: def __init__(self, x): self.x = x class B: def __init__(self, y): self.y = y def __str__(self): return f\"B(y={self.y})\" class C(A, B): def __init__(self, x, y): super().__init__(x) self.y = y def __str__(self): return f\"C(x={self.x}, y={self.y})\" def f(self): return self.x + self.y c = C(1, 2) print(c) print(c.f()) ","date":"2024-10-20","objectID":"/lec20-inheritance/:2:0","tags":null,"title":"Lec20-Inheritance","uri":"/lec20-inheritance/"},{"categories":["UCB-CS61A"],"content":"Iterator iter(iterable) next(iterator) ","date":"2024-10-20","objectID":"/lec16-iterator/:0:0","tags":null,"title":"Lec16-Iterator","uri":"/lec16-iterator/"},{"categories":["UCB-CS61A"],"content":"List list(iterator) 创建一个新的列表，包含迭代器中的所有元素 ","date":"2024-10-20","objectID":"/lec16-iterator/:1:0","tags":null,"title":"Lec16-Iterator","uri":"/lec16-iterator/"},{"categories":["UCB-CS61A"],"content":"Dictionary values, keys, items can be iterated using iter() and next() functions 迭代的时候不要改变字典的结构（长度），否则会导致迭代出错 ","date":"2024-10-20","objectID":"/lec16-iterator/:2:0","tags":null,"title":"Lec16-Iterator","uri":"/lec16-iterator/"},{"categories":["UCB-CS61A"],"content":"for r in range… if use iterator in for statement, it will not be able to use again, because it will be exhausted after first iteration ","date":"2024-10-20","objectID":"/lec16-iterator/:3:0","tags":null,"title":"Lec16-Iterator","uri":"/lec16-iterator/"},{"categories":["UCB-CS61A"],"content":"built-in functions in Python LAZY MODE: map / filter / zip / reversed ","date":"2024-10-20","objectID":"/lec16-iterator/:4:0","tags":null,"title":"Lec16-Iterator","uri":"/lec16-iterator/"},{"categories":["UCB-CS61A"],"content":"map / filter filter see data100 😋 ","date":"2024-10-20","objectID":"/lec16-iterator/:4:1","tags":null,"title":"Lec16-Iterator","uri":"/lec16-iterator/"},{"categories":["UCB-CS61A"],"content":"zip unpack the zip object into multiple variables(can be useful!) ","date":"2024-10-20","objectID":"/lec16-iterator/:4:2","tags":null,"title":"Lec16-Iterator","uri":"/lec16-iterator/"},{"categories":["UCB-CS61A"],"content":"why Iterator? ","date":"2024-10-20","objectID":"/lec16-iterator/:5:0","tags":null,"title":"Lec16-Iterator","uri":"/lec16-iterator/"},{"categories":["UCB-CS61A"],"content":"Mutability ","date":"2024-10-17","objectID":"/lec15-mutability/:0:0","tags":null,"title":"Lec15-Mutability","uri":"/lec15-mutability/"},{"categories":["UCB-CS61A"],"content":"date ","date":"2024-10-17","objectID":"/lec15-mutability/:1:0","tags":null,"title":"Lec15-Mutability","uri":"/lec15-mutability/"},{"categories":["UCB-CS61A"],"content":"Obj in Python ","date":"2024-10-17","objectID":"/lec15-mutability/:2:0","tags":null,"title":"Lec15-Mutability","uri":"/lec15-mutability/"},{"categories":["UCB-CS61A"],"content":"String s = \"Hello\" s.swapcase() # \"hELLO\" ","date":"2024-10-17","objectID":"/lec15-mutability/:3:0","tags":null,"title":"Lec15-Mutability","uri":"/lec15-mutability/"},{"categories":["UCB-CS61A"],"content":"ASCII 和表格对应 0x41 –\u003e row 4, col 1 😮 from unicodedata import name, lookup name('A') # 'LATIN CAPITAL LETTER A' lookup('LATIN CAPITAL LETTER A') # 'A' lookup('SNOWMAN') # '☃' lookup('FACE WITH TEARS OF JOY').encode('utf-8') # '😂'.encode('utf-8') ","date":"2024-10-17","objectID":"/lec15-mutability/:3:1","tags":null,"title":"Lec15-Mutability","uri":"/lec15-mutability/"},{"categories":["UCB-CS61A"],"content":"Mutation operations ","date":"2024-10-17","objectID":"/lec15-mutability/:4:0","tags":null,"title":"Lec15-Mutability","uri":"/lec15-mutability/"},{"categories":["UCB-CS61A"],"content":"Mutable objects List Dictionary Set? # List, pop, remove, append, extend lst = [1, 2, 3] lst.pop() # 3 lst.remove(2) # [1] lst.append(4) # [1, 4] lst.extend([5, 6]) # [1, 4, 5, 6] 赋值的时候，如果是可变对象，则会影响到原对象，如果是不可变对象，则会创建新的对象。 😮 ","date":"2024-10-17","objectID":"/lec15-mutability/:4:1","tags":null,"title":"Lec15-Mutability","uri":"/lec15-mutability/"},{"categories":["UCB-CS61A"],"content":"Immutable objects Tuple String Number Immutable objects are hashable, which means that they can be used as keys in dictionaries and as elements in sets. An immutable object can be changed if it contains a mutable object. s = ([1, 2], 4) s[0][0] = 8 # correct s[0] = 5 # incorrect ","date":"2024-10-17","objectID":"/lec15-mutability/:4:2","tags":null,"title":"Lec15-Mutability","uri":"/lec15-mutability/"},{"categories":["UCB-CS61A"],"content":"Mutation ","date":"2024-10-17","objectID":"/lec15-mutability/:5:0","tags":null,"title":"Lec15-Mutability","uri":"/lec15-mutability/"},{"categories":["UCB-CS61A"],"content":"same or change? Identity: a is b is in Python Equality: a == b == in Python def f(s=[]): s.append(1) return s f() # [1] f() # [1, 1] f() # [1, 1, 1] frame里面引用传递更加常见 🤔 ","date":"2024-10-17","objectID":"/lec15-mutability/:5:1","tags":null,"title":"Lec15-Mutability","uri":"/lec15-mutability/"},{"categories":["UCB-CS61A"],"content":"Trees A tree has a root label and a list of branches and each branch is a tree itself def tree(label, branches=[]): for branch in branches: assert is_tree(branch), 'branches must be trees' return [label] + list(branches) # make sure branches is a list def label(tree): return tree[0] def branches(tree): return tree[1:] def is_tree(tree): if type(tree)!= list or len(tree) \u003c 1: return False for branch in branches(tree): if not is_tree(branch): return False return True methods: def is_leaf(tree): return not branches(tree) def fib_tree(n): if n \u003c= 1: return tree(n) else: left, right = fib_tree(n-2), fib_tree(n-1) return tree(label(left) + label(right), [left, right]) def count_leaves(tree): if is_leaf(tree): return 1 else: return sum(count_leaves(branch) for branch in branches(tree)) def leaves(tree): \"\"\" \u003e\u003e\u003e leaves(fib_tree(5)) [1, 0, 1, 0, 1, 1, 0, 1] \"\"\" if is_leaf(tree): return [label(tree)] else: return sum([leaves(branch) for branch in branches(tree)], []) def increment_leaves(tree): if is_leaf(tree): return tree(label(tree) + 1) else: return tree(label(tree), [increment_leaves(branch) for branch in branches(tree)]) def increment(tree): return tree(label(tree) + 1, [increment(branch) for branch in branches(tree)]) def print_tree(tree, indent=0): print(' ' * indent + str(label(tree))) for branch in branches(tree): print_tree(branch, indent + 1) def print_sum(tree, so_far=0): so_far += label(tree) if is_leaf(tree): print(so_far) else: for branch in branches(tree): print_sum(branch, so_far) def count_paths(tree, total): if label(tree) == total: found = 1 else: found = 0 return found + sum(count_paths(branch, total - label(tree)) for branch in branches(tree)) ","date":"2024-10-17","objectID":"/lec14-trees/:0:0","tags":null,"title":"Lec14-Trees","uri":"/lec14-trees/"},{"categories":null,"content":"Thinking2 新的可能： 机器学习编译 MLC 机器学习系统 MLSys 机器学习运维 MLOps 那会是怎么样的呢？🤔 :( –写于2024-10-16 61a/c \u0026 eecs498 \u0026 10414纪 ","date":"2024-10-16","objectID":"/beyondcode/thinking2/:0:0","tags":null,"title":"Thinking2","uri":"/beyondcode/thinking2/"},{"categories":["UCB-CS61A"],"content":"Data Representation what is data??? 从对象的行为（函数与方法）来定义 ","date":"2024-10-15","objectID":"/lec13-data-representation/:0:0","tags":null,"title":"Lec13-Data Representation","uri":"/lec13-data-representation/"},{"categories":["UCB-CS61A"],"content":"Example: Rational Numbers 纯粹使用函数来做接口而不是内在设置列表存储 🤔 ","date":"2024-10-15","objectID":"/lec13-data-representation/:1:0","tags":null,"title":"Lec13-Data Representation","uri":"/lec13-data-representation/"},{"categories":["UCB-CS61A"],"content":"data representation – a methodology constructor \u0026 selector thoughts 感觉这里更像是api设计的思路，哲学思想 仔细思考用好 constructor 和 selector 的作用 ！ 有没有一种可能，java没这么多事 ","date":"2024-10-15","objectID":"/lec13-data-representation/:2:0","tags":null,"title":"Lec13-Data Representation","uri":"/lec13-data-representation/"},{"categories":["UCB-CS61A"],"content":"Pairs 和 __getitem__ ? from operator import getitem getitem(pair, 0) # first element getitem(pair, 1) # second element from fractions import gcd ### gcd is used to find the greatest common divisor of two numbers gcd(pair[0], pair[1]) # greatest common divisor ","date":"2024-10-15","objectID":"/lec13-data-representation/:3:0","tags":null,"title":"Lec13-Data Representation","uri":"/lec13-data-representation/"},{"categories":["UCB-CS61C"],"content":"Compiling, Assembling, Linking and Loading CALL ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:0:0","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"Interpretation and Translation ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:1:0","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"Interpretation 有一个解释器（是一个程序） ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:1:1","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"Translation 翻译为低级的语言针对hardware更快操作 ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:1:2","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"Compiler CS164 🤔 这么看来pseudo code确实存在？ ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:2:0","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"Assembler ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:3:0","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"Directives ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:3:1","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"Replacements 把pseudo code翻译成真实的RISC-V指令 ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:3:2","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"Producing real machine code 让.o文件确定终值 ==\u003e object file 简单case：直接用.o文件 Forward reference problem：确定标签位置，然后再用.o文件 PC 相对寻址 ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:3:3","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"Symbol Table and Relocation Table symbol Table label Table 汇编器层面不知道static 之类的东西，所以需要暂时做个记号等待link处理 ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:3:4","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"Object File Format ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:3:5","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"Linker what happen? 4 types of addressing which instructions must be linked? J-format: j / jal L-, S-format: there is a gp ! ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:4:0","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"Resolving reference 然后在\"user\" symbol table中找到对应的地址，然后替换掉原来的符号 接着在library files同样操作 最后输出：executable file，containing text and data (plus header)==\u003e 存储在 磁盘 上面 ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:4:1","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"static and dynamic linking 现在我知道.dll 文件是什么了😋 动态link通常在机器码级别进行，而不是汇编器级别 ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:4:2","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"Loader 什么是loader？ – CS162 OS先导课程 😤 Loader的作用： 注意最后一行start-up routine的program’s arguments 正是和 argc \u0026 argv 相关的 😮 ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:5:0","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61C"],"content":"EXAMPLE hello world ! #include \u003cstdio.h\u003e int main() { printf(\"Hello, %s\\n\", \"world\"); return 0; } .s file: .o file: 只有字符存储在.o文件中！ .out file: 红色的字符被补充了 ","date":"2024-10-15","objectID":"/lec13-compiling-assembling-linking-and-loading/:6:0","tags":null,"title":"Lec13-Compiling, Assembling, Linking and Loading","uri":"/lec13-compiling-assembling-linking-and-loading/"},{"categories":["UCB-CS61A"],"content":"Container ","date":"2024-10-15","objectID":"/lec12-container/:0:0","tags":null,"title":"Lec12-Container","uri":"/lec12-container/"},{"categories":["UCB-CS61A"],"content":"box and pointers 见61B 😋 ","date":"2024-10-15","objectID":"/lec12-container/:1:0","tags":null,"title":"Lec12-Container","uri":"/lec12-container/"},{"categories":["UCB-CS61A"],"content":"slice 传统python中，slice操作符的语法为[start:stop:step]，其中start和stop是切片的起止位置，step是切片的步长（左闭右开） 切片生成新的序列，对原序列的修改不会影响切片（物化view的感觉） ","date":"2024-10-15","objectID":"/lec12-container/:2:0","tags":null,"title":"Lec12-Container","uri":"/lec12-container/"},{"categories":["UCB-CS61A"],"content":"Process value in container ","date":"2024-10-15","objectID":"/lec12-container/:3:0","tags":null,"title":"Lec12-Container","uri":"/lec12-container/"},{"categories":["UCB-CS61A"],"content":"aggregate functions sum(container)：返回容器中所有元素的和 sum([1, 2, 3, 4, 5]) # 15 sum([1, 2], 9) # 12 sum([[2, 3], [4]], []) # [2, 3, 4] max(container)：返回容器中最大的元素 max(range(10), key=lambda x: 7-(x-4)*(x-2)) # 3 all(container)：如果容器中所有元素都为真，则返回True，否则返回False all([True, True, True]) # True all([True, False, True]) # False all([x \u003c 5 for x in range(5)]) ","date":"2024-10-15","objectID":"/lec12-container/:3:1","tags":null,"title":"Lec12-Container","uri":"/lec12-container/"},{"categories":["UCB-CS61A"],"content":"Strings 注意事实上程序只是字符串 😋 和61B的text写java一个道理 exec('some_code') ","date":"2024-10-15","objectID":"/lec12-container/:4:0","tags":null,"title":"Lec12-Container","uri":"/lec12-container/"},{"categories":["UCB-CS61A"],"content":"Dict 💢 我一直觉得这个和 Map\u003cK, V\u003e 以及json的关系不清不楚 num = {'I': 1, 'V': 5, 'X': 10} list(num) # ['I', 'V', 'X'] num.values() # dict_values([1, 5, 10]) empty = {} ","date":"2024-10-15","objectID":"/lec12-container/:5:0","tags":null,"title":"Lec12-Container","uri":"/lec12-container/"},{"categories":["UCB-CS61A"],"content":"dict comprehension {x: x**2 for x in range(5)} # {0: 0, 1: 1, 2: 4, 3: 9, 4: 16} ","date":"2024-10-15","objectID":"/lec12-container/:5:1","tags":null,"title":"Lec12-Container","uri":"/lec12-container/"},{"categories":["UCB-CS61A"],"content":"Sequences ","date":"2024-10-15","objectID":"/lec11-sequences/:0:0","tags":null,"title":"Lec11-Sequences","uri":"/lec11-sequences/"},{"categories":["UCB-CS61A"],"content":"List my_list = [1, 2, 3, 4, 5] getitem(my_list, 2) # Output: 3 加法乘法是 拼接 ","date":"2024-10-15","objectID":"/lec11-sequences/:1:0","tags":null,"title":"Lec11-Sequences","uri":"/lec11-sequences/"},{"categories":["UCB-CS61A"],"content":"Container ","date":"2024-10-15","objectID":"/lec11-sequences/:2:0","tags":null,"title":"Lec11-Sequences","uri":"/lec11-sequences/"},{"categories":["UCB-CS61A"],"content":"in my_list = [1, 2, 3, 4, 5] 5 in my_list # Output: True for i in my_list: print(i) ","date":"2024-10-15","objectID":"/lec11-sequences/:2:1","tags":null,"title":"Lec11-Sequences","uri":"/lec11-sequences/"},{"categories":["UCB-CS61A"],"content":"unpacking ","date":"2024-10-15","objectID":"/lec11-sequences/:2:2","tags":null,"title":"Lec11-Sequences","uri":"/lec11-sequences/"},{"categories":["UCB-CS61A"],"content":"range range(5) # Output: range(0, 5) range(1, 5) # Output: range(1, 5) range(1, 10, 2) # Output: range(1, 10, 2) 左闭右开 ","date":"2024-10-15","objectID":"/lec11-sequences/:2:3","tags":null,"title":"Lec11-Sequences","uri":"/lec11-sequences/"},{"categories":["UCB-CS61A"],"content":"下划线变量命名 _ = 1 # 单个下划线 __ = 2 # 双下划线 __my_var = 3 # 双下划线开头的变量名 ","date":"2024-10-15","objectID":"/lec11-sequences/:2:4","tags":null,"title":"Lec11-Sequences","uri":"/lec11-sequences/"},{"categories":["UCB-CS61A"],"content":"List comprehension [x for x in range(5) if x % 2 == 0] ","date":"2024-10-15","objectID":"/lec11-sequences/:2:5","tags":null,"title":"Lec11-Sequences","uri":"/lec11-sequences/"},{"categories":["UCB-CS61A"],"content":"Tree Recursion ","date":"2024-10-14","objectID":"/lec10-tree-recursion/:0:0","tags":null,"title":"Lec10-Tree Recursion","uri":"/lec10-tree-recursion/"},{"categories":["UCB-CS61A"],"content":"Inverse Cascade ","date":"2024-10-14","objectID":"/lec10-tree-recursion/:1:0","tags":null,"title":"Lec10-Tree Recursion","uri":"/lec10-tree-recursion/"},{"categories":["UCB-CS61A"],"content":"Tree Recursion ","date":"2024-10-14","objectID":"/lec10-tree-recursion/:2:0","tags":null,"title":"Lec10-Tree Recursion","uri":"/lec10-tree-recursion/"},{"categories":["UCB-CS61A"],"content":"计算斐波那契数列 def fib(n): if n == 0: return 0 elif n == 1: return 1 else: return fib(n-1) + fib(n-2) 并不是最好的实现 -\u003e 在遍历的时候会重复计算相同的节点，得想办法存储中间结果 🤔 ","date":"2024-10-14","objectID":"/lec10-tree-recursion/:2:1","tags":null,"title":"Lec10-Tree Recursion","uri":"/lec10-tree-recursion/"},{"categories":["UCB-CS61A"],"content":"Counting Partitions def count_partitions(n, m): \"\"\" \u003e\u003e\u003e count_partitions(6, 4) 9 \"\"\" if n == 0: return 1 elif n \u003c 0 or m \u003c 0: return 0 elif m == 0: return 0 else: with_m = count_partitions(n-m, m) without_m = count_partitions(n, m-1) return with_m + without_m ","date":"2024-10-14","objectID":"/lec10-tree-recursion/:2:2","tags":null,"title":"Lec10-Tree Recursion","uri":"/lec10-tree-recursion/"},{"categories":["UCB-CS61A"],"content":"Recursion ","date":"2024-10-14","objectID":"/lec9-recursion/:0:0","tags":null,"title":"Lec9-Recursion","uri":"/lec9-recursion/"},{"categories":["UCB-CS61A"],"content":"Self-reference 都是返回函数导致的 😋 然后函数再次被call，就形成了自我递归 ","date":"2024-10-14","objectID":"/lec9-recursion/:1:0","tags":null,"title":"Lec9-Recursion","uri":"/lec9-recursion/"},{"categories":["UCB-CS61A"],"content":"Recursive Functions 有一个细节，递归调用的frame的parent frame都是global而不是nested 🤔 ","date":"2024-10-14","objectID":"/lec9-recursion/:2:0","tags":null,"title":"Lec9-Recursion","uri":"/lec9-recursion/"},{"categories":["UCB-CS61A"],"content":"Mutual Recursion 互相调用 ","date":"2024-10-14","objectID":"/lec9-recursion/:3:0","tags":null,"title":"Lec9-Recursion","uri":"/lec9-recursion/"},{"categories":["UCB-CS61A"],"content":"Recursion to Iteration key: figure out what state must be maintained during the while loop ","date":"2024-10-14","objectID":"/lec9-recursion/:4:0","tags":null,"title":"Lec9-Recursion","uri":"/lec9-recursion/"},{"categories":["UCB-CS61A"],"content":"Iteration to Recursion Iteration is a special case of recursion 😮 ","date":"2024-10-14","objectID":"/lec9-recursion/:5:0","tags":null,"title":"Lec9-Recursion","uri":"/lec9-recursion/"},{"categories":["UCB-CS61A"],"content":"Function Example ","date":"2024-10-14","objectID":"/lec8-function-example/:0:0","tags":null,"title":"Lec8-Function Example","uri":"/lec8-function-example/"},{"categories":["UCB-CS61A"],"content":"1 def delay(arg): print('delayed') def g(): return arg return g ","date":"2024-10-14","objectID":"/lec8-function-example/:1:0","tags":null,"title":"Lec8-Function Example","uri":"/lec8-function-example/"},{"categories":["UCB-CS61A"],"content":"2 def pirate(arggg): print('matey') def plunder(): return arggg return plunder ","date":"2024-10-14","objectID":"/lec8-function-example/:2:0","tags":null,"title":"Lec8-Function Example","uri":"/lec8-function-example/"},{"categories":["UCB-CS61A"],"content":"3 horse mask 关键是两条红线 ","date":"2024-10-14","objectID":"/lec8-function-example/:3:0","tags":null,"title":"Lec8-Function Example","uri":"/lec8-function-example/"},{"categories":["UCB-CS61A"],"content":"装饰器 本质上是一个HoF ","date":"2024-10-14","objectID":"/lec8-function-example/:4:0","tags":null,"title":"Lec8-Function Example","uri":"/lec8-function-example/"},{"categories":["UCB-CS61A"],"content":"Functional Abstraction ","date":"2024-10-13","objectID":"/lec7-functional-abstraction/:0:0","tags":null,"title":"Lec7-Functional Abstraction","uri":"/lec7-functional-abstraction/"},{"categories":["UCB-CS61A"],"content":"which a ? a = 1 def f(g): a = 2 return lambda y: a * g(y) # a is 2 f(lambda y: a + y)(a) # a is 1 ","date":"2024-10-13","objectID":"/lec7-functional-abstraction/:1:0","tags":null,"title":"Lec7-Functional Abstraction","uri":"/lec7-functional-abstraction/"},{"categories":["UCB-CS61A"],"content":"Return 求反函数整数点的解法，有意思记录一下 ","date":"2024-10-13","objectID":"/lec7-functional-abstraction/:2:0","tags":null,"title":"Lec7-Functional Abstraction","uri":"/lec7-functional-abstraction/"},{"categories":["UCB-CS61A"],"content":"Abstraction 在python里面函数的内在名称(intrinsic name)用于用户识别而已 ","date":"2024-10-13","objectID":"/lec7-functional-abstraction/:3:0","tags":null,"title":"Lec7-Functional Abstraction","uri":"/lec7-functional-abstraction/"},{"categories":["UCB-CS61A"],"content":"Sound what the HoF usage? 🤔 make a song! 省流：写了一个马里奥的song，感觉和61B后期的一个lab很相似（61 B的电音一点hhh） 😏 ","date":"2024-10-12","objectID":"/lec6-sound/:0:0","tags":null,"title":"Lec6-Sound","uri":"/lec6-sound/"},{"categories":["UCB-CS61A"],"content":"Environments ","date":"2024-10-12","objectID":"/lec5-environments/:0:0","tags":null,"title":"Lec5-Environments","uri":"/lec5-environments/"},{"categories":["UCB-CS61A"],"content":"Nested Environments in Python 注意环境追溯的顺序，从内到外 ","date":"2024-10-12","objectID":"/lec5-environments/:1:0","tags":null,"title":"Lec5-Environments","uri":"/lec5-environments/"},{"categories":["UCB-CS61A"],"content":"Lambda Functions 函数式编程的核心思想是抽象和函数式编程，lambda函数是一种匿名函数，可以把函数作为参数传递给其他函数，或者作为返回值返回 f = lambda x: x + 1 print(f(1)) # Output: 2 print((lambda x: x + 8)(1)) ","date":"2024-10-12","objectID":"/lec5-environments/:2:0","tags":null,"title":"Lec5-Environments","uri":"/lec5-environments/"},{"categories":["UCB-CS61A"],"content":"和def函数的区别 ","date":"2024-10-12","objectID":"/lec5-environments/:2:1","tags":null,"title":"Lec5-Environments","uri":"/lec5-environments/"},{"categories":["UCB-CS61A"],"content":"Function Currying Currying: transforming a multi-argument function into a single-argument, higher-order function. def curry2(f): def g(x): def h(y): return f(x, y) return h return g # Another example curry2b = lambda f: (lambda x: (lambda y: f(x, y))) ","date":"2024-10-12","objectID":"/lec5-environments/:3:0","tags":null,"title":"Lec5-Environments","uri":"/lec5-environments/"},{"categories":["UCB-CS61A"],"content":"Control ","date":"2024-10-12","objectID":"/lec3-control/:0:0","tags":null,"title":"Lec3-Control","uri":"/lec3-control/"},{"categories":["UCB-CS61A"],"content":"div in Python from opertor import truediv, floordiv a = 10 b = 3 c = a / b d = a // b print(c) # 3.3333333333333335 print(d) # 3 ","date":"2024-10-12","objectID":"/lec3-control/:1:0","tags":null,"title":"Lec3-Control","uri":"/lec3-control/"},{"categories":["UCB-CS61A"],"content":"doctest in Python ","date":"2024-10-12","objectID":"/lec3-control/:2:0","tags":null,"title":"Lec3-Control","uri":"/lec3-control/"},{"categories":["UCB-CS61A"],"content":"Higher Order Functions ","date":"2024-10-12","objectID":"/lec4-higher-order-functions/:0:0","tags":null,"title":"Lec4-Higher-Order Functions","uri":"/lec4-higher-order-functions/"},{"categories":["UCB-CS61A"],"content":"Control Statements vs Functions all params will be evaluated before the function is called ! 不存在跳过参数的情况 ","date":"2024-10-12","objectID":"/lec4-higher-order-functions/:1:0","tags":null,"title":"Lec4-Higher-Order Functions","uri":"/lec4-higher-order-functions/"},{"categories":["UCB-CS61A"],"content":"Assertions in Python assert condition, message ","date":"2024-10-12","objectID":"/lec4-higher-order-functions/:2:0","tags":null,"title":"Lec4-Higher-Order Functions","uri":"/lec4-higher-order-functions/"},{"categories":["UCB-CS61A"],"content":"Returning a Function from a Function 带参数的修饰器 😮 def make_adder(n): def adder(x): return x + n return adder # Example usage add_three = make_adder(3) print(add_three(4)) # Output: 7, WHY? functions in Python are first-class values! ","date":"2024-10-12","objectID":"/lec4-higher-order-functions/:3:0","tags":null,"title":"Lec4-Higher-Order Functions","uri":"/lec4-higher-order-functions/"},{"categories":["UCB-CS61C"],"content":"RISC-V Instruction Formats II ","date":"2024-10-09","objectID":"/lec12-risc-v-instruction-formats-ii/:0:0","tags":null,"title":"Lec12-RISC-V Instruction Formats II","uri":"/lec12-risc-v-instruction-formats-ii/"},{"categories":["UCB-CS61C"],"content":"B-Format Layout branch/分支 ==\u003e if-else, while, for encode Label: PC寻址, 用imm field来表示偏移量 实际上 RV compressed instruction format! 16bit 压缩指令格式，偏移量不再是4的倍数，而是2的倍数（所以imm 二进制结尾一定是0） 理论layout 解释一下如何从指令解析出立即数的数值 B-type “|” 意思是专门分出一块区域来存一位数字 ","date":"2024-10-09","objectID":"/lec12-risc-v-instruction-formats-ii/:1:0","tags":null,"title":"Lec12-RISC-V Instruction Formats II","uri":"/lec12-risc-v-instruction-formats-ii/"},{"categories":["UCB-CS61C"],"content":"Long Immediate， U-Format Layout I, B, S imm的12位扩展到long，找个地方放下剩下的20位 注意这里不直接使用branch指令跳转，而是采用jump直接来做 地方来了：同时来了两个新的指令lui \u0026 auipc ","date":"2024-10-09","objectID":"/lec12-risc-v-instruction-formats-ii/:2:0","tags":null,"title":"Lec12-RISC-V Instruction Formats II","uri":"/lec12-risc-v-instruction-formats-ii/"},{"categories":["UCB-CS61C"],"content":"Corner case 有符号扩展带过来的，1开头的符号扩展 用+1来避免这个问题 补充 auipc 指令 ","date":"2024-10-09","objectID":"/lec12-risc-v-instruction-formats-ii/:2:1","tags":null,"title":"Lec12-RISC-V Instruction Formats II","uri":"/lec12-risc-v-instruction-formats-ii/"},{"categories":["UCB-CS61C"],"content":"J-Format Layout 只有jal，因为jalr是I-type的 使用示例 jalr 使用示例 留一个reference ","date":"2024-10-09","objectID":"/lec12-risc-v-instruction-formats-ii/:3:0","tags":null,"title":"Lec12-RISC-V Instruction Formats II","uri":"/lec12-risc-v-instruction-formats-ii/"},{"categories":["UCB-CS61C"],"content":"C Memory Management ","date":"2024-10-09","objectID":"/lec5-c-memory-management/:0:0","tags":null,"title":"Lec5-C Memory Management","uri":"/lec5-c-memory-management/"},{"categories":["UCB-CS61C"],"content":"malloc // with the help of a typecast and sizeof ptr = (int *) malloc(n * sizeof(int)); /* check if malloc was successful */ if (ptr == NULL) { /* handle error */ } ptr = (int *) realloc(ptr, (n+1) * sizeof(int)); free(ptr); // realloc(ptr, 0) 不要踩坑！ An array name is not a variable. – K\u0026R when call \u0026arr , just get the address of the first element of the array ","date":"2024-10-09","objectID":"/lec5-c-memory-management/:1:0","tags":null,"title":"Lec5-C Memory Management","uri":"/lec5-c-memory-management/"},{"categories":["UCB-CS61C"],"content":"Linked List Example struct node { char *data; struct node *next; }; typedef struct node *List; // 定义 List 为 struct node 的指针类型 List create_empty_list() { return NULL; } ","date":"2024-10-09","objectID":"/lec5-c-memory-management/:2:0","tags":null,"title":"Lec5-C Memory Management","uri":"/lec5-c-memory-management/"},{"categories":["UCB-CS61C"],"content":"Memory Locations 分配内存的方式 三个存储池 栈的映像图 LIFO ","date":"2024-10-09","objectID":"/lec5-c-memory-management/:3:0","tags":null,"title":"Lec5-C Memory Management","uri":"/lec5-c-memory-management/"},{"categories":["UCB-CS61C"],"content":"Memory Management stack, static memory are easy to handle, but heap is a bit more complicated… ","date":"2024-10-09","objectID":"/lec5-c-memory-management/:4:0","tags":null,"title":"Lec5-C Memory Management","uri":"/lec5-c-memory-management/"},{"categories":["UCB-CS61C"],"content":"Implementing malloc and free ","date":"2024-10-09","objectID":"/lec5-c-memory-management/:4:1","tags":null,"title":"Lec5-C Memory Management","uri":"/lec5-c-memory-management/"},{"categories":["UCB-CS61C"],"content":"When Memory Goes Bad 不要轻易的访问栈区指针 / 地址 忘记realloc会移动数据 移动指针但是胡乱free or double free 🤯 ","date":"2024-10-09","objectID":"/lec5-c-memory-management/:5:0","tags":null,"title":"Lec5-C Memory Management","uri":"/lec5-c-memory-management/"},{"categories":["UCB-CS61C"],"content":"Valgrind? Valgrind is a tool for detecting memory errors in C and C++ programs. ","date":"2024-10-09","objectID":"/lec5-c-memory-management/:6:0","tags":null,"title":"Lec5-C Memory Management","uri":"/lec5-c-memory-management/"},{"categories":["UCB-CS61C"],"content":"Floating Point ","date":"2024-10-09","objectID":"/lec6-floating-point/:0:0","tags":null,"title":"Lec6-Floating Point","uri":"/lec6-floating-point/"},{"categories":["UCB-CS61C"],"content":"Introduction note that binary can directly calculate we can use normal format to represent floating point numbers eg: $1.xxxxx * 2_{two}^{yyyyy}$ “1.“默认，不需bit级别上考虑 ","date":"2024-10-09","objectID":"/lec6-floating-point/:1:0","tags":null,"title":"Lec6-Floating Point","uri":"/lec6-floating-point/"},{"categories":["UCB-CS61C"],"content":"underflow \u0026 IEEE 754 希望全是0的bit表示的是最小的数字，而不是+0或-0，引入bias $bias = 2^{n-1} - 1$ 详见number representation的bias部分 真正的表示方法： IEEE 754 🎉 ","date":"2024-10-09","objectID":"/lec6-floating-point/:2:0","tags":null,"title":"Lec6-Floating Point","uri":"/lec6-floating-point/"},{"categories":["UCB-CS61C"],"content":"Special Values infinity, NaN, zero NaN (Not a Number) : 无效数值，如0/0, sqrt(-1) infinity : 无穷大，如1/0, 10^1000 zero : 零，如0/1, 1.0-1.0 gap数量级在800万左右，因为implicit one的出现 denormalized number : 规格化数值，指数部分为0（implicit 2^-126），小数部分不为0==\u003e 从步长2^-149开始，exp加1，步长翻倍，同时从denorm到norm的时候步长不会发生变化！ 总结 从0 11111110 111…11(23个) 加一，得到 0 11111111 000…00(23个)这就是无穷 one more step, 0 11111111 000…00(23个)加一，得到 0 11111111 000…01(23个)这就是NaN（一大片都是NaN） 1应该是 0 01111111 000…00(23个) 😋 1, 2, 4, 8, 16, 32…之间都是800万个左右数字，某一刻开始间隔1计数 😏 ","date":"2024-10-09","objectID":"/lec6-floating-point/:3:0","tags":null,"title":"Lec6-Floating Point","uri":"/lec6-floating-point/"},{"categories":["UCB-CS61C"],"content":"example and discussion ","date":"2024-10-09","objectID":"/lec6-floating-point/:4:0","tags":null,"title":"Lec6-Floating Point","uri":"/lec6-floating-point/"},{"categories":["UCB-CS61C"],"content":"example $\\frac{1}{3} = $ 0 01111101 010101…0101(共23个) ","date":"2024-10-09","objectID":"/lec6-floating-point/:4:1","tags":null,"title":"Lec6-Floating Point","uri":"/lec6-floating-point/"},{"categories":["UCB-CS61C"],"content":"discussion FP add associative law: $a+b+c = (a+b)+c$ ? precision and accuracy rounding 向上 / 向下 / 四舍五入 / 截断 add casting // most large integers do not have exact representation in float if (i == (int)((float)i)) { prtinf(\"true\"); // not always true } if (f == (float) ((int)f)) { printf(\"true\"); // not always true, eg: 1.5 } ","date":"2024-10-09","objectID":"/lec6-floating-point/:4:2","tags":null,"title":"Lec6-Floating Point","uri":"/lec6-floating-point/"},{"categories":["UCB-CS61C"],"content":"other representation double precision float (64 bits) 加速器所支持的格式 ","date":"2024-10-09","objectID":"/lec6-floating-point/:5:0","tags":null,"title":"Lec6-Floating Point","uri":"/lec6-floating-point/"},{"categories":["UCB-CS61C"],"content":"RISC-V Introduction ","date":"2024-10-09","objectID":"/lec7-risc-v-introduction/:0:0","tags":null,"title":"Lec7-RISC-V Introduction","uri":"/lec7-risc-v-introduction/"},{"categories":["UCB-CS61C"],"content":"Instruction Set Architecture (ISA) ","date":"2024-10-09","objectID":"/lec7-risc-v-introduction/:1:0","tags":null,"title":"Lec7-RISC-V Introduction","uri":"/lec7-risc-v-introduction/"},{"categories":["UCB-CS61C"],"content":"Assembly Variables each statement is called an instruction ","date":"2024-10-09","objectID":"/lec7-risc-v-introduction/:2:0","tags":null,"title":"Lec7-RISC-V Introduction","uri":"/lec7-risc-v-introduction/"},{"categories":["UCB-CS61C"],"content":"Registers where are registers ? 32 general purpose registers (GPRs) are available in RISC-V architecture.(x0 - x31) word: 32 bits (can be 64 bits in RV64) x0: always 0 # is the comment character ","date":"2024-10-09","objectID":"/lec7-risc-v-introduction/:2:1","tags":null,"title":"Lec7-RISC-V Introduction","uri":"/lec7-risc-v-introduction/"},{"categories":["UCB-CS61C"],"content":"no type casting in RISC-V assembly language the registers have no type ","date":"2024-10-09","objectID":"/lec7-risc-v-introduction/:2:2","tags":null,"title":"Lec7-RISC-V Introduction","uri":"/lec7-risc-v-introduction/"},{"categories":["UCB-CS61C"],"content":"add/sub instructions ","date":"2024-10-09","objectID":"/lec7-risc-v-introduction/:3:0","tags":null,"title":"Lec7-RISC-V Introduction","uri":"/lec7-risc-v-introduction/"},{"categories":["UCB-CS61C"],"content":"syntax of instructions add rd, rs1, rs2 sub rd, rs1, rs2 # d(rd) = e(rs1) - f(rs2), 注意顺序 ","date":"2024-10-09","objectID":"/lec7-risc-v-introduction/:3:1","tags":null,"title":"Lec7-RISC-V Introduction","uri":"/lec7-risc-v-introduction/"},{"categories":["UCB-CS61C"],"content":"Immediate values（立即数） addi rd, rs1, 10 没有subi ，加上相反数即可 ","date":"2024-10-09","objectID":"/lec7-risc-v-introduction/:4:0","tags":null,"title":"Lec7-RISC-V Introduction","uri":"/lec7-risc-v-introduction/"},{"categories":["UCB-CS61C"],"content":"Register 0 ","date":"2024-10-09","objectID":"/lec7-risc-v-introduction/:4:1","tags":null,"title":"Lec7-RISC-V Introduction","uri":"/lec7-risc-v-introduction/"},{"categories":["UCB-CS61C"],"content":"RISC-V Instruction Formats I 事实上已经来到下一个层级(二进制)了，但是看标题似乎还是RISC-V 🤔 ","date":"2024-10-09","objectID":"/lec11-risc-v-instruction-formats-i/:0:0","tags":null,"title":"Lec11-RISC-V Instruction Formats I","uri":"/lec11-risc-v-instruction-formats-i/"},{"categories":["UCB-CS61C"],"content":"Background and Consequences ","date":"2024-10-09","objectID":"/lec11-risc-v-instruction-formats-i/:1:0","tags":null,"title":"Lec11-RISC-V Instruction Formats I","uri":"/lec11-risc-v-instruction-formats-i/"},{"categories":["UCB-CS61C"],"content":"1. addressing modes everything has a memory address, so branches and jumps can use them PC (program counter, again 😄) is a register that holds the address of the next instruction to be executed ","date":"2024-10-09","objectID":"/lec11-risc-v-instruction-formats-i/:1:1","tags":null,"title":"Lec11-RISC-V Instruction Formats I","uri":"/lec11-risc-v-instruction-formats-i/"},{"categories":["UCB-CS61C"],"content":"2. 二进制兼容否？如何表示指令？ 一个指令用1个word(32bits)来装绰绰有余 divide instruction into “fields” 😋 ","date":"2024-10-09","objectID":"/lec11-risc-v-instruction-formats-i/:1:2","tags":null,"title":"Lec11-RISC-V Instruction Formats I","uri":"/lec11-risc-v-instruction-formats-i/"},{"categories":["UCB-CS61C"],"content":"R-Format Layout 算数逻辑指令 funct3: 功能码，决定指令的操作类型 funct7: 扩展功能码，用于一些复杂的指令 opcode: 操作码，决定指令的类别 具体查表 new one: slt and sltu – set less than, when rs1 \u003c rs2, then set the destination register to 1, otherwise 0. sltu is similar but for unsigned numbers. sub \u0026 sra 0 1 00000 指示符号拓展 ","date":"2024-10-09","objectID":"/lec11-risc-v-instruction-formats-i/:2:0","tags":null,"title":"Lec11-RISC-V Instruction Formats I","uri":"/lec11-risc-v-instruction-formats-i/"},{"categories":["UCB-CS61C"],"content":"I-Format Layout funct3: 功能码，决定指令的操作类型，在这里只能指示8个，然而有9条指令 具体查表 new one: slti \u0026 sltiu – set less than immediate, when rs1 \u003c imm, then set the destination register to 1, otherwise 0. sltiu is similar but for unsigned numbers. shamt ? – shift amount , 5 bits, 过多溢出全为0 ","date":"2024-10-09","objectID":"/lec11-risc-v-instruction-formats-i/:3:0","tags":null,"title":"Lec11-RISC-V Instruction Formats I","uri":"/lec11-risc-v-instruction-formats-i/"},{"categories":["UCB-CS61C"],"content":"RV Loads 本质上是I-Format 具体查表 place in the lower part, and 符号拓展 ","date":"2024-10-09","objectID":"/lec11-risc-v-instruction-formats-i/:3:1","tags":null,"title":"Lec11-RISC-V Instruction Formats I","uri":"/lec11-risc-v-instruction-formats-i/"},{"categories":["UCB-CS61C"],"content":"S-Format Layout 十分丑陋划分32位 具体查表 ","date":"2024-10-09","objectID":"/lec11-risc-v-instruction-formats-i/:4:0","tags":null,"title":"Lec11-RISC-V Instruction Formats I","uri":"/lec11-risc-v-instruction-formats-i/"},{"categories":["UCB-CS61C"],"content":"RISC-V Procedures 调用函数的时候有一些无关的主进程变量的value需要存储，but where? ","date":"2024-10-08","objectID":"/lec10-risc-v-procedures/:0:0","tags":null,"title":"Lec10-RISC-V Procedures","uri":"/lec10-risc-v-procedures/"},{"categories":["UCB-CS61C"],"content":"栈帧 / Stack Frame 存放了什么？ 注意stack 从上往下增长，push sp–, pop sp++ ","date":"2024-10-08","objectID":"/lec10-risc-v-procedures/:1:0","tags":null,"title":"Lec10-RISC-V Procedures","uri":"/lec10-risc-v-procedures/"},{"categories":["UCB-CS61C"],"content":"序言prologue \u0026 结尾epilogue int Leaf (int g, int h, int i, int j) { int f; f = (g + h) - (i + j); return f; } Leaf: # 序言prologue addi sp, sp, -8 # 保存之前的栈指针 sw s1, 4(sp) # 保存参数 sw s2, 0(sp) # 计算 ... # 结尾epilogue lw s0, 0(sp) # 恢复参数 lw s1, 4(sp) # 恢复之前的栈指针 addi sp, sp, 8 # 释放栈空间 ret # jr ra ","date":"2024-10-08","objectID":"/lec10-risc-v-procedures/:1:1","tags":null,"title":"Lec10-RISC-V Procedures","uri":"/lec10-risc-v-procedures/"},{"categories":["UCB-CS61C"],"content":"Nested Function Calls and Registers Conventions 此时ra显然不够用，怎么记录好返回的地址呢？ 首先31个register要好好利用，怎么用,怎么存储需要的，放弃不需要的？ 尽可能避免使用内存memory，尽量使用寄存器register 两种register，preserved and not-preserved(into stack) 0-31全家福 😋 注意如果callee想要使用caller-saved register，需要先保存caller的register，然后再恢复callee的register ","date":"2024-10-08","objectID":"/lec10-risc-v-procedures/:2:0","tags":null,"title":"Lec10-RISC-V Procedures","uri":"/lec10-risc-v-procedures/"},{"categories":["UCB-CS61C"],"content":"Memory Allocation 内存级别的划分（之前的讲座提到过） 具体地址划分如下，有几个特殊的寄存器管理 ","date":"2024-10-08","objectID":"/lec10-risc-v-procedures/:3:0","tags":null,"title":"Lec10-RISC-V Procedures","uri":"/lec10-risc-v-procedures/"},{"categories":["UCB-CS61C"],"content":"Conclusion so far instructions ","date":"2024-10-08","objectID":"/lec10-risc-v-procedures/:4:0","tags":null,"title":"Lec10-RISC-V Procedures","uri":"/lec10-risc-v-procedures/"},{"categories":["UCB-CS61C"],"content":"RISC-V Decisions II ","date":"2024-10-08","objectID":"/lec9-risc-v-decisions-ii/:0:0","tags":null,"title":"Lec9-RISC-V Decisions II","uri":"/lec9-risc-v-decisions-ii/"},{"categories":["UCB-CS61C"],"content":"Logical Instruction ","date":"2024-10-08","objectID":"/lec9-risc-v-decisions-ii/:1:0","tags":null,"title":"Lec9-RISC-V Decisions II","uri":"/lec9-risc-v-decisions-ii/"},{"categories":["UCB-CS61C"],"content":"and, andi, not 2种对应变体 and: and x5, x6, x7 # x5 = x6 \u0026 x7 andi: andi x5, x6, 0x7 # x5 = x6 \u0026 0x7 # for masking 😋 or: or x5, x6, x7 # x5 = x6 | x7 xor: xor x5, x6, x7 # x5 = x6 ^ x7 Not not, xor with 111111…1111即可 ","date":"2024-10-08","objectID":"/lec9-risc-v-decisions-ii/:1:1","tags":null,"title":"Lec9-RISC-V Decisions II","uri":"/lec9-risc-v-decisions-ii/"},{"categories":["UCB-CS61C"],"content":"shift instructions logical shift arithmetic shift ","date":"2024-10-08","objectID":"/lec9-risc-v-decisions-ii/:1:2","tags":null,"title":"Lec9-RISC-V Decisions II","uri":"/lec9-risc-v-decisions-ii/"},{"categories":["UCB-CS61C"],"content":"A bit about machine programming PC: program counter (special register), 程序计数器 指向下一条指令的地址（next 4 byte / 1 word away） side note: symbolic name pseudo code ","date":"2024-10-08","objectID":"/lec9-risc-v-decisions-ii/:2:0","tags":null,"title":"Lec9-RISC-V Decisions II","uri":"/lec9-risc-v-decisions-ii/"},{"categories":["UCB-CS61C"],"content":"Function calls 6 steps to call a function: ","date":"2024-10-08","objectID":"/lec9-risc-v-decisions-ii/:3:0","tags":null,"title":"Lec9-RISC-V Decisions II","uri":"/lec9-risc-v-decisions-ii/"},{"categories":["UCB-CS61C"],"content":"conventions in RISC-V, all instructions are 32-bit long, and stored in memory just like any other data. so below we show the address of where the programs are stored in memory. 8个ar 1个ra 12个sr 新的jump: jr: jr ra (return from subroutine) 正是 ret 的具体实现 jalr : jalr rd, rs, imm jump and link register, 跳转到指定地址并保存返回地址到ra jal : jal FunctionLabel / jal rd, Label 事实上，没有jr，j j: jal x0, Label # 跳转到Label并保存返回地址到x0 ","date":"2024-10-08","objectID":"/lec9-risc-v-decisions-ii/:3:1","tags":null,"title":"Lec9-RISC-V Decisions II","uri":"/lec9-risc-v-decisions-ii/"},{"categories":["UCB-CS61C"],"content":"RISC-V lw, sw, Decision I ","date":"2024-10-08","objectID":"/lec8-risc-v-lw-sw-decision-i/:0:0","tags":null,"title":"Lec8-RISC-V lw, sw, Decision I","uri":"/lec8-risc-v-lw-sw-decision-i/"},{"categories":["UCB-CS61C"],"content":"Intro 编译器会最小化寄存器使用 ","date":"2024-10-08","objectID":"/lec8-risc-v-lw-sw-decision-i/:1:0","tags":null,"title":"Lec8-RISC-V lw, sw, Decision I","uri":"/lec8-risc-v-lw-sw-decision-i/"},{"categories":["UCB-CS61C"],"content":"layout in Memory side note: a register is a 32-bit register(hold 32-bit data) word: 4 bytes, 32 bits risc-v 小端法（主流） ","date":"2024-10-08","objectID":"/lec8-risc-v-lw-sw-decision-i/:2:0","tags":null,"title":"Lec8-RISC-V lw, sw, Decision I","uri":"/lec8-risc-v-lw-sw-decision-i/"},{"categories":["UCB-CS61C"],"content":"Data Transfer Instructions ","date":"2024-10-08","objectID":"/lec8-risc-v-lw-sw-decision-i/:3:0","tags":null,"title":"Lec8-RISC-V lw, sw, Decision I","uri":"/lec8-risc-v-lw-sw-decision-i/"},{"categories":["UCB-CS61C"],"content":"lw (load word) look note 🤔 ","date":"2024-10-08","objectID":"/lec8-risc-v-lw-sw-decision-i/:3:1","tags":null,"title":"Lec8-RISC-V lw, sw, Decision I","uri":"/lec8-risc-v-lw-sw-decision-i/"},{"categories":["UCB-CS61C"],"content":"sw (store word) 结合lec7的模式图来记忆 ","date":"2024-10-08","objectID":"/lec8-risc-v-lw-sw-decision-i/:3:2","tags":null,"title":"Lec8-RISC-V lw, sw, Decision I","uri":"/lec8-risc-v-lw-sw-decision-i/"},{"categories":["UCB-CS61C"],"content":"lb/sb (load byte/store byte) same as lw/sw lb 符号扩展 lbu: load byte unsigned ","date":"2024-10-08","objectID":"/lec8-risc-v-lw-sw-decision-i/:3:3","tags":null,"title":"Lec8-RISC-V lw, sw, Decision I","uri":"/lec8-risc-v-lw-sw-decision-i/"},{"categories":["UCB-CS61C"],"content":"why still addi? 更快 但是imm的范围更小 (32bit以内) ","date":"2024-10-08","objectID":"/lec8-risc-v-lw-sw-decision-i/:3:4","tags":null,"title":"Lec8-RISC-V lw, sw, Decision I","uri":"/lec8-risc-v-lw-sw-decision-i/"},{"categories":["UCB-CS61C"],"content":"Decision I RV32 so far 😋 add rd, rs1, rs2 sub rd, rs1, rs2 addi rd, rs1, imm lw rd, imm(rs1) sw rs2, imm(rs1) lb rd, imm(rs1) sb rs2, imm(rs1) lbu rd, imm(rs1) ","date":"2024-10-08","objectID":"/lec8-risc-v-lw-sw-decision-i/:4:0","tags":null,"title":"Lec8-RISC-V lw, sw, Decision I","uri":"/lec8-risc-v-lw-sw-decision-i/"},{"categories":["UCB-CS61C"],"content":"beq/bne (branch if equal/not equal) ","date":"2024-10-08","objectID":"/lec8-risc-v-lw-sw-decision-i/:4:1","tags":null,"title":"Lec8-RISC-V lw, sw, Decision I","uri":"/lec8-risc-v-lw-sw-decision-i/"},{"categories":["UCB-CS61C"],"content":"Decision in RISC-V Assembly beq: branch if equal bne: branch if not equal blt: branch if less than blt reg1, reg2, label # if (reg1 \u003c reg2) goto label bge: branch if greater than or equal bltu: branch if unsigned less than bltu reg1, reg2, label # if (reg1 \u003c reg2) goto label bgeu: branch if unsigned greater than or equal j: jump/always branch j label # 无条件jump的范围比有条件jump构造出来的无条件jump更大（32位限制） 没有：bgt or ble, only have BLT（培根生菜番茄） sandwiches 注意“流”, 多数情况下条件似乎是翻着来翻译的 注意“j Exit” ","date":"2024-10-08","objectID":"/lec8-risc-v-lw-sw-decision-i/:5:0","tags":null,"title":"Lec8-RISC-V lw, sw, Decision I","uri":"/lec8-risc-v-lw-sw-decision-i/"},{"categories":["UCB-CS61C"],"content":"loops in C/Assembly ","date":"2024-10-08","objectID":"/lec8-risc-v-lw-sw-decision-i/:5:1","tags":null,"title":"Lec8-RISC-V lw, sw, Decision I","uri":"/lec8-risc-v-lw-sw-decision-i/"},{"categories":["UCB-CS61C"],"content":"C intro: Pointers, Arrays, Strings ","date":"2024-10-05","objectID":"/lec4-c-intropointers-arrays-strings/:0:0","tags":null,"title":"Lec4-C intro：Pointers, Arrays, Strings","uri":"/lec4-c-intropointers-arrays-strings/"},{"categories":["UCB-CS61C"],"content":"Pointers int (*fn) (void *, void *) = \u0026foo; // pointer to function arrow operator -\u003e is used to access members of a struct pointed to by a pointer. NULL pointer is used to indicate an invalid pointer. if (p == NULL) { // handle error } 谈到了地址对齐 -\u003e word alignment sizeof(arg) sizeof(structtype) ","date":"2024-10-05","objectID":"/lec4-c-intropointers-arrays-strings/:1:0","tags":null,"title":"Lec4-C intro：Pointers, Arrays, Strings","uri":"/lec4-c-intropointers-arrays-strings/"},{"categories":["UCB-CS61C"],"content":"Arrays 经典问题之数组名是指针 char *foo() { char arr[10]; return arr; // A BIG mistake! 函数栈回收时，arr指针指向的空间可能被释放掉了，导致程序崩溃 } ","date":"2024-10-05","objectID":"/lec4-c-intropointers-arrays-strings/:2:0","tags":null,"title":"Lec4-C intro：Pointers, Arrays, Strings","uri":"/lec4-c-intropointers-arrays-strings/"},{"categories":["UCB-CS61C"],"content":"Strings always end with a null character \\0 😉 Segmentation fault :s 或许rust可能更安全 ","date":"2024-10-05","objectID":"/lec4-c-intropointers-arrays-strings/:3:0","tags":null,"title":"Lec4-C intro：Pointers, Arrays, Strings","uri":"/lec4-c-intropointers-arrays-strings/"},{"categories":["UCB-CS61C"],"content":"Summary void incrementPtr(int *p) { p += 1; // wrong again! have to ... } void incrementPtr(int **p) { (*p) += 1; // correct } 注意引用传递即可 ","date":"2024-10-05","objectID":"/lec4-c-intropointers-arrays-strings/:4:0","tags":null,"title":"Lec4-C intro：Pointers, Arrays, Strings","uri":"/lec4-c-intropointers-arrays-strings/"},{"categories":["UCB-CS61C"],"content":"Great Ideas in Computer Architecture Intro ","date":"2024-10-05","objectID":"/lec1-great-ideas-in-computer-architecture-intro/:0:0","tags":null,"title":"Lec1-Great Ideas in Computer Architecture Intro","uri":"/lec1-great-ideas-in-computer-architecture-intro/"},{"categories":["UCB-CS61C"],"content":"six great ideas Moore’s Law Abstraction Principle of Locality / Memory Hierarchy Parallelism Performance Measurement \u0026 Improvement Dependability via Redundancy 😉 ","date":"2024-10-05","objectID":"/lec1-great-ideas-in-computer-architecture-intro/:1:0","tags":null,"title":"Lec1-Great Ideas in Computer Architecture Intro","uri":"/lec1-great-ideas-in-computer-architecture-intro/"},{"categories":["UCB-CS61C"],"content":"Number Representation ","date":"2024-10-05","objectID":"/lec2-number-representation/:0:0","tags":null,"title":"Lec2-Number Representation","uri":"/lec2-number-representation/"},{"categories":["UCB-CS61C"],"content":"Summary 前两个编码方式不常用 后三个无符号数 / 2的补码 / biased representation 比较常见 ","date":"2024-10-05","objectID":"/lec2-number-representation/:1:0","tags":null,"title":"Lec2-Number Representation","uri":"/lec2-number-representation/"},{"categories":["UCB-CS61C"],"content":"C intro: Basic ","date":"2024-10-05","objectID":"/lec3-c-introbasic/:0:0","tags":null,"title":"Lec3-C intro：Basic","uri":"/lec3-c-introbasic/"},{"categories":["UCB-CS61C"],"content":"Compile vs Interpret Java 是先编译后解释器解释 C 是编译完成后直接运行，不需要解释器 ","date":"2024-10-05","objectID":"/lec3-c-introbasic/:1:0","tags":null,"title":"Lec3-C intro：Basic","uri":"/lec3-c-introbasic/"},{"categories":["UCB-CS61C"],"content":"Syntax int8_t a = 10; int64_t b = 20; int16_t c = a + b; uint32_t d = a - b; typedef uint8_t Byte; typedef struct { Byte a; int b; } MyStruct; MyStruct myStruct = {10, 20}; ","date":"2024-10-05","objectID":"/lec3-c-introbasic/:2:0","tags":null,"title":"Lec3-C intro：Basic","uri":"/lec3-c-introbasic/"},{"categories":["CMU-10-414-714"],"content":"Hardware Acceleration Implementation ","date":"2024-10-01","objectID":"/lec13-hardware-acceleration-implementation/:0:0","tags":null,"title":"Lec13-Hardware Acceleration Implementation","uri":"/lec13-hardware-acceleration-implementation/"},{"categories":["CMU-10-414-714"],"content":"GPU Acceleration ","date":"2024-10-01","objectID":"/lec12-hardware-acceleration--gpus/:0:0","tags":null,"title":"Lec12-Hardware Acceleration + GPUs","uri":"/lec12-hardware-acceleration--gpus/"},{"categories":["CMU-10-414-714"],"content":"GPU Programming gpu 具有良好的并行性 ","date":"2024-10-01","objectID":"/lec12-hardware-acceleration--gpus/:1:0","tags":null,"title":"Lec12-Hardware Acceleration + GPUs","uri":"/lec12-hardware-acceleration--gpus/"},{"categories":["CMU-10-414-714"],"content":"a single CUDA example 注意到计算所需变量互不相关，所以可以并行计算 数据IO操作是瓶颈 keep data in GPU memory as long as possible –\u003e call .numpy() less frequently ","date":"2024-10-01","objectID":"/lec12-hardware-acceleration--gpus/:1:1","tags":null,"title":"Lec12-Hardware Acceleration + GPUs","uri":"/lec12-hardware-acceleration--gpus/"},{"categories":["CMU-10-414-714"],"content":"GPU memory hierarchy 利用shared memory launch thread grid and blocks cooperative fetch common to shared memory to increase reuse ","date":"2024-10-01","objectID":"/lec12-hardware-acceleration--gpus/:1:2","tags":null,"title":"Lec12-Hardware Acceleration + GPUs","uri":"/lec12-hardware-acceleration--gpus/"},{"categories":["CMU-10-414-714"],"content":"case study: matrix multiplication on GPU Compute C = dot(A.T, B) ","date":"2024-10-01","objectID":"/lec12-hardware-acceleration--gpus/:2:0","tags":null,"title":"Lec12-Hardware Acceleration + GPUs","uri":"/lec12-hardware-acceleration--gpus/"},{"categories":["CMU-10-414-714"],"content":"thread level __global__ void mm(float A[N][N], float B[N][N], float C[N][N]) { int ybase = blockIdx.y * blockDim.y + threadIdx.y; int xbase = blockIdx.x * blockDim.x + threadIdx.x; float c[V][V] = {0}; float a[V], b[V]; for (int k = 0; k \u003c N; k++) { a[:] = A[k, ybase*V : ybase*V+V]; b[:] = B[k, xbase*V : xbase*V+V]; for (int y = 0; y \u003c V; y++) { for (int x = 0; x \u003c V; x++) { c[y][x] += a[y] * b[x]; } } } C[ybase*V : ybase*V+V, xbase*V : xbase*V+V] = c[:]; } ","date":"2024-10-01","objectID":"/lec12-hardware-acceleration--gpus/:2:1","tags":null,"title":"Lec12-Hardware Acceleration + GPUs","uri":"/lec12-hardware-acceleration--gpus/"},{"categories":["CMU-10-414-714"],"content":"block level: shared memory tiling 🤯 吃了没有完全学习好架构体系的亏! 多线程使得计算和加载数据同时进行 合作fetching也有意思捏 ","date":"2024-10-01","objectID":"/lec12-hardware-acceleration--gpus/:2:2","tags":null,"title":"Lec12-Hardware Acceleration + GPUs","uri":"/lec12-hardware-acceleration--gpus/"},{"categories":["CMU-10-414-714"],"content":"More… ","date":"2024-10-01","objectID":"/lec12-hardware-acceleration--gpus/:2:3","tags":null,"title":"Lec12-Hardware Acceleration + GPUs","uri":"/lec12-hardware-acceleration--gpus/"},{"categories":["CMU-10-414-714"],"content":"Hardware Acceleration!! ","date":"2024-10-01","objectID":"/lec11-hardware-acceleration-for-linear-algebra/:0:0","tags":null,"title":"Lec11-Hardware Acceleration for Linear Algebra","uri":"/lec11-hardware-acceleration-for-linear-algebra/"},{"categories":["CMU-10-414-714"],"content":"General acceleration techniques ","date":"2024-10-01","objectID":"/lec11-hardware-acceleration-for-linear-algebra/:1:0","tags":null,"title":"Lec11-Hardware Acceleration for Linear Algebra","uri":"/lec11-hardware-acceleration-for-linear-algebra/"},{"categories":["CMU-10-414-714"],"content":"Vectorization NumPy的向量化是通过底层的C语言以及编译过的函数实现的，其核心机制依赖于几个关键技术： 内存连续存储：NumPy数组在内存中是连续存储的，这意味着数据存储在连续的内存块中，这使得CPU缓存能更有效地工作。相比之下，Python列表中的元素可能在内存中是分散存储的。 C语言实现：NumPy的底层操作是用C语言编写的，这意味着NumPy的数组操作是在编译后的代码中执行的，而不是在Python解释器中。C语言的执行速度比Python快得多。 统一函数接口：NumPy定义了一种特殊的函数接口，称为ufunc（Universal Function），这种函数可以对数组的每个元素执行向量化操作。 并行计算：在某些情况下，NumPy还可以使用并行计算来进一步提高性能，如使用BLAS（Basic Linear Algebra Subprograms）库进行矩阵计算。 数据类型一致性：NumPy数组中的所有元素都是相同的数据类型，这使得可以对数组进行批量操作。 减少函数调用开销：在向量化操作中，函数调用是批量进行的，而不是在每个元素上单独调用，这减少了函数调用的开销。 优化的数学运算：NumPy中很多操作都经过了优化，比如使用SIMD（单指令多数据）指令集，这些指令可以在一个CPU周期内对多个数据执行相同的操作。 通过这些技术，NumPy实现了高效的向量化操作。当你使用向量化表达式时，NumPy会将这些操作转换为底层的C语言调用，从而实现快速的数组计算。 ","date":"2024-10-01","objectID":"/lec11-hardware-acceleration-for-linear-algebra/:1:1","tags":null,"title":"Lec11-Hardware Acceleration for Linear Algebra","uri":"/lec11-hardware-acceleration-for-linear-algebra/"},{"categories":["CMU-10-414-714"],"content":"Data layout and strides row major: default in C column major: Fortran… strides format: common in linalg libraries strides format使得数组存储并不紧密，难以vectorize，所以在torch等库里面有一个函数叫contiguous()来将数组变成连续存储的，有利于计算 ","date":"2024-10-01","objectID":"/lec11-hardware-acceleration-for-linear-algebra/:1:2","tags":null,"title":"Lec11-Hardware Acceleration for Linear Algebra","uri":"/lec11-hardware-acceleration-for-linear-algebra/"},{"categories":["CMU-10-414-714"],"content":"Parallelization OpenMP: multi-threading, loops分配给不同的cpu来做 ","date":"2024-10-01","objectID":"/lec11-hardware-acceleration-for-linear-algebra/:1:3","tags":null,"title":"Lec11-Hardware Acceleration for Linear Algebra","uri":"/lec11-hardware-acceleration-for-linear-algebra/"},{"categories":["CMU-10-414-714"],"content":"case study: matrix multiplication // c = dot(a, b) float A[N][N], B[N][N], C[N][N]; for (int i = 0; i \u003c N; i++) { for (int j = 0; j \u003c N; j++) { C[i][j] = 0; for (int k = 0; k \u003c N; k++) { C[i][j] += A[i][k] * B[k][j]; } } } 时间复杂度：$O(N^3)$ ","date":"2024-10-01","objectID":"/lec11-hardware-acceleration-for-linear-algebra/:2:0","tags":null,"title":"Lec11-Hardware Acceleration for Linear Algebra","uri":"/lec11-hardware-acceleration-for-linear-algebra/"},{"categories":["CMU-10-414-714"],"content":"cpu architecture aware analysis naive implementation // c = dot(a, b) dram float A[N][N], B[N][N], C[N][N]; for (int i = 0; i \u003c N; i++) { for (int j = 0; j \u003c N; j++) { register float c = 0; for (int k = 0; k \u003c N; k++) { register float a = A[i][k]; register float b = B[k][j]; c += a * b; } C[i][j] = c; } } naive分析 register tiled matrix multiplication side note: $$ \\frac{n}{v_1} \\times \\frac{n}{v_2} \\times \\frac{n}{v_3} \\times v_1 \\times v_3 = \\frac{n^3}{v_2} $$ let $v_3 = 1$ cache line aware tiling 在一级缓存中存数据，注意限制 all in one l1speed: l1 -\u003e register dram speed: dram -\u003e l1cache key insight: memory load reuse ","date":"2024-10-01","objectID":"/lec11-hardware-acceleration-for-linear-algebra/:2:1","tags":null,"title":"Lec11-Hardware Acceleration for Linear Algebra","uri":"/lec11-hardware-acceleration-for-linear-algebra/"},{"categories":["CMU-10-414-714"],"content":"Convolutional Neural Networks 老朋友了 “capture the features” ","date":"2024-10-01","objectID":"/lec10-convolutional-networks/:0:0","tags":null,"title":"Lec10-Convolutional Networks","uri":"/lec10-convolutional-networks/"},{"categories":["CMU-10-414-714"],"content":"Convolutional Operator 事实上的计算，是信号处理里面的互相关运算 传统卷积处理 多通道卷积新视角🤓 ","date":"2024-10-01","objectID":"/lec10-convolutional-networks/:1:0","tags":null,"title":"Lec10-Convolutional Networks","uri":"/lec10-convolutional-networks/"},{"categories":["CMU-10-414-714"],"content":"Elements of practical convolution ","date":"2024-10-01","objectID":"/lec10-convolutional-networks/:2:0","tags":null,"title":"Lec10-Convolutional Networks","uri":"/lec10-convolutional-networks/"},{"categories":["CMU-10-414-714"],"content":"Padding 为了维持尺寸不变 ","date":"2024-10-01","objectID":"/lec10-convolutional-networks/:2:1","tags":null,"title":"Lec10-Convolutional Networks","uri":"/lec10-convolutional-networks/"},{"categories":["CMU-10-414-714"],"content":"Strides Convolution / Pooling 降低resolution，“downsampling” 🤓 ","date":"2024-10-01","objectID":"/lec10-convolutional-networks/:2:2","tags":null,"title":"Lec10-Convolutional Networks","uri":"/lec10-convolutional-networks/"},{"categories":["CMU-10-414-714"],"content":"Grouped Convolution! 分组卷积，可以提高计算效率 ","date":"2024-10-01","objectID":"/lec10-convolutional-networks/:2:3","tags":null,"title":"Lec10-Convolutional Networks","uri":"/lec10-convolutional-networks/"},{"categories":["CMU-10-414-714"],"content":"Dilations Convolution 负责处理感受野的问题 ","date":"2024-10-01","objectID":"/lec10-convolutional-networks/:2:4","tags":null,"title":"Lec10-Convolutional Networks","uri":"/lec10-convolutional-networks/"},{"categories":["CMU-10-414-714"],"content":"Differentiating Convolutional Layers!! Naive way: just matrix and vector multiplication products 🤔, but can lead to too much waste memory… Be an op in needle, not a module! ","date":"2024-10-01","objectID":"/lec10-convolutional-networks/:3:0","tags":null,"title":"Lec10-Convolutional Networks","uri":"/lec10-convolutional-networks/"},{"categories":["CMU-10-414-714"],"content":"wrt. Input 首先有 $v^TW \\iff W^Tv$ 自动微分链式法则的时候 事实上卷积可以有个等价的矩阵表示 然后写出来，发现等价于$conv(v, flip(W))$ 🤯 ","date":"2024-10-01","objectID":"/lec10-convolutional-networks/:3:1","tags":null,"title":"Lec10-Convolutional Networks","uri":"/lec10-convolutional-networks/"},{"categories":["CMU-10-414-714"],"content":"wrt. Weights “im2col\"操作十分有趣!在这里我们直接显式构造黑色的矩阵，一方面用来计算卷积，另一方面用来计算梯度😎 ","date":"2024-10-01","objectID":"/lec10-convolutional-networks/:3:2","tags":null,"title":"Lec10-Convolutional Networks","uri":"/lec10-convolutional-networks/"},{"categories":["CMU-10-414-714"],"content":"Normalization and Regularization ","date":"2024-09-28","objectID":"/lec9-normalization-dropout--implementation/:0:0","tags":null,"title":"Lec9-Normalization, Dropout, + Implementation","uri":"/lec9-normalization-dropout--implementation/"},{"categories":["CMU-10-414-714"],"content":"Normalization and Initialization 注意看weight variance的曲线，几乎不变 norm的思想来源 layer normalization batch normalization 这么看来batch_norm确实很奇怪, odd! 😢 ","date":"2024-09-28","objectID":"/lec9-normalization-dropout--implementation/:1:0","tags":null,"title":"Lec9-Normalization, Dropout, + Implementation","uri":"/lec9-normalization-dropout--implementation/"},{"categories":["CMU-10-414-714"],"content":"Regularization ","date":"2024-09-28","objectID":"/lec9-normalization-dropout--implementation/:2:0","tags":null,"title":"Lec9-Normalization, Dropout, + Implementation","uri":"/lec9-normalization-dropout--implementation/"},{"categories":["CMU-10-414-714"],"content":"L2 Regularization 针对的是过拟合?但是只要是减少function class的操作都是regularization的一种 然后发现weight decay和regularization有联系！ ","date":"2024-09-28","objectID":"/lec9-normalization-dropout--implementation/:2:1","tags":null,"title":"Lec9-Normalization, Dropout, + Implementation","uri":"/lec9-normalization-dropout--implementation/"},{"categories":["CMU-10-414-714"],"content":"dropout ","date":"2024-09-28","objectID":"/lec9-normalization-dropout--implementation/:2:2","tags":null,"title":"Lec9-Normalization, Dropout, + Implementation","uri":"/lec9-normalization-dropout--implementation/"},{"categories":["CMU-10-414-714"],"content":"Neural Networks lib implementation ","date":"2024-09-28","objectID":"/lec8-nn-library-implementation/:0:0","tags":null,"title":"Lec8-NN Library Implementation","uri":"/lec8-nn-library-implementation/"},{"categories":["CMU-10-414-714"],"content":"refreshment import needle as ndl def data(self): return self.detach() data 不要grad ","date":"2024-09-28","objectID":"/lec8-nn-library-implementation/:1:0","tags":null,"title":"Lec8-NN Library Implementation","uri":"/lec8-nn-library-implementation/"},{"categories":["CMU-10-414-714"],"content":"numerical stability 软回归数值不变性，上下同除 def softmax(x): x = x - np.max(x) z = np.exp(x) return z / np.sum(z) ","date":"2024-09-28","objectID":"/lec8-nn-library-implementation/:2:0","tags":null,"title":"Lec8-NN Library Implementation","uri":"/lec8-nn-library-implementation/"},{"categories":["CMU-10-414-714"],"content":"nn.Module ","date":"2024-09-28","objectID":"/lec8-nn-library-implementation/:3:0","tags":null,"title":"Lec8-NN Library Implementation","uri":"/lec8-nn-library-implementation/"},{"categories":["CMU-10-414-714"],"content":"参数 class Parameter(ndl.Tensor): def __init__(self, data: np.ndarray, requires_grad=True, dtype=\"float32\"): super().__init__(data, requires_grad=requires_grad, dtype=dtype) w = Parameter([2, 1], dtype=\"float32\") isinstance(w, Parameter) # True # recursive function to get all parameters def _get_params(value: ndl.Tensor)-\u003eList[Parameter]: if isinstance(value, Parameter): return [value] elif isinstance(value, dict): result = [] for k, v in value.items(): result += _get_params(v) return result if isinstance(value, Module): return value.parameters() class Module: def parameters(self)-\u003eList[Parameter]: return _get_params(self.__dict__) # dict -\u003e self's attributes, will be recursively searched for Parameter instances def __call__(self, *args, **kwargs): return self.forward(*args, **kwargs) class ScalarAdd(Module): def __init__(self, init_s=1, init_b=0): self.s = Parameter([init_s], dtype=\"float32\") self.b = Parameter([init_b], dtype=\"float32\") def forward(self, x): return self.s * x + self.b 返回的是一个包含参数的列表 以上是无参数的层 ","date":"2024-09-28","objectID":"/lec8-nn-library-implementation/:3:1","tags":null,"title":"Lec8-NN Library Implementation","uri":"/lec8-nn-library-implementation/"},{"categories":["CMU-10-414-714"],"content":"Optimizer 用data原地更新参数 ","date":"2024-09-28","objectID":"/lec8-nn-library-implementation/:4:0","tags":null,"title":"Lec8-NN Library Implementation","uri":"/lec8-nn-library-implementation/"},{"categories":["CMU-10-414-714"],"content":"Neural Networks Abstraction ","date":"2024-09-28","objectID":"/lec7-neural-network-library-abstractions/:0:0","tags":null,"title":"Lec7-Neural Network Library Abstractions","uri":"/lec7-neural-network-library-abstractions/"},{"categories":["CMU-10-414-714"],"content":"Programming Abstraction 核心思想是host language是一个语言，但是执行计算图的时候可以用其他语言来优化 和sql \u0026 RDBMS有点相似 🤔 ","date":"2024-09-28","objectID":"/lec7-neural-network-library-abstractions/:1:0","tags":null,"title":"Lec7-Neural Network Library Abstractions","uri":"/lec7-neural-network-library-abstractions/"},{"categories":["CMU-10-414-714"],"content":"declarative 这应该比较自然的想法，from google “scalable computational systems” 描述图 ==\u003e 指定运行机器 ==\u003e 运行 ==\u003e 结果 ","date":"2024-09-28","objectID":"/lec7-neural-network-library-abstractions/:1:1","tags":null,"title":"Lec7-Neural Network Library Abstractions","uri":"/lec7-neural-network-library-abstractions/"},{"categories":["CMU-10-414-714"],"content":"imperative define and run 对融合算子友好 指定特定值有上面declarative的同样效果 ","date":"2024-09-28","objectID":"/lec7-neural-network-library-abstractions/:1:2","tags":null,"title":"Lec7-Neural Network Library Abstractions","uri":"/lec7-neural-network-library-abstractions/"},{"categories":["CMU-10-414-714"],"content":"High level modular lib components 经典三明治 loss function is a special case of a “module” 正则化: 要么是损失函数的一部分，要么是优化器的一部分 初始化: 包含在nn.Module中 ","date":"2024-09-28","objectID":"/lec7-neural-network-library-abstractions/:2:0","tags":null,"title":"Lec7-Neural Network Library Abstractions","uri":"/lec7-neural-network-library-abstractions/"},{"categories":["CMU-10-414-714"],"content":"总结 ","date":"2024-09-28","objectID":"/lec7-neural-network-library-abstractions/:3:0","tags":null,"title":"Lec7-Neural Network Library Abstractions","uri":"/lec7-neural-network-library-abstractions/"},{"categories":["CMU-10-414-714"],"content":"fcnn, optimization, and initialization ","date":"2024-09-28","objectID":"/lec6-optimization/:0:0","tags":null,"title":"Lec6-Optimization","uri":"/lec6-optimization/"},{"categories":["CMU-10-414-714"],"content":"fcnn ","date":"2024-09-28","objectID":"/lec6-optimization/:1:0","tags":null,"title":"Lec6-Optimization","uri":"/lec6-optimization/"},{"categories":["CMU-10-414-714"],"content":"optimization ","date":"2024-09-28","objectID":"/lec6-optimization/:2:0","tags":null,"title":"Lec6-Optimization","uri":"/lec6-optimization/"},{"categories":["CMU-10-414-714"],"content":"initialization ","date":"2024-09-28","objectID":"/lec6-optimization/:3:0","tags":null,"title":"Lec6-Optimization","uri":"/lec6-optimization/"},{"categories":["CMU-10-414-714"],"content":"kaiming initialization 感觉这节课比较有用的是这张ppt，我更喜欢从实验的角度来看kaiming initialization（避免梯度爆炸/消失） ","date":"2024-09-28","objectID":"/lec6-optimization/:3:1","tags":null,"title":"Lec6-Optimization","uri":"/lec6-optimization/"},{"categories":["UMich-EECS-498"],"content":"Linear Classifiers ","date":"2024-09-23","objectID":"/l3-linear-classifiers/:0:0","tags":null,"title":"L3-linear classifiers","uri":"/l3-linear-classifiers/"},{"categories":["UMich-EECS-498"],"content":"Viewpoints of Linear Classifiers ","date":"2024-09-23","objectID":"/l3-linear-classifiers/:1:0","tags":null,"title":"L3-linear classifiers","uri":"/l3-linear-classifiers/"},{"categories":["UMich-EECS-498"],"content":"hard cases of linear classifiers ","date":"2024-09-23","objectID":"/l3-linear-classifiers/:2:0","tags":null,"title":"L3-linear classifiers","uri":"/l3-linear-classifiers/"},{"categories":["UMich-EECS-498"],"content":"hinge loss hinge loss is a loss function, linear and zeros-in-margin 感觉是一个有意思的线性损失函数，但是目前作用不大 SVM loss 对损失函数初始化估值可以初步验证是否由bug ","date":"2024-09-23","objectID":"/l3-linear-classifiers/:3:0","tags":null,"title":"L3-linear classifiers","uri":"/l3-linear-classifiers/"},{"categories":["UMich-EECS-498"],"content":"Regularization 从线性模型的角度看，添加常数因子效果不变，但是权重矩阵的范数会变化 由上可知不唯一，所以需要对权重矩阵进行约束，常用的约束方式是正则化 一种新的引入正则化项的思路 🤔 ===\u003e express our preference or 先验的知识点 余下两种观点：防止过拟合 ","date":"2024-09-23","objectID":"/l3-linear-classifiers/:4:0","tags":null,"title":"L3-linear classifiers","uri":"/l3-linear-classifiers/"},{"categories":["UMich-EECS-498"],"content":"重新理解L1 / L2正则化 L1正则化 : 倾向于权重集中 L2正则化 : 倾向于权重均匀 ","date":"2024-09-23","objectID":"/l3-linear-classifiers/:4:1","tags":null,"title":"L3-linear classifiers","uri":"/l3-linear-classifiers/"},{"categories":["UMich-EECS-498"],"content":"Lecture 2: Image Classification ","date":"2024-09-23","objectID":"/l2-image-classification/:0:0","tags":null,"title":"L2-image classification","uri":"/l2-image-classification/"},{"categories":["UMich-EECS-498"],"content":"Introduction Image classification is the task of assigning a label… can be a building-block for many applications ","date":"2024-09-23","objectID":"/l2-image-classification/:1:0","tags":null,"title":"L2-image classification","uri":"/l2-image-classification/"},{"categories":["UMich-EECS-498"],"content":"More robust, data-driven approaches ","date":"2024-09-23","objectID":"/l2-image-classification/:2:0","tags":null,"title":"L2-image classification","uri":"/l2-image-classification/"},{"categories":["UMich-EECS-498"],"content":"Understanding the dataset 简单介绍一下类似于MNIST, CIFAR-100等数据集的基本结构 提出Omniglot数据集的概念 few-shot learning ","date":"2024-09-23","objectID":"/l2-image-classification/:2:1","tags":null,"title":"L2-image classification","uri":"/l2-image-classification/"},{"categories":["UMich-EECS-498"],"content":"Choosing a model Nearest Neighbor find the distance metric between the test image and all the training images memorize the training images and their corresponding labels predict the label of the test image based on the nearest training image With N examples… training time: O(1) or O(N), depending on the copying strategy testing time: O(N) there are more knn… see here 决策边界平滑化 more neighboring examples， k 🆙 change the metric ","date":"2024-09-23","objectID":"/l2-image-classification/:2:2","tags":null,"title":"L2-image classification","uri":"/l2-image-classification/"},{"categories":["UMich-EECS-498"],"content":"Evaluating the model 详见DATA-100课程 train / validation / test set的划分 \u0026 k-fold cross-validation的介绍 ","date":"2024-09-23","objectID":"/l2-image-classification/:2:3","tags":null,"title":"L2-image classification","uri":"/l2-image-classification/"},{"categories":["UMich-EECS-498"],"content":"通用近似定理 knn可以拟合任意的连续函数 ","date":"2024-09-23","objectID":"/l2-image-classification/:3:0","tags":null,"title":"L2-image classification","uri":"/l2-image-classification/"},{"categories":["UMich-EECS-498"],"content":"维度灾难 ","date":"2024-09-23","objectID":"/l2-image-classification/:4:0","tags":null,"title":"L2-image classification","uri":"/l2-image-classification/"},{"categories":["UMich-EECS-498"],"content":"总结 ","date":"2024-09-23","objectID":"/l2-image-classification/:5:0","tags":null,"title":"L2-image classification","uri":"/l2-image-classification/"},{"categories":["CMU-10-414-714"],"content":"Auto Differentiation Implementation ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:0:0","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"Basic Knowledge ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:1:0","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"OOP in Python class call method 在Python中，__call__方法是一个特殊的方法，它允许一个类的实例表现得像一个函数。当你定义了一个类，并在该类中实现了__call__方法，你就可以通过直接调用实例来执行这个方法，就像调用一个函数一样。 这里是一个简单的例子来说明__call__方法的用法： class Greeter: def __init__(self, name): self.name = name def __call__(self): return f\"Hello, {self.name}!\" # 创建Greeter类的实例 greeter = Greeter(\"Kimi\") # 调用实例，就像它是一个函数 print(greeter()) # 输出: Hello, Kimi! 在这个例子中，Greeter类有一个__init__方法来初始化实例，还有一个__call__方法来定义当实例被调用时应该执行的操作。当我们创建了一个Greeter的实例并调用它时，实际上是调用了__call__方法，它返回了一个问候语。 __call__方法通常用于创建可调用的对象，这在某些设计模式中非常有用，比如工厂模式、单例模式等。此外，它也常用于装饰器中，允许装饰器返回的对象能够被调用。 new method 在Python中，__new__方法是一个特殊的静态方法，用于创建一个类的新实例。它是在__init__方法之前被调用的，并且是创建对象实例的第一个步骤。__new__方法主要负责创建一个对象，而__init__方法则用于初始化这个对象。 __new__方法通常用于以下情况： 继承不可变类型：比如元组、字符串等，它们是不可变的，不能使用__init__进行初始化，因为它们在创建时就已经完成了初始化。在这种情况下，可以通过重写__new__方法来创建新的实例。 控制实例的创建：在某些情况下，你可能想要控制对象的创建过程，比如单例模式，或者在创建对象时进行一些特殊的处理。 继承自内置类型：当你想要继承自Python的内置类型时，你需要重写__new__方法来创建实例，因为内置类型通常不提供__init__方法。 __new__方法的基本语法如下： class MyClass(metaclass=type): def __new__(cls, *args, **kwargs): # 创建实例的代码 instance = super(MyClass, cls).__new__(cls) # 可以在这里进行一些初始化操作 return instance 在这个例子中，__new__方法首先调用super()来创建类的实例，然后可以进行一些额外的操作，最后返回这个实例。注意，__new__方法必须返回一个实例对象。 这里是一个简单的例子，展示了如何使用__new__方法： class Singleton: _instance = None def __new__(cls, *args, **kwargs): if not cls._instance: cls._instance = super(Singleton, cls).__new__(cls) return cls._instance # 测试单例模式 s1 = Singleton() s2 = Singleton() print(s1 is s2) # 输出 True，说明s1和s2是同一个实例 在这个例子中，Singleton类通过重写__new__方法实现了单例模式，确保了全局只有一个实例。 ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:1:1","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"Data Structure in NEEDLE Lazy or Eager Evaluation 自动微分的lazy（惰性）模式和eager（急切）模式是深度学习框架中处理计算图的两种不同方式。它们各有优劣，适用于不同的场景。 Lazy模式： 优点： 灵活性高，可以动态地构建计算图，支持条件分支和循环等控制流结构。 调试友好，因为操作是按需执行的，所以可以使用传统的Python调试工具。 适合于研究和开发阶段，因为可以即时看到每个操作的效果。 缺点： 性能可能不如eager模式，因为它不支持一些优化，如操作融合。 内存消耗可能更高，因为不会进行一些优化来减少内存使用。 Eager模式： 优点： 性能通常更好，因为它允许在执行前对计算图进行优化，如操作融合和常量折叠。 可以减少运行时的内存消耗，因为优化后的计算图可能更高效。 适合于生产环境，因为它提供了更快的执行速度。 缺点： 灵活性较低，不支持动态图结构，因为计算图是在运行前构建的。 调试可能不如lazy模式方便，因为需要考虑计算图的结构。 在实际应用中，选择哪种模式取决于具体的需求。例如，PyTorch默认使用eager模式，因为它的动态性和易用性适合于研究和开发。而TensorFlow在早期版本中使用静态图，但后来引入了eager execution来提供更灵活的编程体验。在生产环境中，通常会使用图模式来优化性能。 根据搜索结果，PyTorch的eager模式允许即时执行操作，使得调试更加直观，并且可以使用Pythonic的控制流结构，而不是预先定义的静态图 。而TensorFlow的eager模式则提供了与PyTorch类似的动态图计算模式，使得操作可以立即执行，而不是先构建计算图 。这些特性使得eager模式在某些情况下更加方便，尤其是在需要快速迭代和调试的研究环境中。然而，对于需要高性能的生产环境，图模式通常更受青睐，因为它可以通过各种优化手段来提高执行效率 。 ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:1:2","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"Details in math ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:2:0","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"summation 要从数学的角度推导出 Summation 的梯度，首先我们需要理解 summation 操作的基本原理以及它对输入张量的影响。假设我们有一个张量 a，并且我们通过 sum 操作对其进行求和，那么： Summation 操作： 定义一个张量 a，其形状为 (a_1, a_2, ..., a_n)。当我们对 a 的某些轴（axes）执行求和操作时，输出张量的形状将变小，丢失掉那些被求和的维度。例如： 如果对所有维度求和，输出将是一个标量。 如果只对某些维度求和，输出的张量形状会保持不变，但会丢失那些被求和的维度。 梯度的推导： 我们的目标是推导 f(a) = sum(a) 对输入 a 的梯度。换句话说，给定 sum(a) 对输入 a 的输出 out 和输出的梯度 out_grad，我们要计算 f 对 a 的梯度。这个梯度表示的实际上是 反向传播中如何将梯度从 out_grad 传播回输入 a。 不考虑轴的情况： 对于没有指定轴的简单总和操作 sum(a)，即对所有元素求和的情况： [ f(a) = \\sum_{i} a_i ] 求和操作的梯度对于每个元素是均匀的。如果我们对 out = f(a) 的标量有一个梯度 out_grad，则对每个输入元素 a_i 的梯度是相同的，也就是 out_grad。因此，对 a 的梯度是一个与 a 形状相同的张量，每个位置的值都是 out_grad。 考虑特定轴的情况： 如果我们只对 a 的某些轴 axes 进行求和，输出张量的形状会变小，丢失掉被求和的维度。要把 out_grad 传播回到原始输入张量 a，我们需要通过 广播（broadcasting） 来扩展 out_grad 的形状，使其与 a 的形状相同。这是通过以下步骤实现的： 首先，确定哪些轴被求和（即 axes）。 接着，我们将 out_grad 形状扩展为与原始输入 a 的形状匹配。通过 reshape 和 broadcast 操作，可以将 out_grad 的形状调整为与 a 的形状兼容。 这意味着我们将 out_grad 的值复制到所有求和的轴上。 具体的梯度操作为： [ \\text{grad}_a = \\text{broadcast_to}(\\text{reshape}(out_grad, \\text{expanded_shape}), \\text{original_shape}) ] 其中，expanded_shape 是将 out_grad 的形状在求和的轴上扩展为 1，然后通过广播将其匹配原始输入张量的形状。 ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:2:1","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"梯度的推导总结： 当我们对所有维度求和时，梯度会均匀地分布到每个输入元素上，每个位置的梯度都是 out_grad。 当对某些维度求和时，我们需要将 out_grad 扩展到与输入相同的形状，这通过 reshape 和 broadcast 实现，使得求和操作的反向传播能够正确传播梯度。 ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:2:2","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"reshape Reshape 操作的梯度推导其实相对直观。重塑（reshape）操作不会改变数据本身，只是改变数据在内存中的排列方式。因此，在反向传播时，reshape 操作的梯度可以直接按照反向的形状变化来进行重新排列。 Reshape 操作的基本概念： Reshape 操作的目的是将张量 a 的形状从原始的形状 input_shape 转换为目标形状 target_shape，但保持元素的顺序不变。数据的内存布局保持不变，只是更改了它的形状。 Reshape 的梯度计算： 因为 reshape 操作只是改变了张量的形状而不改变其数据内容，在反向传播过程中，梯度的计算非常简单。对于一个通过 reshape 产生的输出张量的梯度 out_grad，其梯度传播到输入张量时，仅需将 out_grad 重塑回输入张量的形状。 具体来说，假设： 输入张量的形状为 input_shape，即 a.shape = input_shape； 通过 reshape 操作，张量变成了 target_shape； 我们在反向传播中得到了 out_grad，它的形状为 target_shape。 我们要计算输入张量 a 的梯度。由于 reshape 并没有改变数据内容，只需将 out_grad 的形状重塑为 input_shape。 实现梯度的逻辑： 因此，Reshape 操作的梯度实现非常简单，只需要将 out_grad 重新变换回原始输入张量的形状即可。这可以通过以下代码实现： def gradient(self, out_grad, node): # 获取输入张量的形状 input_shape = node.inputs[0].shape # 将输出梯度 reshaped 回原始输入的形状 return reshape(out_grad, input_shape) 直观理解： 在前向过程中，reshape 只是重新排列数据的形状，而不改变数据的值。 在反向传播时，我们只需要将 out_grad 的形状重新排列为输入张量的形状，以便梯度能够正确传播到输入。 因为 reshape 操作本身不会影响数据值，梯度传播过程也是简单的形状变换，因此 Reshape 操作的梯度推导非常直接。 ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:2:3","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"broadcast 你提供的代码是 BroadcastTo 操作的梯度实现，它正确地处理了广播操作的反向传播问题。让我们逐步分析它的逻辑： 输入与前向传播： BroadcastTo 操作的目的是将输入张量 a 扩展为一个新的形状 self.shape。前向传播中，通过调用 array_api.broadcast_to(a, self.shape) 将输入 a 广播到 self.shape。 反向传播的目标： 在反向传播时，我们需要将梯度 out_grad 传播回输入张量 a，即形状为 node.inputs[0].shape 的张量。在广播过程中，某些维度可能是通过扩展为更大值实现的，这些扩展的维度需要在反向传播中进行处理（通过求和恢复到原始维度的大小）。 主要步骤： Step 1: 确定输入形状和目标形状的差异 shape = list(node.inputs[0].shape) # 获取输入张量的形状 shape = [1] * (len(self.shape) - len(shape)) + shape # 对输入形状进行扩展，保持与目标形状的长度一致 node.inputs[0].shape 是原始输入张量的形状。 self.shape 是广播后的形状。 如果 self.shape 的长度大于 node.inputs[0].shape 的长度，那么需要在前面补上 1 来匹配维度的数量。这是因为广播允许在高维度的前面插入 1 以适应目标形状。 Step 2: 找到需要求和的轴 你提供的代码是 BroadcastTo 操作的梯度实现，它正确地处理了广播操作的反向传播问题。让我们逐步分析它的逻辑： 输入与前向传播： BroadcastTo 操作的目的是将输入张量 a 扩展为一个新的形状 self.shape。前向传播中，通过调用 array_api.broadcast_to(a, self.shape) 将输入 a 广播到 self.shape。 反向传播的目标： 在反向传播时，我们需要将梯度 out_grad 传播回输入张量 a，即形状为 node.inputs[0].shape 的张量。在广播过程中，某些维度可能是通过扩展为更大值实现的，这些扩展的维度需要在反向传播中进行处理（通过求和恢复到原始维度的大小）。 主要步骤： Step 1: 确定输入形状和目标形状的差异 shape = list(node.inputs[0].shape) # 获取输入张量的形状 shape = [1] * (len(self.shape) - len(shape)) + shape # 对输入形状进行扩展，保持与目标形状的长度一致 node.inputs[0].shape 是原始输入张量的形状。 self.shape 是广播后的形状。 如果 self.shape 的长度大于 node.inputs[0].shape 的长度，那么需要在前面补上 1 来匹配维度的数量。这是因为广播允许在高维度的前面插入 1 以适应目标形状。 Step 2: 找到需要求和的轴 axes = [] for i, s in enumerate(self.shape): if i \u003e= len(shape) or s != shape[i]: axes.append(i) self.shape 是广播后的形状，shape 是经过扩展的原始输入形状。 遍历目标形状 self.shape，如果目标形状和扩展后的输入形状在某个维度不相同（即广播发生），则将该维度的索引添加到 axes 列表中。 这些轴是需要在反向传播时进行求和的轴，因为这些轴在前向传播时通过广播扩展了。 Step 3: 求和并调整形状 return reshape(summation(out_grad, tuple(axes)), node.inputs[0].shape) 求和：在指定的轴 axes 上对 out_grad 进行求和，以消除广播的效果，恢复到广播前的形状。 调整形状：求和后，使用 reshape 将求和后的张量调整为输入张量的原始形状 node.inputs[0].shape，确保梯度的形状与输入张量匹配。 代码分析总结： 广播维度匹配：通过在输入形状前面补 1 来处理输入张量和目标张量维度数量不匹配的情况。 识别需要求和的轴：通过比较目标形状和扩展后的输入形状，找出哪些维度是广播导致扩展的，并在这些维度上进行求和。 重塑梯度：最终将经过求和的梯度重塑回输入张量的形状，以便正确地反向传播梯度。 直观理解： 在前向传播中，广播是将较小形状的张量扩展为更大形状。 在反向传播中，我们要逆转这种扩展，即将扩展的维度的梯度“合并”，这就是通过在这些维度上求和实现的。 这段代码很好地实现了 BroadcastTo 操作的梯度计算，既考虑了输入和输出形状的差异，也正确处理了广播扩展的维度的反向求和。 ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:2:4","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"list, tuple, and dict 在Python中，list（列表）、tuple（元组）和dict（字典）是三种常用的数据结构，它们各自有独特的特性和用途。下面是它们的区别与联系： ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:3:0","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"List（列表） 类型：可变序列。 元素：可以包含任何类型的元素，包括另一个列表。 索引：通过索引访问元素，索引从0开始。 操作：可以进行增加、删除、修改等操作。 用途：当你需要一个可以改变大小的序列时使用。 ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:3:1","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"Tuple（元组） 类型：不可变序列。 元素：可以包含任何类型的元素，包括另一个元组。 索引：通过索引访问元素，索引从0开始。 操作：一旦创建，不能修改（不能增加、删除或修改元素）。 用途：当你需要一个不需要改变的序列时使用，通常用于保护数据不被改变。 ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:3:2","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"Dict（字典） 类型：可变容器。 元素：存储键值对（key-value pairs），键必须是不可变类型，值可以是任何类型。 索引：通过键访问元素，而不是索引。 操作：可以添加、删除或修改键值对。 用途：当你需要存储关联数据时使用，例如，存储对象的属性。 ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:3:3","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"联系 序列：list 和 tuple 都是序列类型，可以进行迭代，并且支持许多相似的操作，如索引、切片等。 可迭代：list、tuple 和 dict 都是可迭代的，这意味着它们可以用于循环和其他期望可迭代对象的场合。 内置方法：它们都有许多内置方法来支持常见的操作，如添加、删除、查找等。 ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:3:4","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"区别 可变性：list 是可变的，而 tuple 是不可变的。dict 也是可变的。 元素类型：dict 存储的是键值对，而 list 和 tuple 存储的是元素序列。 性能：对于需要频繁修改元素的场景，list 更合适；对于不需要修改的场景，tuple 更合适，因为它的不可变性可以提高性能。 存储效率：由于 tuple 的不可变性，它通常比 list 在存储上更高效。 访问方式：dict 通过键访问元素，而 list 和 tuple 通过索引访问。 ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:3:5","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"示例 # List my_list = [1, 2, 3] my_list.append(4) # 可变 # Tuple my_tuple = (1, 2, 3) # my_tuple[0] = 4 # 不可变，会报错 # Dict my_dict = {'name': 'Kimi', 'age': 30} my_dict['age'] = 31 # 可变 ","date":"2024-09-17","objectID":"/lec5-automatic-differentiation-implementation/:3:6","tags":null,"title":"Lec5-Automatic Differentiation Implementation","uri":"/lec5-automatic-differentiation-implementation/"},{"categories":["CMU-10-414-714"],"content":"Automatic Differentiation ","date":"2024-09-16","objectID":"/lec4-automatic-differentiation/:0:0","tags":null,"title":"Lec4-Automatic Differentiation","uri":"/lec4-automatic-differentiation/"},{"categories":["CMU-10-414-714"],"content":"数值微分 希望误差阶数为 $O(h^2)$ 事实上并非采取这种方式计算，只是用来test side note: $\\delta^T$ : pick a small vector $\\delta$ from unit ball $\\nabla_{x} f(x)$ : gradient of $f(x)$ at $x$, 通常是其他方法计算的 右手边则是数值计算，然后看两者是否近似相等 ","date":"2024-09-16","objectID":"/lec4-automatic-differentiation/:1:0","tags":null,"title":"Lec4-Automatic Differentiation","uri":"/lec4-automatic-differentiation/"},{"categories":["CMU-10-414-714"],"content":"符号微分 许多重复的的计算与IO，但是可以作为自动微分的引入 ","date":"2024-09-16","objectID":"/lec4-automatic-differentiation/:2:0","tags":null,"title":"Lec4-Automatic Differentiation","uri":"/lec4-automatic-differentiation/"},{"categories":["CMU-10-414-714"],"content":"自动微分 ","date":"2024-09-16","objectID":"/lec4-automatic-differentiation/:3:0","tags":null,"title":"Lec4-Automatic Differentiation","uri":"/lec4-automatic-differentiation/"},{"categories":["CMU-10-414-714"],"content":"计算图 有向无环图（DAG），点包含数值，边表示运算 ","date":"2024-09-16","objectID":"/lec4-automatic-differentiation/:3:1","tags":null,"title":"Lec4-Automatic Differentiation","uri":"/lec4-automatic-differentiation/"},{"categories":["CMU-10-414-714"],"content":"前向模式 Forward Mode AD 算法 遍历图，从输入开始，计算每个节点的输出，然后将结果传播到后续节点 $$ \\Large \\begin{aligned} Define: \u0026 \\quad v’_{1i} = \\frac{\\partial v_i}{\\partial x_1} \\ \\end{aligned} $$ then compute $v_i’$ iteratively, in the forward topological order 限制 如果n小k大，那么跑很少的pass就可以得到想要的梯度，但是事实上情况相反 ","date":"2024-09-16","objectID":"/lec4-automatic-differentiation/:3:2","tags":null,"title":"Lec4-Automatic Differentiation","uri":"/lec4-automatic-differentiation/"},{"categories":["CMU-10-414-714"],"content":"反向模式 Reverse Mode AD 算法 遍历图，从输出开始，计算每个节点的输入，然后将结果传播到前续节点 $$ \\Large \\begin{aligned} Define\\ adjoints: \u0026 \\quad \\bar{v}_{i} = \\frac{\\partial y}{\\partial v_i} \\ \\end{aligned} $$ then compute $\\bar{v}_i$ iteratively, in the reverse topological order 感觉BFS和DFS都呼之欲出了，但是DFS更直观一些? BFS更适合计算图的结构? 🤔 implementation 事实上我们在这里是 拓展了计算图 🤔 side note: 这里id == identity function，即输入输出相同，只是为了扩展计算图而已 使得我们可以计算任意节点的导数，而不仅仅是输入节点的导数，并且输入节点的值发生变化时，带进去跑一边图即可 ","date":"2024-09-16","objectID":"/lec4-automatic-differentiation/:3:3","tags":null,"title":"Lec4-Automatic Differentiation","uri":"/lec4-automatic-differentiation/"},{"categories":["CMU-10-414-714"],"content":"Reverse Mode AD vs Backpropagation Gradient of Gradient 优化 GPT： 右边的图展示了通过扩展计算图实现的反向模式自动微分（Reverse Mode AD），而这在现代深度学习框架中被广泛采用，相比传统的反向传播（Backprop）方法有一些优势。 主要原因如下： 图结构的优化： 在反向传播中，后向计算是在前向计算图的基础上复用的（左图）。但是，Reverse Mode AD 会为每个操作的梯度计算生成单独的图节点（右图），从而提供更清晰的图结构，允许更灵活的梯度计算和优化。 更易于复杂操作的处理： 扩展的图结构能够更好地表示复杂操作的梯度计算，尤其是在现代深度学习模型中，这种灵活性使得处理复杂的神经网络结构更加高效。 更好的框架支持： 现代深度学习框架（如TensorFlow、PyTorch等）通常采用这种Reverse Mode AD的方式，因为它能够更好地支持自动微分，尤其是在更复杂的模型训练过程中。反向传播（Backprop）更多被用在早期的深度学习框架中，如Caffe和Cuda-convnet，而这些框架相对已经过时。 总结：右边的方法能够通过构建单独的计算图节点，使梯度计算更灵活和高效，这就是为什么现代深度学习框架更倾向于使用这种方法。 ","date":"2024-09-16","objectID":"/lec4-automatic-differentiation/:3:4","tags":null,"title":"Lec4-Automatic Differentiation","uri":"/lec4-automatic-differentiation/"},{"categories":["CMU-10-414-714"],"content":"拓展到多元函数 Tensors Differentiable Programming 推广到数据结构上面去 ","date":"2024-09-16","objectID":"/lec4-automatic-differentiation/:3:5","tags":null,"title":"Lec4-Automatic Differentiation","uri":"/lec4-automatic-differentiation/"},{"categories":["CMU-10-414-714"],"content":"Manual Neural Network I ","date":"2024-09-15","objectID":"/lec3-manual-neural-networks-backprop/:0:0","tags":null,"title":"Lec3-Manual Neural Networks Backprop","uri":"/lec3-manual-neural-networks-backprop/"},{"categories":["CMU-10-414-714"],"content":"回顾一下通用近似定理 注意事实上多项式、Nearest Neighbor等都是基于通用近似定理的。 ","date":"2024-09-15","objectID":"/lec3-manual-neural-networks-backprop/:1:0","tags":null,"title":"Lec3-Manual Neural Networks Backprop","uri":"/lec3-manual-neural-networks-backprop/"},{"categories":["CMU-10-414-714"],"content":"非线性ReLU函数新理解 画图折线 ","date":"2024-09-15","objectID":"/lec3-manual-neural-networks-backprop/:2:0","tags":null,"title":"Lec3-Manual Neural Networks Backprop","uri":"/lec3-manual-neural-networks-backprop/"},{"categories":["CMU-10-414-714"],"content":"反向传播 no one else can do this awful math happily 😀 so here comes the backpropagation algorithm \u0026 autograd 潜在的模块化和自动求导🤔 ","date":"2024-09-15","objectID":"/lec3-manual-neural-networks-backprop/:3:0","tags":null,"title":"Lec3-Manual Neural Networks Backprop","uri":"/lec3-manual-neural-networks-backprop/"},{"categories":["CMU-10-414-714"],"content":"ML refresher and Softmax Regression ","date":"2024-09-15","objectID":"/lec2-ml-refresher-softmax-regression/:0:0","tags":null,"title":"Lec2-ML Refresher Softmax Regression","uri":"/lec2-ml-refresher-softmax-regression/"},{"categories":["CMU-10-414-714"],"content":"Introduction ","date":"2024-09-15","objectID":"/lec2-ml-refresher-softmax-regression/:1:0","tags":null,"title":"Lec2-ML Refresher Softmax Regression","uri":"/lec2-ml-refresher-softmax-regression/"},{"categories":["CMU-10-414-714"],"content":"Softmax Regression 标记一下有意思的推导 ","date":"2024-09-15","objectID":"/lec2-ml-refresher-softmax-regression/:2:0","tags":null,"title":"Lec2-ML Refresher Softmax Regression","uri":"/lec2-ml-refresher-softmax-regression/"},{"categories":["CMU-10-414-714"],"content":"以前现实执行梯度计算的场景 当作标量先求偏导，然后根据size考虑转不转置凑出来😋 ","date":"2024-09-15","objectID":"/lec2-ml-refresher-softmax-regression/:3:0","tags":null,"title":"Lec2-ML Refresher Softmax Regression","uri":"/lec2-ml-refresher-softmax-regression/"},{"categories":["Tools"],"content":"Conda配置备忘录 ","date":"2024-08-15","objectID":"/tools/conda/:0:0","tags":null,"title":"Conda配置备忘录","uri":"/tools/conda/"},{"categories":["Tools"],"content":"导出与创建环境 使用YAML文件创建Conda环境的步骤如下： 创建YAML文件：首先，您需要创建一个YAML配置文件，通常命名为environment.yml。在该文件中，您可以定义环境的名称、所需的通道以及依赖的包。例如： name: my_conda_env channels: - conda-forge dependencies: - numpy=1.19.5 - pandas=1.2.3 - scikit-learn=0.23.2 在这个示例中，定义了一个名为my_conda_env的环境，并指定了要安装的包及其版本。 使用Conda创建环境：在命令行中，导航到包含environment.yml文件的目录，然后运行以下命令： conda env create -f environment.yml 这条命令会根据YAML文件中的定义创建新的Conda环境。 激活新环境：创建完成后，可以使用以下命令激活新环境： conda activate my_conda_env 现在，您可以在新环境中安装、运行和测试软件包。 导出现有环境：如果您想将当前环境导出为YAML文件，可以使用以下命令： conda env export \u003e environment.yml 这将创建一个包含当前环境所有包及其版本信息的YAML文件，方便在其他计算机上重建相同的环境 ","date":"2024-08-15","objectID":"/tools/conda/:1:0","tags":null,"title":"Conda配置备忘录","uri":"/tools/conda/"},{"categories":["Tools"],"content":"单纯创建、切换、删除环境 conda create -n YOUR_ENV_NAME python=3.8 conda activate YOUR_ENV_NAME conda remove -n YOUR_ENV_NAME --all 查看环境 conda info -e ","date":"2024-08-15","objectID":"/tools/conda/:2:0","tags":null,"title":"Conda配置备忘录","uri":"/tools/conda/"},{"categories":["Tools"],"content":"pip install 第三方库 以topologylayer==0.0.0为例，直接pip将会报错，因为该库没有发布到conda中 git clone https://github.com/bruel-gabrielsson/TopologyLayer.git cd TopologyLayer # 注意找到setup.py文件 pip install -e . # pip install . ","date":"2024-08-15","objectID":"/tools/conda/:3:0","tags":null,"title":"Conda配置备忘录","uri":"/tools/conda/"},{"categories":["NNDL"],"content":"DDPM Ⅰ ","date":"2024-08-14","objectID":"/papers/ddpm/:0:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"diffusion model如何运作? sample一张杂讯图 放进去denoise模块 反复迭代，得到更清晰的图片 step xxx → step 1, reverse process ","date":"2024-08-14","objectID":"/papers/ddpm/:1:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"denoise模块 反复应用同一个模块 吃图片 吃噪声严重程度（数字） Denoise内部 ","date":"2024-08-14","objectID":"/papers/ddpm/:2:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"如何训练noise predictor? Forward/Diffusion process 输入：杂讯图 and 噪声强度 ","date":"2024-08-14","objectID":"/papers/ddpm/:3:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"Text to Image? 有很多语言和图片成对出现的训练资料 此时增加一个文本输入即可 DDPM Ⅱ ","date":"2024-08-14","objectID":"/papers/ddpm/:4:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"text to image的framework 三者分开训练 ","date":"2024-08-14","objectID":"/papers/ddpm/:5:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"text encoder \u0026 generation model 结论：文字encoder大一点比较好, diffusion model没有太大影响 side note: FID, 即feature-wise inception distance, 衡量两个Gaussian分布之间的差异 CLIP, Contrastive Language-Image Pre-training, 衡量两个文本和图片之间的差异 ","date":"2024-08-14","objectID":"/papers/ddpm/:6:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"decoder 不需要文字资料训练 中间产物为 小图 $\\rightarrow$ 原图 中间产物为 Latent Representation $\\rightarrow$ 原图, auto-encoder ","date":"2024-08-14","objectID":"/papers/ddpm/:7:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"事实上的噪音添加 diffusion model的数学原理Ⅰ ","date":"2024-08-14","objectID":"/papers/ddpm/:8:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"VAE vs. DDPM VAE是“变分自编码器”（Variational Auto Encoder）的缩写, VAE模型包括编码器和解码器两个部分：编码器负责将输入数据压缩成一个潜在向量，解码器则从这个潜在向量重构原始数据 Diffusion 的 noise 不需要learn ","date":"2024-08-14","objectID":"/papers/ddpm/:9:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"算法分析 Training 不是一点一点, 而是一次解决 Inference diffusion model的数学原理Ⅱ ","date":"2024-08-14","objectID":"/papers/ddpm/:10:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"映像生成模型本质上的目标 加了文字相当于加了一个条件condition, 以下讨论忽略之 MLE来衡量分布之间的差异 找到$\\theta^*$使得$p_{\\theta}(x)$和$p_{data}(x)$之间的KL散度最小 side note: $\\approx$ 成立是因为数据量很大? ","date":"2024-08-14","objectID":"/papers/ddpm/:11:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"VAE的数学原理 def $P_{\\theta}(x|z)$ asm $G(Z)$ 是一个Gaussian分布的 $\\mu$ side note: $f(x) = \\frac{1}{\\sqrt{2\\pi}\\sigma} e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}$ (注意$\\theta$被省略了) 根据MLE, 需要使得 $logP_{\\theta}(x)$ 大 ","date":"2024-08-14","objectID":"/papers/ddpm/:12:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"DDPM的数学原理 side note: $P_{\\theta}(x_{t-1}|x_{t}) \\propto exp(-||G(x_{t}) - x_{t-1}||_{2})$ $x_1:x_T$ 是从 $x_1$ 到 $x_T$ 的变量积分 $P_{\\theta}(x)$ 和 $P(x)$ 区别! 有 $\\theta$ 意味着通过 $\\theta$ 求得 计算 $q(x_t|x_{t-1})$ 递推和归纳法, 注意iid的Gaussian分布线性组合, 用相同方差和均值代替 回到 $P_{\\theta}(x)$ 下界, 省略了 $\\theta$ ? 放大来看 由密度函数拆开来硬整, 所以有 side note: $\\bar \\alpha_t$ 和 $\\alpha_t$ 之间有乘法关系约束!注意前面的换元! mean: 取决于 $x_t$ 和 $x_{0}$ , 符合直觉 回到优化目标 有解析解, 但是注意到两个Gaussian分布的特点, 直接靠近mean即可 $G(x_t) \\rightarrow LHS$, 注意到 $x_t = \\sqrt{\\bar \\alpha_t}x_0 + \\sqrt{1-\\bar \\alpha_t}\\epsilon$, 并且没有用到 $x_{t-1}$ 需要learn的是 $\\epsilon$ 注意 $\\alpha_t$ 序列没有深入探讨! diffusion model的数学原理Ⅲ ","date":"2024-08-14","objectID":"/papers/ddpm/:13:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"接上去DDPM的数学原理——为什么要加入随机性? 输出的不全是mean, 还叠加了 $\\sigma_t \\mathbf{z}$ 可能的原因： 类比LLM 几率大 ≠ 效果好 类比语音合成的dropout形成sampling ","date":"2024-08-14","objectID":"/papers/ddpm/:14:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"diffusion model的成功关键 ","date":"2024-08-14","objectID":"/papers/ddpm/:15:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"auto-regressive的思想 non-auto-regressive + auto-regressive ","date":"2024-08-14","objectID":"/papers/ddpm/:15:1","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["NNDL"],"content":"其他应用 语音合成 Text Noise on latent space mask-predict, ","date":"2024-08-14","objectID":"/papers/ddpm/:16:0","tags":null,"title":"DDPM","uri":"/papers/ddpm/"},{"categories":["CS186"],"content":"distributed == parallel shared nothing architecture ","date":"2024-08-14","objectID":"/databasel19/:0:0","tags":null,"title":"CS186-L19:  Distributed Transactions","uri":"/databasel19/"},{"categories":["CS186"],"content":"Intro ","date":"2024-08-14","objectID":"/databasel19/:1:0","tags":null,"title":"CS186-L19:  Distributed Transactions","uri":"/databasel19/"},{"categories":["CS186"],"content":"Distributed Locking each nodes has lock table locally, can manage the pages/tuples easily, but when it comes to Table, there should be a global lock table （or distributed lock tables）and a coordinator to manage the access to the table. ","date":"2024-08-14","objectID":"/databasel19/:2:0","tags":null,"title":"CS186-L19:  Distributed Transactions","uri":"/databasel19/"},{"categories":["CS186"],"content":"Distributed Deadlocks Detection 合并全局waits ","date":"2024-08-14","objectID":"/databasel19/:3:0","tags":null,"title":"CS186-L19:  Distributed Transactions","uri":"/databasel19/"},{"categories":["CS186"],"content":"Distributed Commit 全局投票 ","date":"2024-08-14","objectID":"/databasel19/:4:0","tags":null,"title":"CS186-L19:  Distributed Transactions","uri":"/databasel19/"},{"categories":["CS186"],"content":"2PC ","date":"2024-08-14","objectID":"/databasel19/:4:1","tags":null,"title":"CS186-L19:  Distributed Transactions","uri":"/databasel19/"},{"categories":["CS186"],"content":"The Recovery Processes crash situations ","date":"2024-08-14","objectID":"/databasel19/:5:0","tags":null,"title":"CS186-L19:  Distributed Transactions","uri":"/databasel19/"},{"categories":["CS186"],"content":"2PC, Locking and Availability 2PC + Strict 2PL locking what if a node is down? some locks can still be held by other nodes…… ","date":"2024-08-14","objectID":"/databasel19/:6:0","tags":null,"title":"CS186-L19:  Distributed Transactions","uri":"/databasel19/"},{"categories":["CS186"],"content":"Summary ","date":"2024-08-14","objectID":"/databasel19/:7:0","tags":null,"title":"CS186-L19:  Distributed Transactions","uri":"/databasel19/"},{"categories":["CS186"],"content":"Scaling Relational Databases isn’t always the best option including partitioning and replication BUT, consistency is hard to enforce! ","date":"2024-08-14","objectID":"/databasel20/:1:0","tags":null,"title":"CS186-L20: NoSQL","uri":"/databasel20/"},{"categories":["CS186"],"content":"Taxonomy of NoSQL Data Models ","date":"2024-08-14","objectID":"/databasel20/:2:0","tags":null,"title":"CS186-L20: NoSQL","uri":"/databasel20/"},{"categories":["CS186"],"content":"Key-Value Stores Map\u003cKey, Value\u003e get/put Distribution / Partitioning, just using hash function if no replication, key k is stored on $h(k)$ node if multi-way replication, key k is stored on $h_i(k), i=1,2,…,n$ nodes ","date":"2024-08-14","objectID":"/databasel20/:2:1","tags":null,"title":"CS186-L20: NoSQL","uri":"/databasel20/"},{"categories":["CS186"],"content":"Extensible Record Stores the idea is that do not use a simple key to lookup 🤔 ","date":"2024-08-14","objectID":"/databasel20/:2:2","tags":null,"title":"CS186-L20: NoSQL","uri":"/databasel20/"},{"categories":["CS186"],"content":"Document Stores JSON Documents using JSON as example do not store replicated key! JSON is a Tree 🪵, Self-describing 💬, and Flexible 🔥 can store Json in RDBMS SELECT # FROM people WHERE person @\u003e '{\"name\": \"John Doe\", \"age\": 30}'; mapping between JSON and Relational Data Relational Data Model ===\u003e JSON Document easy, note that replicated key can be handled by using a array [ ] JSON Document ===\u003e Relational Data Model using NULL to represent missing values nested or replicated data? hard to handle! multi-tables may help 🤔 ","date":"2024-08-14","objectID":"/databasel20/:2:3","tags":null,"title":"CS186-L20: NoSQL","uri":"/databasel20/"},{"categories":["CS186"],"content":"Introduction to MongoDB 基本语法 ","date":"2024-08-14","objectID":"/databasel20/:3:0","tags":null,"title":"CS186-L20: NoSQL","uri":"/databasel20/"},{"categories":["CS186"],"content":"select and find db.collection.find(\u003cpredicate\u003e, optional\u003cprojection\u003e) db.inventory.find({}) // return all documents ","date":"2024-08-14","objectID":"/databasel20/:3:1","tags":null,"title":"CS186-L20: NoSQL","uri":"/databasel20/"},{"categories":["CS186"],"content":"Limit and sort ","date":"2024-08-14","objectID":"/databasel20/:3:2","tags":null,"title":"CS186-L20: NoSQL","uri":"/databasel20/"},{"categories":["CS186"],"content":"MQL Aggregations and Updates ","date":"2024-08-14","objectID":"/databasel20/:4:0","tags":null,"title":"CS186-L20: NoSQL","uri":"/databasel20/"},{"categories":["CS186"],"content":"unwind ","date":"2024-08-14","objectID":"/databasel20/:4:1","tags":null,"title":"CS186-L20: NoSQL","uri":"/databasel20/"},{"categories":["CS186"],"content":"update ","date":"2024-08-14","objectID":"/databasel20/:4:2","tags":null,"title":"CS186-L20: NoSQL","uri":"/databasel20/"},{"categories":["CS186"],"content":"MongoDB internals ","date":"2024-08-14","objectID":"/databasel20/:5:0","tags":null,"title":"CS186-L20: NoSQL","uri":"/databasel20/"},{"categories":["CS186"],"content":"Motivation only scaling up relational databases is challenging :s ","date":"2024-08-14","objectID":"/databasel21/:1:0","tags":null,"title":"CS186-L21: MapReduce and Spark","uri":"/databasel21/"},{"categories":["CS186"],"content":"MapReduce Data and Programming Model Target ","date":"2024-08-14","objectID":"/databasel21/:2:0","tags":null,"title":"CS186-L21: MapReduce and Spark","uri":"/databasel21/"},{"categories":["CS186"],"content":"Map phase map function will not keep the state of the intermediate results, so it can be parallelized easily ","date":"2024-08-14","objectID":"/databasel21/:2:1","tags":null,"title":"CS186-L21: MapReduce and Spark","uri":"/databasel21/"},{"categories":["CS186"],"content":"Reduce phase for example, wanna count the number of occurrences of each word in the input data, we can use the reduce function to sum up the values of the same key ","date":"2024-08-14","objectID":"/databasel21/:2:2","tags":null,"title":"CS186-L21: MapReduce and Spark","uri":"/databasel21/"},{"categories":["CS186"],"content":"Implementation of MapReduce ","date":"2024-08-14","objectID":"/databasel21/:3:0","tags":null,"title":"CS186-L21: MapReduce and Spark","uri":"/databasel21/"},{"categories":["CS186"],"content":"fault tolerance by writing intermediate results to disk… mappers can write their output to local disk reducers can read the output of mappers from local disk and combine them, if the reduce task is restarted, the reduce task is restarted on another server ","date":"2024-08-14","objectID":"/databasel21/:3:1","tags":null,"title":"CS186-L21: MapReduce and Spark","uri":"/databasel21/"},{"categories":["CS186"],"content":"implementation how to handle the stragglers? ","date":"2024-08-14","objectID":"/databasel21/:3:2","tags":null,"title":"CS186-L21: MapReduce and Spark","uri":"/databasel21/"},{"categories":["CS186"],"content":"Implementing Relational Operators ","date":"2024-08-14","objectID":"/databasel21/:4:0","tags":null,"title":"CS186-L21: MapReduce and Spark","uri":"/databasel21/"},{"categories":["CS186"],"content":"Introduction to Spark why MR sucks? hard to write more complex queries slow for writing all intermediate results to disk ","date":"2024-08-14","objectID":"/databasel21/:5:0","tags":null,"title":"CS186-L21: MapReduce and Spark","uri":"/databasel21/"},{"categories":["CS186"],"content":"Programming in Spark collections in spark JavaSparkContext s = SparkSession.builder().appName(\"MyApp\").getOrCreate(); JavaRDD\u003cString\u003e lines = s.read().textFile(\"input.txt\"); JavaRDD\u003cString\u003e errors = lines.filter(line -\u003e line.contains(\"error\")); // lazy errors.collect() // eager similar steps in spark and MR ","date":"2024-08-14","objectID":"/databasel21/:6:0","tags":null,"title":"CS186-L21: MapReduce and Spark","uri":"/databasel21/"},{"categories":["CS186"],"content":"Persistence API in Java ","date":"2024-08-14","objectID":"/databasel21/:6:1","tags":null,"title":"CS186-L21: MapReduce and Spark","uri":"/databasel21/"},{"categories":["CS186"],"content":"Spark 2.0 has DataFrame API 😲 and have Datasets API 😲 like DATA100 python! ","date":"2024-08-14","objectID":"/databasel21/:7:0","tags":null,"title":"CS186-L21: MapReduce and Spark","uri":"/databasel21/"},{"categories":["CS186"],"content":"Functional Dependencies big picture ","date":"2024-08-14","objectID":"/databasel16/:1:0","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"Def X -\u003e Y means X determines Y, X and Y can be a single column or multiple columns F+ means that to be the set of all FDs that are implied by F ","date":"2024-08-14","objectID":"/databasel16/:1:1","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"terminology ","date":"2024-08-14","objectID":"/databasel16/:1:2","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"Anomalies 可以用FD分解relation从而避免冗余 ","date":"2024-08-14","objectID":"/databasel16/:2:0","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"Armstrongs Axioms ","date":"2024-08-14","objectID":"/databasel16/:3:0","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"Attribute Closure wanna check if X-\u003eY is in F+ ","date":"2024-08-14","objectID":"/databasel16/:4:0","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"BCNF and other Normal Forms ","date":"2024-08-14","objectID":"/databasel16/:5:0","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"Basic Normal Form NF is a def of data model! ","date":"2024-08-14","objectID":"/databasel16/:5:1","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"Boyce-Codd Normal Form ","date":"2024-08-14","objectID":"/databasel16/:5:2","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"Lossless Join Decompositions Def: decomposition won’t create new attributes, and will cover the original attributes (不是完全无重叠分割) ","date":"2024-08-14","objectID":"/databasel16/:6:0","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"Problems with Decompositions can loss info and unable to reconstruct the original data do not loss data actually, in fact, we gain some dirty data Dependency check may require joins some queries may be more expensive, since join is required ","date":"2024-08-14","objectID":"/databasel16/:6:1","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"Lossless Join Decompositions 定义 定理 ","date":"2024-08-14","objectID":"/databasel16/:6:2","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"Dependency Preservation and BCNF Decomposition Def: Projection of set of FDs F: Def: Dependency Preserving Decomposition ","date":"2024-08-14","objectID":"/databasel16/:7:0","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"BCNF Decomposition 没有听懂 但是dependency没有保留 所以BCNF可以lossless，但是不一定保留所有的dependency ","date":"2024-08-14","objectID":"/databasel16/:7:1","tags":null,"title":"CS186-L16: DB Design: FDs and Normalization","uri":"/databasel16/"},{"categories":["CS186"],"content":"Need for Atomicity and Durability, SQL support for Transactions ","date":"2024-08-14","objectID":"/databasel17/:1:0","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"Strawman Solution No Steal/Force policy seem like no a good choice for recovery not scalable in buffer if crash in 2a, inconsistencies will occur ","date":"2024-08-14","objectID":"/databasel17/:2:0","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"STEAL / NO FORCE, UNDO and REDO ","date":"2024-08-14","objectID":"/databasel17/:3:0","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"STEAL/NO FORCE no force: problem: sys crash before dirty page of a committed transaction is written to disk solution: flush as little as possible, in a convenient space, prior to commit. allows REDOing modifications STEAL: must remember the old value of flushed pages to support undo ","date":"2024-08-14","objectID":"/databasel17/:3:1","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"pattern ","date":"2024-08-14","objectID":"/databasel17/:3:2","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"Intro to Write-Ahead Logging (WAL) Log: a ordered list of log records to allow redo/undo log records: \u003cXID, pageID, offset, length, old data, new data\u003e and other info Write-Ahead Logging (WAL): force the log record before the data page is written to disk force all log records before a transaction is committed #1 with UNDO guarantee Atomicity and #2 with REDO guarantee Durability ===\u003e steal/no force implementation 对于每个log record，有一个对应的Log Sequence Number (LSN)来标识它在日志中的位置，我们对最近（lately）的LSN们感兴趣，flushedLSN, pageLSN等等 ","date":"2024-08-14","objectID":"/databasel17/:4:0","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"Undo logging Rule: 和WAL有点不一样，注意U2，COMMIT放在最后！ presudo code: ","date":"2024-08-14","objectID":"/databasel17/:5:0","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"Redo logging No steal/no force from beginning to end, redo all log records that are committed incomplete? do nothing! 两者对比 ","date":"2024-08-14","objectID":"/databasel17/:6:0","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"ARIES logging Log records format belike: 注意有许多不同的log record种类，构成上有不一样的地方 prevLSN ===\u003e linkedlist dirty page ===\u003e as long as it is in memory, it is dirty 😀 物理空间的抽象分布 ","date":"2024-08-14","objectID":"/databasel17/:7:0","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"ARIES and Checkpointing Checkpoint: idea: save the DB state periodically to disk, so that we don’t need to always process entire log records during recovery During a checkpoint: stop accepting new transactions wait for all active transactions to commit or abort flush log to disk flush dirty pages to disk write a checkpoint record to the log, flush log again At this point, changes by committed transactions are written to disk, and aborted transactions are rolled back. Fuzzy Checkpoint: save state of all txns and pages status some txns can be running during checkpoint and dirty pages not flushed yet data structure and idea: write-ahead log 🤔 ","date":"2024-08-14","objectID":"/databasel17/:8:0","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"ARIES logging during normal execution, commit and abort ","date":"2024-08-14","objectID":"/databasel17/:9:0","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"Normal Execution 基本上就是把上述的链表实现一遍，注意(WAL)概念和定义即可 ","date":"2024-08-14","objectID":"/databasel17/:9:1","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"Commit and Abort 同样注意管理四个区域：Transaction Table, Log, Buffer Pool, and Dirty Page Table 比较经典的example ","date":"2024-08-14","objectID":"/databasel17/:9:2","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"ARIES Recovery, Overview and Analysis, Redo and Undo Phases ","date":"2024-08-14","objectID":"/databasel17/:10:0","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"Analysis Phase: scan forward from the last checkpoint, END record? rm Xact form Xact table, do not care anymore UPDATE record? if its page P not in DPT, add it to DPT, set its recLSN = LSN !END record? if not in X table, add it to X table set lastLSN = LSN change X’s state to COMMITTED if see a commit record, ABORTED if see an abort record at the end of Analysis Phase, for any X in X table in COMMITTED state, write a corresponding END record to the log record and rm X from X table now X table can tell which X were active at time of crash change status of running X to ABORTED and write an ABORT record to the log DPT says which dirty pages might not have been flushed to disk yet ","date":"2024-08-14","objectID":"/databasel17/:10:1","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"Redo Phase: scan forward from the smallest recLSN in DPT, For each update log record or CLR with a given LSN, REDO the action unless: affected page is not in DPT affected page is in DPT, but has recLSN \u003e LSN pageLSN in DB \u003e= LSN to REDO an action: reapply logged action set pageLSN in DB to LSN. NO additional logging, no forcing ","date":"2024-08-14","objectID":"/databasel17/:10:2","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"Undo Phase: scan backward from the CRASH point, simple solution do at once toUndo = {lastLSNs of all X in X table} while !toUndo.isEmpty(): thisLR = toUndo.find_and_remove_largest_LSN() if thisLR.type == CLR: if thisLR.undoNextLSN != NULL: toUndo.add(thisLR.undoNextLSN) else: write an END record for thisLR.xid in the log else: if thisLR.type == UPDATE: write a CLR record for the undo in the log undo the update in the database if this.LR.type != NULL: toUndo.add(thisLR.undoPrevLSN) elif thisLR.type == NULL: write an END record for thisLR.xid in the log ","date":"2024-08-14","objectID":"/databasel17/:10:3","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"FAQ ","date":"2024-08-14","objectID":"/databasel17/:11:0","tags":null,"title":"CS186-L17: Recovery","uri":"/databasel17/"},{"categories":["CS186"],"content":"Intro to Parallelism ","date":"2024-08-14","objectID":"/databasel18/:1:0","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"Architectures and Software Structures we will focus on the shared-nothing here 😋 ","date":"2024-08-14","objectID":"/databasel18/:2:0","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"Kinds of Query Parallelism side note: intra: single inter: multiple at the same level ","date":"2024-08-14","objectID":"/databasel18/:3:0","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"Parallel Data Acceess ","date":"2024-08-14","objectID":"/databasel18/:4:0","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"Data Partitioning across Machines Round robin means that each machine haves the same shuffled data ","date":"2024-08-14","objectID":"/databasel18/:4:1","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"parallel scans scan and merge $\\sigma_p$ : an operator that skip entire sites that have no matching tuples in range or hash partitioning ","date":"2024-08-14","objectID":"/databasel18/:4:2","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"lookup by key if data partitioned on function of key, then Route lookup only to the relevant nodes otherwise, broadcast lookup to all nodes ","date":"2024-08-14","objectID":"/databasel18/:4:3","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"insert if on function of key, insert only to the relevant nodes else insert to any nodes insert an unique key seems to be same ","date":"2024-08-14","objectID":"/databasel18/:4:4","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"parallel hash join naive hash join grace hash join Pass one is like hashing above, but do it 2x– once for each relation being joined Pass two is local grace hash join per node ","date":"2024-08-14","objectID":"/databasel18/:4:5","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"sort-merge join 回到均分问题了 然后和上面一样读取分配两次for join ","date":"2024-08-14","objectID":"/databasel18/:5:0","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"parallel aggregation/grouping naive group by: ","date":"2024-08-14","objectID":"/databasel18/:6:0","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"Symmetric Hash Joins sort and hash can break the pipeline…… ","date":"2024-08-14","objectID":"/databasel18/:7:0","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"one-sided and Broadcast Joins ","date":"2024-08-14","objectID":"/databasel18/:8:0","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"one-sided joins one is sorted/hashed ","date":"2024-08-14","objectID":"/databasel18/:8:1","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":"broadcast joins one is small ","date":"2024-08-14","objectID":"/databasel18/:8:2","tags":null,"title":"CS186-L18: Parallel Query Processing","uri":"/databasel18/"},{"categories":["CS186"],"content":" 🎉 ","date":"2024-08-14","objectID":"/databasel13/:0:0","tags":null,"title":"CS186-L13: Transactions \u0026 Concurrency I","uri":"/databasel13/"},{"categories":["CS186"],"content":"Intro transaction’s principle ACID ","date":"2024-08-14","objectID":"/databasel13/:1:0","tags":null,"title":"CS186-L13: Transactions \u0026 Concurrency I","uri":"/databasel13/"},{"categories":["CS186"],"content":"Isolation (Concurrency) however, do not consider serial execution 😅 ","date":"2024-08-14","objectID":"/databasel13/:1:1","tags":null,"title":"CS186-L13: Transactions \u0026 Concurrency I","uri":"/databasel13/"},{"categories":["CS186"],"content":"Atomicity and Durability ","date":"2024-08-14","objectID":"/databasel13/:1:2","tags":null,"title":"CS186-L13: Transactions \u0026 Concurrency I","uri":"/databasel13/"},{"categories":["CS186"],"content":"Consistency ","date":"2024-08-14","objectID":"/databasel13/:1:3","tags":null,"title":"CS186-L13: Transactions \u0026 Concurrency I","uri":"/databasel13/"},{"categories":["CS186"],"content":"Concurrency Control 基本符号表达 序列等价性： $Def1:$ Serial Schedule each transaction executes in a serial order, one after the other, without any intervening $Def2:$ schedules Equivalent involve same transaction each transaction’s actions are the same order both transactions have the same effect on the database’s final state $Def3:$ Serializable if a schedule is serializable, then it is equivalent to some serial schedule ","date":"2024-08-14","objectID":"/databasel13/:2:0","tags":null,"title":"CS186-L13: Transactions \u0026 Concurrency I","uri":"/databasel13/"},{"categories":["CS186"],"content":"Conflict Serializability conflict operations? Intuitive Understanding of Conflict Serializable Conflict Dependency Graph ","date":"2024-08-14","objectID":"/databasel13/:2:1","tags":null,"title":"CS186-L13: Transactions \u0026 Concurrency I","uri":"/databasel13/"},{"categories":["CS186"],"content":"View Serializability ","date":"2024-08-14","objectID":"/databasel13/:2:2","tags":null,"title":"CS186-L13: Transactions \u0026 Concurrency I","uri":"/databasel13/"},{"categories":["CS186"],"content":"Conclusion Neither definition allows all schedules that are actually serializable. because they can not check the meaning of the operation 😈 ","date":"2024-08-14","objectID":"/databasel13/:3:0","tags":null,"title":"CS186-L13: Transactions \u0026 Concurrency I","uri":"/databasel13/"},{"categories":["CS186"],"content":"Two Phase Locking (2PL) ","date":"2024-08-14","objectID":"/databasel14/:1:0","tags":null,"title":"CS186-L14: Transactions \u0026 Concurrency II","uri":"/databasel14/"},{"categories":["CS186"],"content":"Strict 2PL same as 2PL, but with stricter definition of release locks at once pink area is the Strict 2PL ","date":"2024-08-14","objectID":"/databasel14/:2:0","tags":null,"title":"CS186-L14: Transactions \u0026 Concurrency II","uri":"/databasel14/"},{"categories":["CS186"],"content":"Lock Management there is a lock manager, which maintains a hash table keyed on names of objects being locked ","date":"2024-08-14","objectID":"/databasel14/:3:0","tags":null,"title":"CS186-L14: Transactions \u0026 Concurrency II","uri":"/databasel14/"},{"categories":["CS186"],"content":"Deadlocks 🤔 ","date":"2024-08-14","objectID":"/databasel14/:4:0","tags":null,"title":"CS186-L14: Transactions \u0026 Concurrency II","uri":"/databasel14/"},{"categories":["CS186"],"content":"why happen? side note: prioritize upgrades can avoid #2 unlike the OS which can have a fixed order of required sources…… ","date":"2024-08-14","objectID":"/databasel14/:4:1","tags":null,"title":"CS186-L14: Transactions \u0026 Concurrency II","uri":"/databasel14/"},{"categories":["CS186"],"content":"avoiding deadlocks timeout first, TIMEOUT is a not so bad idea 🤔 two patterns then… why can work out? young at best wait, at worst die order by age, so no circle if re-start or “hurt/wound”, time stamp won’t change deadlock detection try to construct a graph of all the locks and wait-for relationships 🤔 as long as there is a cycle, deadlock happens! exp: most cycle is 2-3 nodes ","date":"2024-08-14","objectID":"/databasel14/:4:2","tags":null,"title":"CS186-L14: Transactions \u0026 Concurrency II","uri":"/databasel14/"},{"categories":["CS186"],"content":"Lock Granularity at which level should i lock? tuples? pages? tables? or database? multi-granularity locking is helpful! 数据库锁的兼容性矩阵（Lock Compatibility Matrix） 数据库锁的兼容性矩阵用于定义不同类型的锁在数据库系统中能否同时共存，避免在多用户并发环境下产生数据不一致的问题。这个矩阵展示了当一个事务持有某种类型的锁时，另一个事务能否在同一资源上获得另一种类型的锁。 锁类型的基本含义： IS (Intent Share)： 意图在更细粒度（如记录级别）上获取共享锁（S锁）。 IX (Intent Exclusive)： 意图在更细粒度上获取排他锁（X锁）。 S (Share)： 共享锁，允许多个事务同时读取数据，但不允许修改。 X (Exclusive)： 排他锁，独占锁，禁止其他事务读取或修改数据。 SIX (Shared Intent Exclusive)： 同时持有S锁和IX锁。事务希望对较粗粒度的对象进行共享访问，同时在更细粒度的对象上进行排他修改。 1. IS 锁的兼容性： IS vs IS: true，多个事务可以在同一资源上放置IS锁，表示它们都有意在更细粒度上获得S锁。 IS vs IX: true，IS和IX锁可以同时存在，意味着一个事务意图获取共享锁，而另一个事务意图获取排他锁，两者在粗粒度上并不冲突。 IS vs S: true，IS锁与S锁兼容，一个事务可以有意获取更细粒度的共享锁，而另一个事务在当前粒度上持有共享锁。 IS vs SIX: true，SIX锁本质上是S锁和IX锁的组合，IS与这两种锁都兼容，因此IS与SIX兼容。 IS vs X: false，IS锁与X锁不兼容，X锁是排他锁，不允许其他任何锁共存。 2. IX 锁的兼容性： IX vs IS: true，见上文解释。 IX vs IX: true，多个事务可以同时表示它们有意在更细粒度上获取排他锁。 IX vs S: false，IX锁与S锁不兼容，排他锁意图与共享锁发生冲突。 IX vs SIX: false，SIX锁包含共享锁部分，与IX锁不兼容。 IX vs X: false，排他锁之间无法共存。 3. S 锁的兼容性： S vs IS: true，见上文解释。 S vs IX: false，见上文解释。 S vs S: true，多个事务可以共享读取资源，因此S锁彼此兼容。 S vs SIX: false，因为SIX锁中包含IX锁部分，而S与IX不兼容。 S vs X: false，共享锁与排他锁不兼容。 4. SIX 锁的兼容性： SIX vs IS: true，见上文解释。 SIX vs IX: false，见上文解释。 SIX vs S: false，见上文解释。 SIX vs SIX: false，两个SIX锁不兼容，因为SIX锁包含排他意图。 SIX vs X: false，排他锁与SIX锁不兼容。 5. X 锁的兼容性： X vs IS: false，见上文解释。 X vs IX: false，见上文解释。 X vs S: false，见上文解释。 X vs SIX: false，见上文解释。 X vs X: false，两个排他锁不能共存。 ","date":"2024-08-14","objectID":"/databasel14/:5:0","tags":null,"title":"CS186-L14: Transactions \u0026 Concurrency II","uri":"/databasel14/"},{"categories":["CS186"],"content":"Summary ","date":"2024-08-14","objectID":"/databasel14/:6:0","tags":null,"title":"CS186-L14: Transactions \u0026 Concurrency II","uri":"/databasel14/"},{"categories":["CS186"],"content":"Overview how to design a database instead of DBMS! 🤔 this class mainly focuses on the conceptual design ","date":"2024-08-14","objectID":"/databasel15/:1:0","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Data Models and Relational Levels of Abstraction ","date":"2024-08-14","objectID":"/databasel15/:2:0","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"def in Data model ","date":"2024-08-14","objectID":"/databasel15/:2:1","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"abstractions example ","date":"2024-08-14","objectID":"/databasel15/:2:2","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Data Independence ","date":"2024-08-14","objectID":"/databasel15/:3:0","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Entity-Relationship Model (ERM) ","date":"2024-08-14","objectID":"/databasel15/:4:0","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Def Entity: a real-world object that can be described and identified by a set of attributes Entity Set: a collection of similar entities all entities in an entity set have the same attributes each entity set has a key each attribute has a domain Relationship: a connection between two entity sets ","date":"2024-08-14","objectID":"/databasel15/:4:1","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Key and Participation Constraints ","date":"2024-08-14","objectID":"/databasel15/:5:0","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Key Constraints ","date":"2024-08-14","objectID":"/databasel15/:5:1","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Participation Constraints ","date":"2024-08-14","objectID":"/databasel15/:5:2","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Weak Entity ","date":"2024-08-14","objectID":"/databasel15/:6:0","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Alternative Notation and Terminology decoder graph 😅 math notation 😅 ","date":"2024-08-14","objectID":"/databasel15/:7:0","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Binary vs Ternary Relationships 上面的更加紧密并且可以记录qty ","date":"2024-08-14","objectID":"/databasel15/:8:0","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Aggregation and Ternary Relationships ","date":"2024-08-14","objectID":"/databasel15/:9:0","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Entities vs Attributes Remember: attributes can not have nested attributes (atomic attributes only), if you want to represent nested attributes, use entities instead 🤔 entity or attribute? depends on the context! ","date":"2024-08-14","objectID":"/databasel15/:10:0","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Entities vs Relationships 必要时拆出来新的实体来构建新的关系 ","date":"2024-08-14","objectID":"/databasel15/:11:0","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Converting ER to Relational Entity Set: table many-to-many Relationship Set: keys for participating entities, forming a superkey for the relation all other attributes Key Constraints: think carefully about the uniqueness of the primary key! Participation Constraints: usually using NOT NULL Weak Entity Set: ","date":"2024-08-14","objectID":"/databasel15/:12:0","tags":null,"title":"CS186-L15: DB Design: Entity-Relationship Models","uri":"/databasel15/"},{"categories":["CS186"],"content":"Intro relational operator: tuples(in other way, relations) in, tuples out abstract class Iterator { // set up the children and the dataflow graph void setup(List\u003cIterator\u003e inputs); void init(args); // state tuple next(); // returns the next tuple void close(); } ","date":"2024-08-14","objectID":"/databasel10/:1:0","tags":null,"title":"CS186-L10: Iterators \u0026 Joins","uri":"/databasel10/"},{"categories":["CS186"],"content":"presudo code select on the fly 🤔 init() { child.init(); pred = predicate; current = null; } next() { while (current != EOF \u0026\u0026 !pred(current)) { current = child.next(); } } close() { child.close(); } heap scan want to find out the empty record id init(relation) { heap = open heap file for the relation; cur_page = heap.first_page(); cur_slot = cur_page.first_slot(); } next() { if (cur_page == null) return EOF; current = [cur_page, cur_slot]; // return the id // advance to the next slot cur_slot = cur_page.next_slot(cur_slot); if (cur_slot == null) { // advance to the next page, first slot cur_page = heap.next_page(cur_page); if (cur_page != null) cur_slot = cur_page.first_slot(); } return current; } close() { heap.close(); } sort (two pass) Group By assume that already sorted, and notice that only contain ONE tuple at a time ===\u003e memory efficient ","date":"2024-08-14","objectID":"/databasel10/:1:1","tags":null,"title":"CS186-L10: Iterators \u0026 Joins","uri":"/databasel10/"},{"categories":["CS186"],"content":"A single thread side note: how does the block operator work with the streaming operator Sort use disk internally we do not store the operator output in disk ===\u003e stream through the call stack ","date":"2024-08-14","objectID":"/databasel10/:1:2","tags":null,"title":"CS186-L10: Iterators \u0026 Joins","uri":"/databasel10/"},{"categories":["CS186"],"content":"Join operators ","date":"2024-08-14","objectID":"/databasel10/:2:0","tags":null,"title":"CS186-L10: Iterators \u0026 Joins","uri":"/databasel10/"},{"categories":["CS186"],"content":"Simple Nested Loops Join see the course note, not that hard to understand $[R] + [R]|S|$ $[S] + [S]|R|$ 顺序很重要！ ","date":"2024-08-14","objectID":"/databasel10/:2:1","tags":null,"title":"CS186-L10: Iterators \u0026 Joins","uri":"/databasel10/"},{"categories":["CS186"],"content":"Pages Nested Loops Join $[R]+[R][S]$ ","date":"2024-08-14","objectID":"/databasel10/:2:2","tags":null,"title":"CS186-L10: Iterators \u0026 Joins","uri":"/databasel10/"},{"categories":["CS186"],"content":"Chunk Nested Loops Join $[R] + \\lceil(\\frac{[R]}{B-2})\\rceil[S]$ ","date":"2024-08-14","objectID":"/databasel10/:2:3","tags":null,"title":"CS186-L10: Iterators \u0026 Joins","uri":"/databasel10/"},{"categories":["CS186"],"content":"Index Nested Loops Join $[R] + |R|*(cost\\ of\\ index\\ lookup)$ cost of index lookup unclustered: (# of matching s tuples for each r tuple) $\\times$ (access cost of per s tuple) clustered: (# of matching s tuples for each r pages) $\\times$ (access cost of per s page) ","date":"2024-08-14","objectID":"/databasel10/:2:4","tags":null,"title":"CS186-L10: Iterators \u0026 Joins","uri":"/databasel10/"},{"categories":["CS186"],"content":"Sort-Merge Join 依次滚两个纸带，对齐，归并。 $Sort(R) + Sort(S) + ([R]+[S])$ worst $|R|[S]$ , too many dups a refinement of the sort-merge join note that if join and sort, will cost around 9500 \u003e 7500 so sort and join can allow us to get the ORDER BY free 🤔 here comes the refinement 重点在于对sorting最后一次merge的优化，因为可以 track R和S的最小值，于是开始join的步骤即可 ","date":"2024-08-14","objectID":"/databasel10/:2:5","tags":null,"title":"CS186-L10: Iterators \u0026 Joins","uri":"/databasel10/"},{"categories":["CS186"],"content":"Naive Hash Join Requires equality predicate: equi-join and natural join assume that $R$ is small enough to fit in memory algorithm: hash $R$ into hash table scan $S$ (can be huge file) and probe $R$ requires $R$ \u003c (B-2)*hash_fill_factor ","date":"2024-08-14","objectID":"/databasel10/:2:6","tags":null,"title":"CS186-L10: Iterators \u0026 Joins","uri":"/databasel10/"},{"categories":["CS186"],"content":"Grace Hash Join Requires equality predicate: equi-join and natural join algorithm: partition tuples from $R$ and $S$ Build \u0026 Probe a separate hash table for each partition assume that each partition is small enough to fit in memory recurse if necessary cost: $3([R]+[S])$ so it is a good choice for large $S$ and small $R$ Hybrid Hash Join is not included 🤔 ","date":"2024-08-14","objectID":"/databasel10/:2:7","tags":null,"title":"CS186-L10: Iterators \u0026 Joins","uri":"/databasel10/"},{"categories":["CS186"],"content":"Summary ","date":"2024-08-14","objectID":"/databasel10/:3:0","tags":null,"title":"CS186-L10: Iterators \u0026 Joins","uri":"/databasel10/"},{"categories":["CS186"],"content":"Intro ??? I am here right now 😄 省流：拿进来sql，转换成relational algebra，然后树形图展示，考虑不同的实现方式，然后给出优化方案。 考虑不同的实现方式 plan space: how many plans? cost estimation search strategy ","date":"2024-08-14","objectID":"/databasel11/:1:0","tags":null,"title":"CS186-L11:  Query Opt: Plan Space","uri":"/databasel11/"},{"categories":["CS186"],"content":"algebra equivalences ","date":"2024-08-14","objectID":"/databasel11/:2:0","tags":null,"title":"CS186-L11:  Query Opt: Plan Space","uri":"/databasel11/"},{"categories":["CS186"],"content":"selections, projections and Cartesian products 在数据库查询的关系代数中，projections（投影） 是一种操作，它用于从一个关系中选择特定的属性列。我们来看一下投影的性质以及如何理解它。投影（Projections）的性质表明了它们可以被 级联（cascade） 使用。这意味着多个投影操作可以逐步应用于关系 R 上，每一步选择一个或多个属性列： [ \\pi_{a_1}(R) \\equiv \\pi_{a_1}(…(\\pi_{a_1, …, a_{n-1}}(R))…) ] 级联（Cascade） 级联的含义是指多个投影操作可以按顺序应用。在级联的情况下，我们可以将多个投影操作结合起来，依次减少关系的属性。 例如，假设我们有一个关系 R，它有属性集合 {a_1, a_2, a_3, a_4}。如果我们应用 (\\pi_{a_1, a_2}(R))，我们得到的结果是仅有 a_1 和 a_2 属性的关系。 接着，我们可以在这个结果上再次应用 (\\pi_{a_1}(R))，最终得到只有 a_1 属性的关系。 这种级联性质可以被理解为将多个投影操作合并成一个操作。 ","date":"2024-08-14","objectID":"/databasel11/:2:1","tags":null,"title":"CS186-L11:  Query Opt: Plan Space","uri":"/databasel11/"},{"categories":["CS186"],"content":"joins 结合律？交换律？ 结合律一般不成立，交换律是成立的（由前面的Cartesian product可知）。有一个理解点：叉积 $\\times$ 的范围变大了 ","date":"2024-08-14","objectID":"/databasel11/:2:2","tags":null,"title":"CS186-L11:  Query Opt: Plan Space","uri":"/databasel11/"},{"categories":["CS186"],"content":"Some Heuristics ","date":"2024-08-14","objectID":"/databasel11/:3:0","tags":null,"title":"CS186-L11:  Query Opt: Plan Space","uri":"/databasel11/"},{"categories":["CS186"],"content":"selections selection is cheap, while join is expensive 😋 apply selections as soon as you have relevant columns ","date":"2024-08-14","objectID":"/databasel11/:3:1","tags":null,"title":"CS186-L11:  Query Opt: Plan Space","uri":"/databasel11/"},{"categories":["CS186"],"content":"projections keep the number of columns as small as possible, and avoid unnecessary columns ","date":"2024-08-14","objectID":"/databasel11/:3:2","tags":null,"title":"CS186-L11:  Query Opt: Plan Space","uri":"/databasel11/"},{"categories":["CS186"],"content":"joins always try to avoid cross-product joins, use appropriate indexes ","date":"2024-08-14","objectID":"/databasel11/:3:3","tags":null,"title":"CS186-L11:  Query Opt: Plan Space","uri":"/databasel11/"},{"categories":["CS186"],"content":"Physical Equivalences base table access: with single-table selections and projections heap scan index scan equi-joins: 等值连接，在等值连接中，我们将两个关系（表）中的行合并，前提是它们的指定列具有相同的值。 chunk nested loops join index nested loops join sort-merge join grace hash join non-equi-joins: block nested loops join ","date":"2024-08-14","objectID":"/databasel11/:4:0","tags":null,"title":"CS186-L11:  Query Opt: Plan Space","uri":"/databasel11/"},{"categories":["CS186"],"content":"example 嵌套循环连接（Nested Loop Join） 的工作方式是在外层循环中对一个表（通常是较小的表）逐行扫描，然后在内层循环中对另一个表（通常是较大的表）进行匹配。执行计划的右侧图示意了选择条件下推到嵌套循环的内层。 关键原因： 下推后的选择并未减少内层扫描的次数：在嵌套循环连接中，即使选择条件 σ_bid=100 被推入内层循环，仍然需要对 Reserves 表（即右侧表）进行完整扫描，以查找符合 sid 连接条件的所有行。由于内层循环需要对 Reserves 表进行扫描来匹配外层表 Sailors 的每一行，选择条件下推并不会减少内层表的扫描次数。 选择条件的下推等同于在连接之后应用选择：这意味着在大多数情况下，条件的下推与在连接操作之后再应用选择条件的效果几乎相同。在这种特定的情况下，选择条件不会减少 Reserves 表的扫描，因为无论如何都必须扫描整个表以匹配 sid。 交换位置 引入物化视图（Materialized View）可以减少扫描次数，增加少量物化开销 更换join种类 下放projections，可能会出现一个buffer搞定左边的情况 考虑physical equivalence cluster使得数据以page为单位读取 ","date":"2024-08-14","objectID":"/databasel11/:5:0","tags":null,"title":"CS186-L11:  Query Opt: Plan Space","uri":"/databasel11/"},{"categories":["CS186"],"content":"Summary ","date":"2024-08-14","objectID":"/databasel11/:6:0","tags":null,"title":"CS186-L11:  Query Opt: Plan Space","uri":"/databasel11/"},{"categories":["CS186"],"content":"Intro An important property of query optimization is that we have no way of knowing how many I/Os a plan will cost until we execute that plan. see note 9 ","date":"2024-08-14","objectID":"/databasel12/:1:0","tags":null,"title":"CS186-L12: Query Opt: Costs \u0026 Search","uri":"/databasel12/"},{"categories":["CS186"],"content":"example background ","date":"2024-08-14","objectID":"/databasel12/:2:0","tags":null,"title":"CS186-L12: Query Opt: Costs \u0026 Search","uri":"/databasel12/"},{"categories":["CS186"],"content":"plan space overview 对physical properties的描述，关注的点在于不同过程对hash or sort的要求 ","date":"2024-08-14","objectID":"/databasel12/:3:0","tags":null,"title":"CS186-L12: Query Opt: Costs \u0026 Search","uri":"/databasel12/"},{"categories":["CS186"],"content":"Cost Estimation 讨论的假设 注意predicate之间独立，以及只是关注IO 量化的信息点，catalog ","date":"2024-08-14","objectID":"/databasel12/:4:0","tags":null,"title":"CS186-L12: Query Opt: Costs \u0026 Search","uri":"/databasel12/"},{"categories":["CS186"],"content":"selectivity formula side note: 等值join的理解见下图的bunny 🐰 histograms for selectivity estimation 但是这节课用的是等宽的直方图😏，然后所有的条件相互独立，selectivity根据直方图显示的频率计算得出 selectivity for join query $$ \\Large R\\Join_{p} \\sigma_{q}(S) \\equiv \\sigma_{p}(R \\times \\sigma_{q}(S)) \\equiv \\sigma_{p \\land q}(R \\times S) $$ 所以 $ s = s_p s_q $注意叉积产生的size变化 ","date":"2024-08-14","objectID":"/databasel12/:4:1","tags":null,"title":"CS186-L12: Query Opt: Costs \u0026 Search","uri":"/databasel12/"},{"categories":["CS186"],"content":"Search Algorithm ","date":"2024-08-14","objectID":"/databasel12/:5:0","tags":null,"title":"CS186-L12: Query Opt: Costs \u0026 Search","uri":"/databasel12/"},{"categories":["CS186"],"content":"single table plan 没有听懂？？？ 十分粗糙的估计 没有听懂？？？ ","date":"2024-08-14","objectID":"/databasel12/:5:1","tags":null,"title":"CS186-L12: Query Opt: Costs \u0026 Search","uri":"/databasel12/"},{"categories":["CS186"],"content":"multi-table plan 借鉴DP思想，将join的过程分解为多个子问题，每个子问题都可以单独估计cost，然后将子问题的cost累加起来 但是可能出现子计划并非最优的情况，然而对全局最优 中间结果附加了Order，可能对下游任务有积极影响，故考虑保留 列举plan技巧 对于多过程的plan枚举，DP table同样可以延展 ","date":"2024-08-14","objectID":"/databasel12/:5:2","tags":null,"title":"CS186-L12: Query Opt: Costs \u0026 Search","uri":"/databasel12/"},{"categories":["CS186"],"content":"Relational Algebra Intro Relational algebra 😵 algebra on sets —\u003e mean no duplicates! operational description of transformations Relational Calculus 😵 basic of SQL 以上两者被证明等价并且使得SQL能够被编译–long story…… ","date":"2024-08-14","objectID":"/databasel8/:1:0","tags":null,"title":"CS186-L8: Relational Algebra","uri":"/databasel8/"},{"categories":["CS186"],"content":"Relational Algebra Operators ","date":"2024-08-14","objectID":"/databasel8/:2:0","tags":null,"title":"CS186-L8: Relational Algebra","uri":"/databasel8/"},{"categories":["CS186"],"content":"Unary Operators Selection (σ) : select rows that satisfy a condition Projection (π) : select specific columns 如果结果是multiset, 去重! 虽然real system不会自动去重 Rename (ρ) : rename a column Union (∪) : tuples in either r1 or r2 two input relations, must be compatible (same number of columns or “fields”, and have same data types corresponding to the same field) UNION in SQL Difference (−) : tuples in r1, but not in r2 same with union, both input relations must be compatible EXCEPT in SQL Cross Product (×) : cartesian product of two relations how many rows in the result? $|R_1|*|R_2|$ none duplicate tuples ","date":"2024-08-14","objectID":"/databasel8/:2:1","tags":null,"title":"CS186-L8: Relational Algebra","uri":"/databasel8/"},{"categories":["CS186"],"content":"Compound Operators Join (⋈ / $⋈_\\theta$) : join two relations on common attributes avoid cross product as we can! natural join Intersection (∩) : tuples that appear in both r1 and r2 $S_1 \\cap S_2 = S_1 - (S_1 - S_2)$ ","date":"2024-08-14","objectID":"/databasel8/:2:2","tags":null,"title":"CS186-L8: Relational Algebra","uri":"/databasel8/"},{"categories":["CS186"],"content":"Grouping and Aggregation Operators Group By / Aggregation Operators($\\gamma$) $\\gamma_{age, AVG(rating)}$ (Sailors) with selection (HAVING) $\\gamma_{age, AVG(rating), COUNT(*)\u003e2}$(Sailors) ","date":"2024-08-14","objectID":"/databasel8/:2:3","tags":null,"title":"CS186-L8: Relational Algebra","uri":"/databasel8/"},{"categories":["CS186"],"content":"Summary ","date":"2024-08-14","objectID":"/databasel8/:3:0","tags":null,"title":"CS186-L8: Relational Algebra","uri":"/databasel8/"},{"categories":["CS186"],"content":"intro ","date":"2024-08-14","objectID":"/databasel7/:1:0","tags":null,"title":"CS186-L7: Buffer Management","uri":"/databasel7/"},{"categories":["CS186"],"content":"可能需要处理的问题 dirty pages pages replacement ","date":"2024-08-14","objectID":"/databasel7/:1:1","tags":null,"title":"CS186-L7: Buffer Management","uri":"/databasel7/"},{"categories":["CS186"],"content":"state of buffer management ","date":"2024-08-14","objectID":"/databasel7/:1:2","tags":null,"title":"CS186-L7: Buffer Management","uri":"/databasel7/"},{"categories":["CS186"],"content":"Page replacement terminology a page in “use” : Page pin count if full. which should be replaced: page replacement policy request请求发出来，转接到buffer manager…… ","date":"2024-08-14","objectID":"/databasel7/:2:0","tags":null,"title":"CS186-L7: Buffer Management","uri":"/databasel7/"},{"categories":["CS186"],"content":"Page replacement policies ","date":"2024-08-14","objectID":"/databasel7/:3:0","tags":null,"title":"CS186-L7: Buffer Management","uri":"/databasel7/"},{"categories":["CS186"],"content":"LRU (Least Recently Used) 最近最少使用使用的是 时间 pin count == 0! Priority heap data structure can help! like $O(logN)$ ","date":"2024-08-14","objectID":"/databasel7/:3:1","tags":null,"title":"CS186-L7: Buffer Management","uri":"/databasel7/"},{"categories":["CS186"],"content":"CLOCK 一种近似LRU的算法，旨在不需要维护每个页面的访问时间戳，从而减少了额外的开销。 Clock policy将缓冲区中的页面视为一个循环列表，使用一个“时钟指针”来跟踪当前考虑替换的页面。每个页面都有一个“引用位”（ref bit），用于指示该页面是否被最近访问过。 工作流程 初始化：当缓冲区管理器启动时，时钟指针指向第一个未固定（unpinned）的页面，并将该页面的引用位设置为1，当页面被读入时。 页面替换： 当需要替换页面时，缓冲区管理器从时钟指针开始，遍历缓冲区中的页面。 对于每个页面，如果该页面的引用位为1，则将其引用位重置为0，并将时钟指针移动到下一个页面。 如果找到一个引用位为0的页面，则可以将其替换。此时，如果该页面是“脏页”（dirty page），则需要将其写回磁盘，然后读取新的页面并将其引用位设置为1。 ","date":"2024-08-14","objectID":"/databasel7/:3:2","tags":null,"title":"CS186-L7: Buffer Management","uri":"/databasel7/"},{"categories":["CS186"],"content":"LRU-Clock bad behavior Sequential Flooding! ","date":"2024-08-14","objectID":"/databasel7/:3:3","tags":null,"title":"CS186-L7: Buffer Management","uri":"/databasel7/"},{"categories":["CS186"],"content":"MRU (Most Recently Used) General case: SeqScan + MRU $B$ buffers $N\u003eB$ pages in file Improvements for sequential scan: prefetch hybrid? LRU wins for random access MRU wins for repeated sequential scan Two General Approaches: 🤔 ","date":"2024-08-14","objectID":"/databasel7/:3:4","tags":null,"title":"CS186-L7: Buffer Management","uri":"/databasel7/"},{"categories":["CS186"],"content":"System perspective ","date":"2024-08-14","objectID":"/databasel7/:4:0","tags":null,"title":"CS186-L7: Buffer Management","uri":"/databasel7/"},{"categories":["CS186"],"content":"summary ","date":"2024-08-14","objectID":"/databasel7/:5:0","tags":null,"title":"CS186-L7: Buffer Management","uri":"/databasel7/"},{"categories":["CS186"],"content":"Why Sort? Rendezvous 为了“集合” eliminating duplicates (DISTINCT) Grouping for summarization (GROUP BY) Upcoming sort-merge join algorithms Ordering sometimes output must be in a specific order First step in bulk loading Tree indexes Problem: sort 100GB of data with 1GB of RAM why not virtual memory? – random IO access, too slow 😢 ","date":"2024-08-14","objectID":"/databasel9/:1:0","tags":null,"title":"CS186-L9: Sorting and Hashing","uri":"/databasel9/"},{"categories":["CS186"],"content":"Out-of-Core Algorithms core == RAM back in the day ","date":"2024-08-14","objectID":"/databasel9/:2:0","tags":null,"title":"CS186-L9: Sorting and Hashing","uri":"/databasel9/"},{"categories":["CS186"],"content":"Single Streaming data passing through the memory MapReduce’s “Map” 😎 ","date":"2024-08-14","objectID":"/databasel9/:2:1","tags":null,"title":"CS186-L9: Sorting and Hashing","uri":"/databasel9/"},{"categories":["CS186"],"content":"Better: Double Buffering 1. 主要线程处理 I/O 缓冲区中的数据 主线程负责在一个I/O缓冲区对（即输入缓冲区和输出缓冲区）上运行f(x)函数。 主线程完成计算后准备处理新的缓冲区数据时，会进行缓冲区的交换（Swap）。 2. 第二个 I/O 线程并行处理未使用的 I/O 缓冲区 第二个I/O线程并行操作，用于清空已满的输出缓冲区并填充新的输入缓冲区。 这种并行性能够提高系统性能，因为I/O操作通常较为耗时，而通过并行处理可以减少主线程的等待时间，从而更高效地利用CPU资源。 3. 为什么并行处理是可行的？ 原因：通常情况下，I/O操作比较慢，因此需要占用单独的线程来处理，以避免阻塞主线程。 主题：I/O处理通常需要独立的线程来管理，以提高整体处理效率。 4. 图解说明 图中显示了双缓冲机制下的处理流程：输入缓冲区和输出缓冲区成对出现，其中一对缓冲区在主线程中处理，而另一对缓冲区在I/O线程中处理。当主线程处理完当前缓冲区对时，两个线程会进行缓冲区交换。 总结 相比单缓冲的单次流式处理，双缓冲通过并行处理I/O操作，可以显著提高处理效率，尤其是在I/O操作较慢的情况下。主线程可以专注于计算，而不必等待I/O操作完成，进一步提升了系统的并行性和性能。 double buffering applies to all streams! assume that you have RAM buffers to spare! ","date":"2024-08-14","objectID":"/databasel9/:2:2","tags":null,"title":"CS186-L9: Sorting and Hashing","uri":"/databasel9/"},{"categories":["CS186"],"content":"Sorting and Hashing ","date":"2024-08-14","objectID":"/databasel9/:3:0","tags":null,"title":"CS186-L9: Sorting and Hashing","uri":"/databasel9/"},{"categories":["CS186"],"content":"Formal Specs a file $F$: a multiset of records $R$ consuming $N$ blocks of storage two “scratch” disks each with » $N$ blocks of free storage a fixed amount of space in RAM memory capacity equivalent to $B$ blocks of disk As for sorting: produce an output file $F_S$ with content $R$ stored in order by a given sorting criterion As for hashing: produce an output file $F_H$ with content $R$, arranged on disk so that no 2 records that have the same hash value are separated by a record with a different hash value i.e., consecutively stored on disk ","date":"2024-08-14","objectID":"/databasel9/:3:1","tags":null,"title":"CS186-L9: Sorting and Hashing","uri":"/databasel9/"},{"categories":["CS186"],"content":"Sorting Strawman Algorithm 注意左侧是没有sort的，右侧是sort之后的。 General External Merge Sort 基于RAM远远不够存放所有要排序的数据来讨论 side note: PASS意味着从所有的数据流disk流向另一个disk，可以认为是IO；RUN指的是 a sequence of sorted pages. see length = $B$，最后一个是变长的block $B$ pages/blocks —\u003e $B-1$ merge (有一个buffer是为了写入) 事实上很像一个Tree，分而治之然后不断合并中间结果 ","date":"2024-08-14","objectID":"/databasel9/:3:2","tags":null,"title":"CS186-L9: Sorting and Hashing","uri":"/databasel9/"},{"categories":["CS186"],"content":"Hashing ideal Divide and Conquer 通过 $2N$ pass将数据根据 $h_p$ 产生的哈希值分割成 $N$ 个block 对于每个分好大类别的block，重新hash从而实现相同内容的record连续存储， $2N$ pass 所以cost约为 $4N$ pass recursive partitioning for External Hashing 当divide时出现某个block的record数目太多时 check不同种类的hash数量，基于新的 $h_{r_1}$ 生成hash 如果数量为一，停止分割，写入磁盘 如果数量大于一，继续分割，直到数量小于等于 $B$ ","date":"2024-08-14","objectID":"/databasel9/:3:3","tags":null,"title":"CS186-L9: Sorting and Hashing","uri":"/databasel9/"},{"categories":["CS186"],"content":"hash and sort duality hash: divide-conquer sort: conquer-merge cost around $4N$ pass 对于一次完成容量为 $X$ 的任务，buffer 要求约为 $\\sqrt{X}$ ","date":"2024-08-14","objectID":"/databasel9/:4:0","tags":null,"title":"CS186-L9: Sorting and Hashing","uri":"/databasel9/"},{"categories":["CS186"],"content":"parallel sorting and hashing parallel hashing: 多了一个 $h_n$ 然后快了 parallel sorting: 多了一个 range 如何保证各个计算机工作量大致相同？===\u003e 快速估计数据集的分布 ","date":"2024-08-14","objectID":"/databasel9/:5:0","tags":null,"title":"CS186-L9: Sorting and Hashing","uri":"/databasel9/"},{"categories":["CS186"],"content":"Summary Hashing pros: for duplicate elimination, scales with # of values delete dups in the first pass VS. sort scales with # of items easy to shuffle in parallel Sorting pros: if need to be sorted Not sensitive to duplicates or “bad” hash functions (eg. many dups in data) ","date":"2024-08-14","objectID":"/databasel9/:6:0","tags":null,"title":"CS186-L9: Sorting and Hashing","uri":"/databasel9/"},{"categories":["CS186"],"content":"General Notes issues to consider in any index structure (not just in B+ tree) query support: what class of queries can be supported? choice of search key affects how we write the query data entry storage affect performance of the index variable-length keys tricks affect performance of the index cost model for Index vs Heap vs Sorted File ","date":"2024-08-14","objectID":"/databasel6/:1:0","tags":null,"title":"CS186-L6: Indices \u0026 B+ Tree Refinements","uri":"/databasel6/"},{"categories":["CS186"],"content":"query support ","date":"2024-08-14","objectID":"/databasel6/:2:0","tags":null,"title":"CS186-L6: Indices \u0026 B+ Tree Refinements","uri":"/databasel6/"},{"categories":["CS186"],"content":"Indexes basic selection \u003ckey\u003e\u003cop\u003e\u003cconstant\u003e 诸如=，BETWEEN，\u003e，\u003c，\u003e=，\u003c= more selection 维度灾难😲 但是这节课我们只是关注1-d range search, equality， B+ tree ","date":"2024-08-14","objectID":"/databasel6/:2:1","tags":null,"title":"CS186-L6: Indices \u0026 B+ Tree Refinements","uri":"/databasel6/"},{"categories":["CS186"],"content":"Search Key and Ordering 注意lexicographic! 以下给出了一个定义Composite Keys，多列，前等，尾唯一range 注意对Lexicographic Range的强调 ","date":"2024-08-14","objectID":"/databasel6/:3:0","tags":null,"title":"CS186-L6: Indices \u0026 B+ Tree Refinements","uri":"/databasel6/"},{"categories":["CS186"],"content":"Data Entry Storage ","date":"2024-08-14","objectID":"/databasel6/:4:0","tags":null,"title":"CS186-L6: Indices \u0026 B+ Tree Refinements","uri":"/databasel6/"},{"categories":["CS186"],"content":"intro the representation of data? itself or pointers to it? how data is stored? clustered or unclustered? ","date":"2024-08-14","objectID":"/databasel6/:4:1","tags":null,"title":"CS186-L6: Indices \u0026 B+ Tree Refinements","uri":"/databasel6/"},{"categories":["CS186"],"content":"representation alt. 1 index entry: (key, value) alt. 2 index entry: (key, recordID), remember recordID is…… alt. 3 index entry: (key, list of recordIDs) ","date":"2024-08-14","objectID":"/databasel6/:4:2","tags":null,"title":"CS186-L6: Indices \u0026 B+ Tree Refinements","uri":"/databasel6/"},{"categories":["CS186"],"content":"clustered vs unclustered index clustered is more efficient for IOs 🤔, range search and supports “compression” 🤔 ","date":"2024-08-14","objectID":"/databasel6/:4:3","tags":null,"title":"CS186-L6: Indices \u0026 B+ Tree Refinements","uri":"/databasel6/"},{"categories":["CS186"],"content":"Variable-length keys tricks 重新定义 Occupancy Invariant （当不是用整数来index时候） get more index entries to shorten the tree (avoiding long-time IOs) prefix key compression (only in leaf level 🤔, slightly change the order of keys?) suffix key compression ","date":"2024-08-14","objectID":"/databasel6/:5:0","tags":null,"title":"CS186-L6: Indices \u0026 B+ Tree Refinements","uri":"/databasel6/"},{"categories":["CS186"],"content":"B+ Tree Costs 这里引入新的假设： store by ref (see in alt. 2) clustered index with 2/3 full heap file pages clustered -\u003e heapfile is initially sorted fanout is larger ~ $O(Ref)$ assume static index 符号表达如下： $ B $ : num of full data blocks (why full? recall previous lecture) $ R $ : num of records per blocks $ D $ : Average time to r/w disk block $ F $ : avg internal node fanout $ E $ : avg num of data entries per leaf side note: Scan all records: $3/2$来自与占有率2/3， $\\frac{2}{3}B’ = B \\Rightarrow B’ = \\frac{3}{2}B \\Rightarrow B’D = \\frac{3}{2}B D$ Equality Search: $1 \\Rightarrow 2$ !! 来自于从page中读取slot从而获得具体的index并且读取数值, $log_F(BR/E)$ 是搜索page Range Search: 应该是 $(log_F(BR/E)+1+3*pages)*D$ Insert\u0026Delete: 应该是 $(log_F(BR/E)+4)*D$, index 1，读取数值 1，改变数值 1，改变index 1 big-O notation: 😸 ","date":"2024-08-14","objectID":"/databasel6/:6:0","tags":null,"title":"CS186-L6: Indices \u0026 B+ Tree Refinements","uri":"/databasel6/"},{"categories":["CS186"],"content":"Summary time-stamp: 01h42m07s ","date":"2024-08-14","objectID":"/databasel6/:7:0","tags":null,"title":"CS186-L6: Indices \u0026 B+ Tree Refinements","uri":"/databasel6/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab13.ipynb\") Lab 13: Decision Trees and Random Forests # Run this cell to set up your notebook import numpy as np import pandas as pd import matplotlib.pyplot as plt from matplotlib.colors import ListedColormap import seaborn as sns from sklearn.linear_model import LogisticRegression from sklearn.model_selection import train_test_split from sklearn import tree # you may get a warning from importing ensemble. It is OK to ignore said warning from sklearn import ensemble plt.style.use('fivethirtyeight') ","date":"2024-08-13","objectID":"/datalab13/:0:0","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"Objectives In this assignment, we will have you train a multi-class classifier with three different models (one-vs-rest logistic regression, decision trees, random forests) and compare the accuracies and decision boundaries created by each. ","date":"2024-08-13","objectID":"/datalab13/:1:0","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"[Tutorial] Dataset, EDA, and Classification Task We’ll be looking at a dataset of per-game stats for all NBA players in the 2018-19 season. This dataset comes from basketball-reference.com. # just run this cell nba_data = pd.read_csv(\"nba18-19.csv\") nba_data.head(5) Rk\rPlayer\rPos\rAge\rTm\rG\rGS\rMP\rFG\rFGA\r...\rFT%\rORB\rDRB\rTRB\rAST\rSTL\rBLK\rTOV\rPF\rPTS\r0\r1\rÁlex Abrines\\abrinal01\rSG\r25\rOKC\r31\r2\r19.0\r1.8\r5.1\r...\r0.923\r0.2\r1.4\r1.5\r0.6\r0.5\r0.2\r0.5\r1.7\r5.3\r1\r2\rQuincy Acy\\acyqu01\rPF\r28\rPHO\r10\r0\r12.3\r0.4\r1.8\r...\r0.700\r0.3\r2.2\r2.5\r0.8\r0.1\r0.4\r0.4\r2.4\r1.7\r2\r3\rJaylen Adams\\adamsja01\rPG\r22\rATL\r34\r1\r12.6\r1.1\r3.2\r...\r0.778\r0.3\r1.4\r1.8\r1.9\r0.4\r0.1\r0.8\r1.3\r3.2\r3\r4\rSteven Adams\\adamsst01\rC\r25\rOKC\r80\r80\r33.4\r6.0\r10.1\r...\r0.500\r4.9\r4.6\r9.5\r1.6\r1.5\r1.0\r1.7\r2.6\r13.9\r4\r5\rBam Adebayo\\adebaba01\rC\r21\rMIA\r82\r28\r23.3\r3.4\r5.9\r...\r0.735\r2.0\r5.3\r7.3\r2.2\r0.9\r0.8\r1.5\r2.5\r8.9\r5 rows × 30 columns Our goal will be to predict a player’s position given several other features. The 5 positions in basketball are PG, SG, SF, PF, and C (which stand for point guard, shooting guard, small forward, power forward, and center; Wikipedia). This information is contained in the Pos column: nba_data['Pos'].value_counts() Pos\rSG 176\rPF 147\rPG 139\rC 120\rSF 118\rPF-SF 2\rSF-SG 2\rSG-PF 1\rC-PF 1\rSG-SF 1\rPF-C 1\rName: count, dtype: int64\rThere are several features we could use to predict this position; check the Basketball statistics page of Wikipedia for more details on the statistics themselves. nba_data.columns Index(['Rk', 'Player', 'Pos', 'Age', 'Tm', 'G', 'GS', 'MP', 'FG', 'FGA', 'FG%',\r'3P', '3PA', '3P%', '2P', '2PA', '2P%', 'eFG%', 'FT', 'FTA', 'FT%',\r'ORB', 'DRB', 'TRB', 'AST', 'STL', 'BLK', 'TOV', 'PF', 'PTS'],\rdtype='object')\rIn this lab, we will restrict our exploration to two inputs: Rebounds (TRB) and Assists (AST). Two-input feature models will make our 2-D visualizations more straightforward. ","date":"2024-08-13","objectID":"/datalab13/:2:0","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"3-class classification While we could set out to try and perform 5-class classification, the results (and visualizations) are slightly more interesting if we try and categorize players into 1 of 3 categories: Guard, Forward, and Center. The below code will take the Pos column of our dataframe and use it to create a new column Pos3 that consist of values 'G', 'F', and 'C' (which stand for Guard, Forward, and Center). # just run this cell def basic_position(pos): if 'F' in pos: return 'F' elif 'G' in pos: return 'G' return 'C' nba_data['Pos3'] = nba_data['Pos'].apply(basic_position) nba_data['Pos3'].value_counts() Pos3\rG 315\rF 273\rC 120\rName: count, dtype: int64\r","date":"2024-08-13","objectID":"/datalab13/:2:1","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"Data Cleaning and Visualization Furthermore, since there are many players in the NBA (in the 2018-19 season there were 530 unique players), our visualizations can get noisy and messy. Let’s restrict our data to only contain rows for players that averaged 10 or more points per game. # just run this cell nba_data = nba_data[nba_data['PTS'] \u003e 10] Now, let’s look at a scatterplot of Rebounds (TRB) vs. Assists (AST). sns.scatterplot(data = nba_data, x = 'AST', y = 'TRB', hue = 'Pos3'); As you can see, when using just rebounds and assists as our features, we see pretty decent cluster separation. That is, Guards, Forward, and Centers appear in different regions of the plot. ","date":"2024-08-13","objectID":"/datalab13/:2:2","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"Question 1: Evaluating Split Quality We will explore different ways to evaluate split quality for classification and regression trees in this question. ","date":"2024-08-13","objectID":"/datalab13/:3:0","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"Question 1a: Entropy In lecture we defined the entropy $S$ of a node as: $$ S = -\\sum_{C} p_C \\log_{2} p_C $$ where $p_C$ is the proportion of data points in a node with label $C$. This function is a measure of the unpredictability of a node in a decision tree. Implement the entropy function, which outputs the entropy of a node with a given set of labels. The labels parameter is a list of labels in our dataset. For example, labels could be ['G', 'G', 'F', 'F', 'C', 'C']. def entropy(labels): _, counts = np.unique(labels, return_counts=True) ps = counts / counts.sum() return -np.sum(ps * np.log2(ps)) entropy(nba_data['Pos3']) np.float64(1.521555567956027)\rgrader.check(\"q1a\") ","date":"2024-08-13","objectID":"/datalab13/:3:1","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"Question 1b: Gini impurity Another metric for determining the quality of a split is Gini impurity. This is defined as the chance that a sample would be misclassified if randomly assigned at this point. Gini impurity is a popular alternative to entropy for determining the best split at a node, and it is in fact the default criterion for scikit-learn’s DecisionTreeClassifier. We can calculate the Gini impurity of a node with the formula ($p_C$ is the proportion of data points in a node with label $C$): $$ G = 1 - \\sum_{C} {p_C}^2 $$ Note that no logarithms are involved in the calculation of Gini impurity, which can make it faster to compute compared to entropy. Implement the gini_impurity function, which outputs the Gini impurity of a node with a given set of labels. The labels parameter is defined similarly to the previous part. def gini_impurity(labels): _, counts = np.unique(labels, return_counts=True) ps = counts / counts.sum() return 1 - np.sum(ps**2) gini_impurity(nba_data['Pos3']) np.float64(0.6383398017253514)\rgrader.check(\"q1b\") As an optional exercise in probability, try to think of a way to derive the formula for Gini impurity. ","date":"2024-08-13","objectID":"/datalab13/:3:2","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"[Tutorial] Variance Are there other splitting metrics beyond entropy and Gini impurity? Yes! A third metric is variance (yes, that variance), which is often used for regression trees, or decision tree regressors, which split data based on a continuous response variable. It makes little sense to use entropy/Gini impurity for regression, as both metrics assume that there are discrete probabilities of responses (and therefore are more suited to classification). Recall that the variance is defined as: $$ \\sigma^2 = \\frac{1}{N} \\sum_{i=1}^{N} (x_i - \\mu)^2 $$ where $\\mu$ is the mean, $N$ is the total number of data points, and $x_i$ is the value of each data point. Run the below cell to define the variance function. # just run this cell def variance(values): return np.mean((values - np.mean(values)) ** 2) # if we were predicting # points scored per player (regression) variance(nba_data['PTS']) np.float64(21.023148263588652)\r","date":"2024-08-13","objectID":"/datalab13/:3:3","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"Question 1c: Weighted Metrics In lecture, we used weighted entropy as a loss function to help us determine the best split. Recall that the weighted entropy is given by: $$ L = \\frac{N_1 S(X) + N_2 S(Y)}{N_1 + N_2} $$ $N_1$ is the number of samples in the left node $X$, and $N_2$ is the number of samples in the right node $Y$. This notion of a weighted average can be extended to other metrics such as Gini impurity and variance simply by changing the $S$ (entropy) function to $G$ (Gini impurity) or $\\sigma^2$ (variance). First, implement the weighted_metric function. The left parameter is a list of labels or values in the left node $X$, and the right parameter is a list of labels or values in the right node $Y$. The metric parameter is a function which can be entropy, gini_impurity, or variance. For entropy and gini_impurity, you may assume that left and right contain discrete labels. For variance, you may assume that left and right contain continuous values. Then, assign we_pos3_age_30 to the weighted entropy (in the Pos3 column) of a split that partitions nba_data into two groups: a group with players who are 30 years old or older and a group with players who are younger than 30 years old. nba_data['Pos3'] 3 C\r7 C\r10 C\r19 F\r21 F\r..\r695 G\r698 F\r699 G\r700 C\r703 C\rName: Pos3, Length: 223, dtype: object\rdef weighted_metric(left, right, metric): return (len(left) * metric(left) + len(right) * metric(right)) / (len(left) + len(right)) we_pos3_age_30 = weighted_metric(nba_data.loc[nba_data['Age']\u003e=30, 'Pos3'], nba_data.loc[nba_data['Age'] \u003c 30, 'Pos3'], entropy) we_pos3_age_30 np.float64(1.521489768014793)\rgrader.check(\"q1c\") We will not go over the entire decision tree fitting process in this assignment, but you now have the basic tools to fit a decision tree. As an optional exercise, try to think about how you would extend these tools to fit a decision tree from scratch. Question 2: Classification Let’s switch gears to classification. Before fitting any models, let’s first split nba_data into a training set and test set. # just run this cell nba_train, nba_test = train_test_split(nba_data, test_size=0.25, random_state=100) nba_train = nba_train.sort_values(by='Pos') nba_test = nba_test.sort_values(by='Pos') ","date":"2024-08-13","objectID":"/datalab13/:3:4","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"One-vs-Rest Logistic Regression We only discussed binary logistic regression in class, but there is a natural extension to binary logistic regression called one-vs-rest logistic regression for multiclass classification. In essence, one-vs-rest logistic regression simply builds one binary logistic regression classifier for each of the $N$ classes (in this scenario $N = 3$). We then predict the class corresponding to the classifier that gives the highest probability among the $N$ classes. ","date":"2024-08-13","objectID":"/datalab13/:4:0","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"Question 2a In the cell below, set logistic_regression_model to be a one-vs-rest logistic regression model. Then, fit that model using the AST and TRB columns (in that order) from nba_train as our features, and Pos3 as our response variable. Remember, sklearn.linear_model.LogisticRegression (documentation) has already been imported for you. There is an optional parameter multi_class you need to specify in order to make your model a multi-class one-vs-rest classifier. See the documentation for more details. logistic_regression_model = LogisticRegression(multi_class='ovr') logistic_regression_model.fit(nba_train[['AST', 'TRB']], nba_train['Pos3']) grader.check(\"q2a\") q2a passed! 🙌 ","date":"2024-08-13","objectID":"/datalab13/:4:1","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"[Tutorial] Visualizing Performance To see our classifier in action, we can use logistic_regression_model.predict and see what it outputs. # just run this cell nba_train['Predicted (OVRLR) Pos3'] = logistic_regression_model.predict(nba_train[['AST', 'TRB']]) nba_train[['AST', 'TRB', 'Pos3', 'Predicted (OVRLR) Pos3']].head(15) AST\rTRB\rPos3\rPredicted (OVRLR) Pos3\r655\r1.4\r8.6\rC\rC\r644\r2.0\r10.2\rC\rC\r703\r0.8\r4.5\rC\rF\r652\r1.6\r7.2\rC\rF\r165\r1.4\r7.5\rC\rC\r122\r2.4\r8.4\rC\rC\r353\r7.3\r10.8\rC\rC\r367\r1.4\r8.6\rC\rC\r408\r1.2\r4.9\rC\rF\r161\r3.9\r12.0\rC\rC\r647\r3.4\r12.4\rC\rC\r308\r4.2\r6.7\rC\rG\r362\r3.0\r11.4\rC\rC\r146\r3.6\r8.2\rC\rC\r233\r4.4\r7.9\rC\rC\rOur model does decently well here, as you can see visually above. Below, we compute the training accuracy; remember that model.score() computes accuracy. lr_training_accuracy = logistic_regression_model.score(nba_train[['AST', 'TRB']], nba_train['Pos3']) lr_training_accuracy 0.7964071856287425\rWe can compute the test accuracy as well by looking at nba_test instead of nba_train: lr_test_accuracy = logistic_regression_model.score(nba_test[['AST', 'TRB']], nba_test['Pos3']) lr_test_accuracy 0.6428571428571429\rNow, let’s draw the decision boundary for this logistic regression classifier, and see how the classifier performs on both the training and test data. # just run this cell to save the helper function def plot_decision_boundaries(model, nba_dataset, title=None, ax=None): sns_cmap = ListedColormap(np.array(sns.color_palette())[0:3, :]) xx, yy = np.meshgrid(np.arange(0, 12, 0.02), np.arange(0, 16, 0.02)) Z_string = model.predict(np.c_[xx.ravel(), yy.ravel()]) categories, Z_int = np.unique(Z_string, return_inverse = True) Z_int = Z_int.reshape(xx.shape) if ax is None: plt.figure() ax = plt.gca() ax.contourf(xx, yy, Z_int, cmap = sns_cmap) sns.scatterplot(data = nba_dataset, x = 'AST', y = 'TRB', hue = 'Pos3', ax=ax) if title is not None: ax.set_title(title) # just run this cell plot_decision_boundaries(logistic_regression_model, nba_train, \"Logistic Regression on nba_train\") d:\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\rwarnings.warn(\r# just run this cell plot_decision_boundaries(logistic_regression_model, nba_test, \"Logistic Regression on nba_test\") d:\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\rwarnings.warn(\rOur one-vs-rest logistic regression was able to find a linear decision boundary between the three classes. It generally classifies centers as players with a lot of rebounds, forwards as players with a medium number of rebounds and a low number of assists, and guards as players with a low number of rebounds. Note: In practice we would use many more features – we only used 2 here just so that we could visualize the decision boundary. ","date":"2024-08-13","objectID":"/datalab13/:4:2","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"Decision Trees ","date":"2024-08-13","objectID":"/datalab13/:5:0","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"Question 2b Let’s now create a decision tree classifier on the same training data nba_train, and look at the resulting decision boundary. In the following cell, first, use tree.DecisionTreeClassifier (documentation) to fit a model using the same features and response as above, and call this model decision_tree_model. Set the random_state and criterion parameters to 42 and entropy, respectively. Hint: Your code will be mostly the same as the previous part. decision_tree_model = tree.DecisionTreeClassifier(random_state=42, criterion='entropy') decision_tree_model.fit(nba_train[['AST', 'TRB']], nba_train['Pos3']) # logistic_regression_model = LogisticRegression(multi_class='ovr') # logistic_regression_model.fit(nba_train[['AST', 'TRB']], nba_train['Pos3']) grader.check(\"q2b\") q2b passed! 🌟 ","date":"2024-08-13","objectID":"/datalab13/:5:1","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"[Tutorial] Decision Tree Performance Now, let’s draw the decision boundary for this decision tree classifier, and see how the classifier performs on both the training and test data. # just run this cell plot_decision_boundaries(decision_tree_model, nba_train, \"Decision Tree on nba_train\") d:\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\rwarnings.warn(\r# just run this cell plot_decision_boundaries(decision_tree_model, nba_test, \"Decision Tree on nba_test\") d:\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\rwarnings.warn(\rWe compute the training and test accuracies of the decision tree model below. dt_training_accuracy = decision_tree_model.score(nba_train[['AST', 'TRB']], nba_train['Pos3']) dt_test_accuracy = decision_tree_model.score(nba_test[['AST', 'TRB']], nba_test['Pos3']) dt_training_accuracy, dt_test_accuracy (0.9940119760479041, 0.5714285714285714)\r","date":"2024-08-13","objectID":"/datalab13/:5:2","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"Random Forests ","date":"2024-08-13","objectID":"/datalab13/:6:0","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"Question 2c Let’s now create a random forest classifier on the same training data nba_train and look at the resulting decision boundary. In the following cell, use ensemble.RandomForestClassifier (documentation) to fit a model using the same features and response as above, and call this model random_forest_model. Use 20 trees in your random forest classifier; set the random_state and criterion parameters to 42 and entropy, respectively. Hint: Your code for both parts will be mostly the same as the first few parts of this question. Hint: Look at the n_estimators parameter of ensemble.RandomForestClassifier. random_forest_model = ensemble.RandomForestClassifier(n_estimators=20, random_state=42, criterion='entropy') random_forest_model.fit(nba_train[['AST', 'TRB']], nba_train['Pos3']) grader.check(\"q2c\") q2c passed! 🙌 ","date":"2024-08-13","objectID":"/datalab13/:6:1","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"[Tutorial] Random Forest Performance Now, let’s draw the decision boundary for this random forest classifier, and see how the classifier performs on both the training and test data. # just run this cell plot_decision_boundaries(random_forest_model, nba_train, \"Random Forest on nba_train\") d:\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\rwarnings.warn(\r# just run this cell plot_decision_boundaries(random_forest_model, nba_test, \"Random Forest on nba_test\") d:\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\rwarnings.warn(\rWe compute the training and test accuracies of the random forest model below. # just run this cell rf_train_accuracy = random_forest_model.score(nba_train[['AST', 'TRB']], nba_train['Pos3']) rf_test_accuracy = random_forest_model.score(nba_test[['AST', 'TRB']], nba_test['Pos3']) rf_train_accuracy, rf_test_accuracy (0.9760479041916168, 0.6964285714285714)\r","date":"2024-08-13","objectID":"/datalab13/:6:2","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"Compare/Contrast How do the three models you created (multiclass one-vs-rest logistic regression, decision tree, random forest) compare to each other?) Decision boundaries: Run the below cell for your convenience. It overlays the decision boundaries for the train and test sets for each of the models you created. # just run this cell fig, axs = plt.subplots(2, 3, figsize=(12, 6)) for j, (model, title) in enumerate([(logistic_regression_model, \"Logistic Regression\"), (decision_tree_model, \"Decision Tree\"), (random_forest_model, \"Random Forest\")]): axs[0, j].set_title(title) for i, nba_dataset in enumerate([nba_train, nba_test]): plot_decision_boundaries(model, nba_dataset, ax=axs[i, j]) # reset leftmost ylabels axs[0, 0].set_ylabel(\"nba_train\\nTRB\") axs[1, 0].set_ylabel(\"nba_test\\nTRB\") fig.tight_layout() d:\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\rwarnings.warn(\rd:\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but LogisticRegression was fitted with feature names\rwarnings.warn(\rd:\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\rwarnings.warn(\rd:\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but DecisionTreeClassifier was fitted with feature names\rwarnings.warn(\rd:\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\rwarnings.warn(\rd:\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names\rwarnings.warn(\rPerformance Metrics: Run the below cell for your convenience. It summarizes the train and test accuracies for the three models you created. # just run this cell train_accuracy = [lr_training_accuracy, lr_test_accuracy, dt_training_accuracy, dt_test_accuracy, rf_train_accuracy, rf_test_accuracy] index = ['OVR Logistic Regression', 'Decision Tree', 'Random Forest'] df = pd.DataFrame([(lr_training_accuracy, lr_test_accuracy), (dt_training_accuracy, dt_test_accuracy), (rf_train_accuracy, rf_test_accuracy)], columns=['Training Accuracy', 'Test Accuracy'], index=index) df.plot.bar(); plt.legend().remove() # remove legend from plot itself plt.gcf().legend(loc='lower right') # and add legend to bottom of figure \u003cmatplotlib.legend.Legend at 0x21314df30e0\u003e\r","date":"2024-08-13","objectID":"/datalab13/:7:0","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":"Question 2d Looking at the three models, which model performed the best on the training set, and which model performed the best on the test set? How are the training and test accuracy related for the three models, and how do the decision boundaries generated for each of the three models relate to the model’s performance? DT OVRLR [ungraded] Question 3: Regression Trees In Project 1, we used linear regression to predict housing prices in Cook County, Illinois. However, what would happen if we tried to use a different prediction method? Try fitting a regression tree (also known as a decision tree regressor) to predict housing prices. Here’s one in sklearn: https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeRegressor.html What do you notice about the training error and the test error for the decision tree regressor? Is one significantly larger than the other? If so, what methods could we use to make this error lower? Now, try fitting a random forest regressor instead of a single decision tree. What do you notice about the training error and the test error for the random forest, and how does this compare to the training and test error of a single decision tree? see in project 1 Congratulations! You finished the lab! ","date":"2024-08-13","objectID":"/datalab13/:7:1","tags":["Scikit-Learn"],"title":"DATA100-lab13: Decision Trees and Random Forests","uri":"/datalab13/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab14.ipynb\") Ungraded Lab 14: Clustering In this lab you will explore K-Means, Agglomerative Clustering, and Spectral Clustering. Spectral Clustering is out of scope for Spring 2022.ref. Note: This is an ungraded assignment. There is no Gradescope submission for this assignment. As this is a bonus and ungraded assignment, there will also be more limited staff office hours devoted to this ungraded homework. We may prioritize students who have other questions. import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from sklearn import cluster # more readable exceptions %pip install --quiet iwut %load_ext iwut %wut on Note: you may need to restart the kernel to use updated packages.\rIn the first part of this lab, we work with three different toy datasets, all with different clustering characteristics. In the second part, we explore a real-world dataset from the World Bank. ","date":"2024-08-13","objectID":"/datalab14/:0:0","tags":["Scikit-Learn"],"title":"DATA100-lab14: Clustering","uri":"/datalab14/"},{"categories":["DATA100"],"content":"Toy Data 1: Balanced Clusters Let us begin with a toy dataset with three groups that are completely separated with the variables given. There are the same number of points per group and the same variance within each group. # just run this cell np.random.seed(1337) c1 = np.random.normal(size = (25, 2)) c2 = np.array([2, 8]) + np.random.normal(size = (25, 2)) c3 = np.array([8, 4]) + np.random.normal(size = (25, 2)) x1 = np.vstack((c1, c2, c3)) sns.scatterplot(x = x1[:, 0], y = x1[:, 1]); Below, we create a cluster.KMeans object (documentation) which implements the K-Means algorithm. # just run this cell kmeans = cluster.KMeans(n_clusters = 3, random_state = 42).fit(x1) sns.scatterplot(x = x1[:, 0], y = x1[:, 1], hue = kmeans.labels_) sns.scatterplot(x = kmeans.cluster_centers_[:, 0], y = kmeans.cluster_centers_[:, 1], color = 'blue', marker = 'x', s = 300, linewidth = 5); We observe that K-Means is able to accurately pick out the three initial clusters. ","date":"2024-08-13","objectID":"/datalab14/:1:0","tags":["Scikit-Learn"],"title":"DATA100-lab14: Clustering","uri":"/datalab14/"},{"categories":["DATA100"],"content":"Question 1: Initial Centers In the previous example, the K-Means algorithm was able to accurately find the three initial clusters. However, changing the starting centers for K-Means can change the final clusters that K-Means gives us. Change the initial centers to the points [0, 1], [1, 1], and [2, 2]; and fit a cluster.KMeans object (documentation) called kmeans_q1 on the toy dataset from the previous example. Keep the random_state parameter as 42 and the n_clusters parameter as 3. Hint: You will need to change the init and n_init parameters in cluster.KMeans. kmeans_q1 = cluster.KMeans(n_clusters = 3, random_state = 42, init=[[0,1],[1,1],[2,2]], n_init=1).fit(x1) grader.check(\"q1\") q1 passed! 🍀 Running the K-Means algorithm with these centers gives us a different result from before, and this particular run of K-Means was unable to accurately find the three initial clusters. sns.scatterplot(x = x1[:, 0], y = x1[:, 1], hue = kmeans_q1.labels_) sns.scatterplot(x = kmeans_q1.cluster_centers_[:, 0], y = kmeans_q1.cluster_centers_[:, 1], color = 'blue', marker = 'x', s = 300, linewidth = 5); ","date":"2024-08-13","objectID":"/datalab14/:2:0","tags":["Scikit-Learn"],"title":"DATA100-lab14: Clustering","uri":"/datalab14/"},{"categories":["DATA100"],"content":"Toy Data 2: Clusters of Different Sizes Sometimes, K-Means will have a difficult time finding the “correct” clusters even with ideal starting centers. For example, consider the data below. # just run this cell np.random.seed(1337) c1 = 0.5 * np.random.normal(size = (25, 2)) c2 = np.array([10, 10]) + 3 * np.random.normal(size = (475, 2)) x2 = np.vstack((c1, c2)) sns.scatterplot(x = x2[:, 0], y = x2[:, 1]); There are two groups of different sizes in two different senses: variability (i.e., spread) and number of datapoints. The smaller group has both smaller variability and has fewer datapoints, and the larger of the two groups is more diffuse and populated. ","date":"2024-08-13","objectID":"/datalab14/:3:0","tags":["Scikit-Learn"],"title":"DATA100-lab14: Clustering","uri":"/datalab14/"},{"categories":["DATA100"],"content":"Question 2 ","date":"2024-08-13","objectID":"/datalab14/:4:0","tags":["Scikit-Learn"],"title":"DATA100-lab14: Clustering","uri":"/datalab14/"},{"categories":["DATA100"],"content":"Question 2a: K-Means Fit a cluster.KMeans object (documentation) called kmeans_q2a on the dataset above with two clusters and a random_state parameter of 42. kmeans_q2a = cluster.KMeans(n_clusters=2, random_state=42).fit(x2) grader.check(\"q2a\") q2a passed! 🍀 (For notational simplicity we will call the initial cluster on the bottom left $A$ and the initial cluster on the top right $B$. We will call the bottom left cluster found by K-Means as cluster $a$ and the top right cluster found by K-Means as cluster $b$.) As seen below, K-Means is unable to find the two intial clusters because cluster $A$ includes points from cluster $B$. Recall that K-Means attempts to minimize inertia (惯性？), so it makes sense that points in the bottom left of cluster $B$ would prefer to be in cluster $A$ rather than cluster $B$. If these points were in cluster $B$ instead, then the resulting cluster assignments would have a larger distortion(歪曲). # just run this cell sns.scatterplot(x = x2[:, 0], y = x2[:, 1], hue = kmeans_q2a.labels_) sns.scatterplot(x = kmeans_q2a.cluster_centers_[:, 0], y = kmeans_q2a.cluster_centers_[:, 1], color = 'red', marker = 'x', s = 300, linewidth = 5); ","date":"2024-08-13","objectID":"/datalab14/:4:1","tags":["Scikit-Learn"],"title":"DATA100-lab14: Clustering","uri":"/datalab14/"},{"categories":["DATA100"],"content":"Agglomerative Clustering: The Linkage Criterion It turns out agglomerative clustering works better for this task, as long as we choose the right definition of distance between two clusters. Recall that agglomerative clustering starts with every data point in its own cluster and iteratively joins the two closest clusters until there are $k$ clusters remaining. However, the “distance” between two clusters is ambiguous. In lecture, we used the maximum distance between a point in the first cluster and a point in the second as this notion of distance, but there are other ways to define the distance between two clusters. Our choice of definition for the distance is sometimes called the “linkage criterion.” We will discuss three linkage criteria, each of which is a different definition of “distance” between two clusters: Complete linkage considers the distance between two clusters as the maximum distance between a point in the first cluster and a point in the second. This is what you will see in Lecture 26. Single linkage considers the distance between two clusters as the minimum distance between a point in the first cluster and a point in the second. Average linkage considers the distance between two clusters as the average distance between a point in the first cluster and a point in the second. Below, we fit a cluster.AgglomerativeClustering object (documentation) called agg_complete on the dataset above with two clusters, using the complete linkage criterion. # just run this cell agg_complete = cluster.AgglomerativeClustering(n_clusters = 2, linkage = 'complete').fit(x2) Below we visualize the results: # just run this cell sns.scatterplot(x = x2[:, 0], y = x2[:, 1], hue = agg_complete.labels_); It looks like complete linkage agglomerative clustering has the same issue as K-Means! The bottom left cluster found by complete linkage agglomerative clustering includes points from the top right cluster. However, we can remedy this by picking a different linkage criterion. ","date":"2024-08-13","objectID":"/datalab14/:4:2","tags":["Scikit-Learn"],"title":"DATA100-lab14: Clustering","uri":"/datalab14/"},{"categories":["DATA100"],"content":"Question 2b: Agglomerative Clustering Now, use the single linkage criterion to fit a cluster.AgglomerativeClustering object called agg_single on the dataset above with two clusters. agg_single = cluster.AgglomerativeClustering(n_clusters = 2, linkage = 'single').fit(x2) grader.check(\"q2b\") q2b passed! 🌟 Finally, we see that single linkage agglomerative clustering is able to find the two initial clusters. sns.scatterplot(x = x2[:, 0], y = x2[:, 1], hue = agg_single.labels_); You might be curious why single linkage “works” while complete linkage does not in this scenario; we will leave this as an exercise for students who are interested. ","date":"2024-08-13","objectID":"/datalab14/:4:3","tags":["Scikit-Learn"],"title":"DATA100-lab14: Clustering","uri":"/datalab14/"},{"categories":["DATA100"],"content":"Toy Data 3: Oddly Shaped Clusters Another example when k-means fails is when the clusters have odd shapes. For example, look at the following dataset. np.random.seed(100) data = np.random.normal(0, 7, size = (1000, 2)) lengths = np.linalg.norm(data, axis = 1, ord = 2) x3 = data[(lengths \u003c 2) | ((lengths \u003e 5) \u0026 (lengths \u003c 7)) | ((lengths \u003e 11) \u0026 (lengths \u003c 15))] sns.scatterplot(x = x3[:, 0], y = x3[:, 1]); Looking at this data, we might say there are 3 clusters, corresponding to each of the 3 concentric circles, with the same center. However, k-means will fail. kmeans_q3 = cluster.KMeans(n_clusters = 3, random_state = 42).fit(x3) sns.scatterplot(x = x3[:, 0], y = x3[:, 1], hue = kmeans_q3.labels_) sns.scatterplot(x = kmeans_q3.cluster_centers_[:, 0], y = kmeans_q3.cluster_centers_[:, 1], color = 'red', marker = 'x', s = 300, linewidth = 5); ","date":"2024-08-13","objectID":"/datalab14/:5:0","tags":["Scikit-Learn"],"title":"DATA100-lab14: Clustering","uri":"/datalab14/"},{"categories":["DATA100"],"content":"(Bonus) Question 3: Spectral Clustering (Note in Spring 2022 we did not go over Spectral Clustering. Spectral Clustering is out of scope for exams.) Let’s try spectral clustering instead. In the cell below, create and fit a cluster.SpectralClustering object (documentation), and assign it to spectral. Use 3 clusters, and make sure you set affinity to \"nearest_neighbors\" and a random_state of 10. Note: Ignore any warnings about the graph not being fully connected. spectral = cluster.SpectralClustering(n_clusters=3, affinity='nearest_neighbors', random_state=10).fit(x3) d:\\miniconda3\\envs\\ds100\\Lib\\site-packages\\sklearn\\manifold\\_spectral_embedding.py:329: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\rwarnings.warn(\rgrader.check(\"q3\") q3 passed! ✨ Below, we see that spectral clustering is able to find the three rings, when k-means does not. sns.scatterplot(x = x3[:, 0], y = x3[:, 1], hue = spectral.labels_); ","date":"2024-08-13","objectID":"/datalab14/:6:0","tags":["Scikit-Learn"],"title":"DATA100-lab14: Clustering","uri":"/datalab14/"},{"categories":["DATA100"],"content":"The World Bank Dataset In the previous three questions, we looked at clustering on two dimensional datasets. However, we can easily use clustering on data which have more than two dimensions. For this, let us turn to a World Bank dataset, containing various features for the world’s countries. This data comes from https://databank.worldbank.org/source/world-development-indicators#. world_bank_data = pd.read_csv(\"world_bank_data.csv\", index_col = 'country') world_bank_data.head(5) Age dependency ratio (% of working-age population)\rAge dependency ratio, old (% of working-age population)\rAge dependency ratio, young (% of working-age population)\rBird species, threatened\rBusiness extent of disclosure index (0=less disclosure to 10=more disclosure)\rContributing family workers, female (% of female employment) (modeled ILO estimate)\rContributing family workers, male (% of male employment) (modeled ILO estimate)\rContributing family workers, total (% of total employment) (modeled ILO estimate)\rCost of business start-up procedures (% of GNI per capita)\rCost of business start-up procedures, female (% of GNI per capita)\r...\rUnemployment, youth total (% of total labor force ages 15-24) (modeled ILO estimate)\rUrban population\rUrban population (% of total population)\rUrban population growth (annual %)\rVulnerable employment, female (% of female employment) (modeled ILO estimate)\rVulnerable employment, male (% of male employment) (modeled ILO estimate)\rVulnerable employment, total (% of total employment) (modeled ILO estimate)\rWage and salaried workers, female (% of female employment) (modeled ILO estimate)\rWage and salaried workers, male (% of male employment) (modeled ILO estimate)\rWage and salaried workers, total (% of total employment) (modeled ILO estimate)\rcountry\rAlgeria\r57.508032\r10.021442\r47.486590\r15.0\r4.0\r2.720000\r1.836\r1.978000\r0.0\r11.8\r...\r29.952999\r30670086.0\r72.629\r2.804996\r24.337001\r27.227001\r26.762000\r73.734001\r68.160004\r69.056000\rAfghanistan\r84.077656\r4.758273\r79.319383\r16.0\r8.0\r71.780998\r9.606\r31.577999\r0.0\r6.4\r...\r2.639000\r9477100.0\r25.495\r3.350383\r95.573997\r85.993001\r89.378998\r4.282000\r13.292000\r10.108000\rAlbania\r45.810037\r20.041214\r25.768823\r8.0\r9.0\r37.987000\r20.795\r28.076000\r0.0\r11.3\r...\r30.979000\r1728969.0\r60.319\r1.317162\r54.663000\r54.994001\r54.854000\r44.320999\r41.542999\r42.720001\rAmerican Samoa\rNaN\rNaN\rNaN\r8.0\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\r...\rNaN\r48339.0\r87.153\r-0.299516\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\rAndorra\rNaN\rNaN\rNaN\r3.0\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\r...\rNaN\r67813.0\r88.062\r-0.092859\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\r5 rows × 209 columns There are some missing values. For the sake of convenience and of keeping the lab short, we will fill them all with zeros. world_bank_data = world_bank_data.fillna(0) Like with PCA, it sometimes makes sense to center and scale our data so that features with higher variance don’t dominate the analysis. For example, without standardization, statistics like population will completely dominate features like “percent of total population that live in urban areas.” This is because the range of populations is on the order of billions, whereas percentages are always between 0 and 100. The ultimate effect is that many of our columns are not really considered by our clustering algorithm. ","date":"2024-08-13","objectID":"/datalab14/:7:0","tags":["Scikit-Learn"],"title":"DATA100-lab14: Clustering","uri":"/datalab14/"},{"categories":["DATA100"],"content":"Question 4 Below, fit a cluster.KMeans object called kmeans_q4 with four clusters and a random_state parameter of 42. Make sure you should use a centered and scaled version of the world bank data. By centered and scaled we mean that the mean in each column should be zero and the variance should be 1. world_bank_data = (world_bank_data - world_bank_data.mean(axis=0)) / world_bank_data.std(axis=0) kmeans_q4 = cluster.KMeans(n_clusters = 4, random_state = 42).fit(world_bank_data) sorted(np.unique(kmeans_q4.labels_, return_counts = True)[1]) [np.int64(3), np.int64(23), np.int64(85), np.int64(106)]\rbelow is very interesting, note that in ref. all tests passed. —\u003e maybe Cluster itself changed? grader.check(\"q4\") q4 results: q4 - 1 result: ❌ Test case failed\rTrying:\rsorted(np.unique(kmeans_q4.labels_, return_counts = True)[1]) == [3, 25, 90, 99]\rExpecting:\rTrue\r**********************************************************************\rLine 1, in q4 0\rFailed example:\rsorted(np.unique(kmeans_q4.labels_, return_counts = True)[1]) == [3, 25, 90, 99]\rExpected:\rTrue\rGot:\rFalse\rLooking at these new clusters, we see that they seem to correspond to: 0: Very small countries. 1: Developed countries. 2: Less developed countries. 3: Huge countries. # just run this cell labeled_world_bank_data_q4 = pd.Series(kmeans_q4.labels_, name = \"cluster\", index = world_bank_data.index).to_frame() for c in range(4): print(f\"\u003e\u003e\u003e Cluster {c}:\") print(list(labeled_world_bank_data_q4.query(f'cluster == {c}').index)) print() \u003e\u003e\u003e Cluster 0:\r['Afghanistan', 'Angola', 'Bangladesh', 'Belize', 'Benin', 'Bhutan', 'Bolivia', 'Botswana', 'Burkina Faso', 'Burundi', 'Cambodia', 'Cameroon', 'Central African Republic', 'Chad', 'Comoros', 'Congo, Dem. Rep.', 'Congo, Rep.', \"Cote d'Ivoire\", 'Djibouti', 'Ecuador', 'Egypt, Arab Rep.', 'Equatorial Guinea', 'Eritrea', 'Eswatini', 'Ethiopia', 'Fiji', 'Gabon', 'Gambia, The', 'Ghana', 'Guatemala', 'Guinea', 'Guinea-Bissau', 'Guyana', 'Haiti', 'Honduras', 'Indonesia', 'Iraq', 'Kenya', 'Kiribati', 'Kyrgyz Republic', 'Lao PDR', 'Lesotho', 'Liberia', 'Madagascar', 'Malawi', 'Mali', 'Mauritania', 'Micronesia, Fed. Sts.', 'Mongolia', 'Morocco', 'Mozambique', 'Myanmar', 'Namibia', 'Nepal', 'Nicaragua', 'Niger', 'Nigeria', 'Pakistan', 'Papua New Guinea', 'Paraguay', 'Philippines', 'Rwanda', 'Samoa', 'Sao Tome and Principe', 'Senegal', 'Sierra Leone', 'Solomon Islands', 'Somalia', 'South Sudan', 'Sudan', 'Syrian Arab Republic', 'Tajikistan', 'Tanzania', 'Timor-Leste', 'Togo', 'Tonga', 'Uganda', 'Uzbekistan', 'Vanuatu', 'Venezuela, RB', 'Vietnam', 'West Bank and Gaza', 'Yemen, Rep.', 'Zambia', 'Zimbabwe']\r\u003e\u003e\u003e Cluster 1:\r['China', 'India', 'United States']\r\u003e\u003e\u003e Cluster 2:\r['American Samoa', 'Andorra', 'Bermuda', 'British Virgin Islands', 'Cayman Islands', 'Dominica', 'Faroe Islands', 'Gibraltar', 'Greenland', 'Isle of Man', 'Kosovo', 'Liechtenstein', 'Marshall Islands', 'Monaco', 'Nauru', 'Northern Mariana Islands', 'Palau', 'San Marino', 'Sint Maarten (Dutch part)', 'St. Kitts and Nevis', 'St. Martin (French part)', 'Turks and Caicos Islands', 'Tuvalu']\r\u003e\u003e\u003e Cluster 3:\r['Algeria', 'Albania', 'Antigua and Barbuda', 'Argentina', 'Armenia', 'Aruba', 'Australia', 'Austria', 'Azerbaijan', 'Bahamas, The', 'Bahrain', 'Barbados', 'Belarus', 'Belgium', 'Bosnia and Herzegovina', 'Brazil', 'Brunei Darussalam', 'Bulgaria', 'Cabo Verde', 'Canada', 'Channel Islands', 'Chile', 'Colombia', 'Costa Rica', 'Croatia', 'Cuba', 'Curacao', 'Cyprus', 'Czech Republic', 'Denmark', 'Dominican Republic', 'El Salvador', 'Estonia', 'Finland', 'France', 'French Polynesia', 'Georgia', 'Germany', 'Greece', 'Grenada', 'Guam', 'Hong Kong SAR, China', 'Hungary', 'Iceland', 'Iran, Islamic Rep.', 'Ireland', 'Israel', 'Italy', 'Jamaica', 'Japan', 'Jordan', 'Kazakhstan', 'Korea, Dem. People’s Rep.', 'Korea, Rep.', 'Kuwait', 'Latvia', 'Lebanon', 'Libya', 'Lithuania', 'Luxembourg', 'Macao SAR, China', 'Malaysia', 'Maldives', 'Malta', 'Mauritius', 'Mexico', 'Moldova', 'Montenegro', 'Netherlan","date":"2024-08-13","objectID":"/datalab14/:8:0","tags":["Scikit-Learn"],"title":"DATA100-lab14: Clustering","uri":"/datalab14/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab11.ipynb\") Lab 11: Principal Component Analysis In this lab assignment, we will walk through two examples that use Principal Component Analysis (PCA): one involving a dataset of iris plants, and another involving an artificial “surfboard” 3D dataset. # Run this cell to set up your notebook from sklearn.datasets import load_iris import matplotlib.pyplot as plt import numpy as np import pandas as pd import plotly.express as px import seaborn as sns plt.style.use('fivethirtyeight') # Use plt.style.available to see more styles sns.set() sns.set_context(\"talk\") %matplotlib inline In lecture we discussed how Principal Component Analysis (PCA) can be used for dimensionality reduction. Specifically, given a high dimensional dataset, PCA allows us to: Understand the rank of the data. If $k$ principal components capture almost all of the variance, then the data is roughly rank $k$. Create 2D scatterplots of the data. Such plots are a rank 2 representation of our data, and allow us to visually identify clusters of similar observations. In this lab, you’ll learn how to perform PCA using the np.linalg package (Part 1), and you’ll also build a geometric intuition of PCA to help you understand its strengths (Part 2). We work with low-dimensional datasets for now to focus on the basics; in the homework, you’ll explore how PCA works on a high-dimensional dataset. Part 1: The Iris Dataset To begin, run the following cell to load the dataset into this notebook. iris_features will contain a numpy array of 4 attributes for 150 different plants (shape 150 x 4). iris_target will contain the class of each plant. There are 3 classes of plants in the dataset: Iris-Setosa, Iris-Versicolour, and Iris-Virginica. The class names will be stored in iris_target_names. iris_feature_names will be a list of 4 names, one for each attribute in iris_features. # just run this cell from sklearn.datasets import load_iris iris_data = load_iris() # Loading the dataset # Unpacking the data into arrays iris_features = iris_data['data'] iris_target = iris_data['target'] iris_feature_names = iris_data['feature_names'] iris_target_names = iris_data['target_names'] # Convert iris_target to string labels instead of int labels currently (0, 1, 2) for the classes iris_target = iris_target_names[iris_target] Let’s explore the data by creating a scatter matrix of our iris features. To do this, we’ll create 2D scatter plots for every possible pair of our four features. This should result in six total scatter plots in our scatter matrix with the classes labeled in distinct colors for each plot. # just run this cell fig = plt.figure(figsize=(14, 10)) plt.suptitle(\"Scatter Matrix of Iris Features\", fontsize=20) plt.subplots_adjust(wspace=0.3, hspace=0.3) for i in range(1, 4): for j in range(i): plot_index = 3*j + i plt.subplot(3, 3, plot_index) sns.scatterplot(x=iris_features[:, i], y=iris_features[:, j], hue=iris_target, legend=(plot_index == 1)) plt.xlabel(iris_feature_names[i]) plt.ylabel(iris_feature_names[j]) if plot_index == 1: plt.legend().remove() fig.legend(loc='lower left') # same legend for all subplots fig.tight_layout() plt.show() ","date":"2024-08-13","objectID":"/datalab11/:0:0","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 1: Standardization and SVD ","date":"2024-08-13","objectID":"/datalab11/:1:0","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 1a To apply PCA, we will first need to center the data so that the mean of each feature is 1. We could go further and create standardized features, where we scale features such that they are centered with standard deviation 1. (We’ll explore simple centered data in Part 2.) Compute the columnwise mean of iris_features in the cell below and store it in iris_mean, and compute the columnwise standard deviation of iris_features and store it in iris_std. Each should be a numpy array of 4 means, 1 for each feature. Then, subtract iris_mean from iris_features and divide by iris_std, and finally, save the result in iris_standardized. Hints: Use np.mean (documentation) or np.average (documentation) to compute iris_mean, and pay attention to the axis argument. Same for np.std (documentation). 制定好axis参数很重要!Because PCA will capture the bigger stddev features, we want to standardize them or will lead to artificial error! If you are confused about how numpy deals with arithmetic operations between arrays of different shapes, see this note about broadcasting for explanations/examples. 广播机制! iris_mean = np.mean(iris_features, axis=0) iris_std = np.std(iris_features, axis=0) iris_standardized = (iris_features - iris_mean) / iris_std iris_mean, iris_std (array([5.84333333, 3.05733333, 3.758 , 1.19933333]),\rarray([0.82530129, 0.43441097, 1.75940407, 0.75969263]))\rgrader.check(\"q1a\") ","date":"2024-08-13","objectID":"/datalab11/:1:1","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 1b As you may recall from lecture, PCA is a specific application of the singular value decomposition (SVD) for matrices. In the following cell, let’s use the np.linalg.svd function (documentation) to compute the SVD of our iris_standardized matrix. Store the left singular vectors $U$, singular values $\\Sigma$, and (transposed) right singular vectors $V^T$ in u, s, and vt, respectively. Set the full_matrices argument of np.linalg.svd to False. Notice: PCA is a application of SVD on centered data matrix. 🤔 u1, s1, vt1 = np.linalg.svd(iris_standardized, full_matrices=False) u1.shape, s1, vt1.shape ((150, 4), array([20.92306556, 11.7091661 , 4.69185798, 1.76273239]), (4, 4))\rgrader.check(\"q1b\") ","date":"2024-08-13","objectID":"/datalab11/:1:2","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 1c What can we learn from the singular values in s? As discussed in lecture, the total variance of the data is also equal to the sum of the squares of the singular values divided by the number of data points, that is: $$\\text{Var}(X) = \\frac{\\sum_{i=1}^d{\\sigma_i^2}}{N} = \\sum_{i=1}^d \\frac{\\sigma_i^2}{N}$$ where for data $X$ with $N$ datapoints and $d$ features, $\\sigma_i$ is the singular value corresponding to the $i$-th principal component, and $\\text{Var}(X)$ is the total variance of the data. The right-hand side implies that the expression $\\sigma_i^2/N$ is the amount of variance captured by the $i$-th principal component. Compute the total variance of our data below by summing the square of each singular value in s and dividing the result by the total number of data points. Store the result in the variable iris_total_variance. iris_total_variance = np.sum(s1**2) / len(iris_standardized) print(\"iris_total_variance: {:.3f} should approximately equal the sum of the feature variances: {:.3f}\" .format(iris_total_variance, np.sum(np.var(iris_standardized, axis=0)))) iris_total_variance: 4.000 should approximately equal the sum of the feature variances: 4.000\rgrader.check(\"q1c\") As you can see, iris_total_variance is equal to the sum of the standardized feature variances. Since our features are standardized (i.e., have variance 1), iris_total_variance is equal to the number of original features. ","date":"2024-08-13","objectID":"/datalab11/:1:3","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 2 ","date":"2024-08-13","objectID":"/datalab11/:2:0","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 2a Let’s now use only the first two principal components to see what a 2D version of our iris data looks like. First, construct the 2D version of the iris data by multiplying our iris_standardized array with the first two right singular vectors in $V$. Because the first two right singular vectors are directions for the first two principal components, this will project the iris data down from a 4D subspace to a 2D subspace. Hints: To matrix-multiply two numpy arrays, use @ or np.dot. In case you’re interested, the matmul documentation contrasts the two methods. Note that in Question 1b, you computed vt (SVD decomposition is $U\\Sigma V^T$). The first two right singular vectors in $V$ will be the two rows of vt, transposed to be column vectors instead of row vectors. Since we want to obtain a 2D version of our iris dataset, the shape of iris_2d should be (150, 2). iris_2d = iris_standardized @ vt1[0:2, :].T np.sum(iris_2d[:, 0]) np.float64(-2.5579538487363607e-13)\rgrader.check(\"q2a\") Now, run the cell below to create the scatter plot of our 2D version of the iris data, iris_2d. # just run this cell plt.figure(figsize = (9, 6)) plt.title(\"PC2 vs. PC1 for Iris Data\") plt.xlabel(\"Iris PC1\") plt.ylabel(\"Iris PC2\") sns.scatterplot(x = iris_2d[:, 0], y = iris_2d[:, 1], hue = iris_target); ","date":"2024-08-13","objectID":"/datalab11/:2:1","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 2b What do you observe about the plot above? If you were given a point in the subspace defined by PC1 and PC2, how well would you be able to classify the point as one of the three Iris types? ","date":"2024-08-13","objectID":"/datalab11/:2:2","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 2c What proportion of the total variance is accounted for when we project the iris data down to two dimensions? Compute this quantity in the cell below by dividing the variance captured by the first two singular values (also known as component scores) in s by the iris_total_variance you calculated previously. Store the result in iris_2d_variance. iris_2d_variance = np.sum(s1[:2]**2) / len(iris_standardized) / iris_total_variance iris_2d_variance np.float64(0.9581320720000164)\rgrader.check(\"q2c\") Most of the variance in the data is explained by the two-dimensional projection! ","date":"2024-08-13","objectID":"/datalab11/:2:3","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 3 As a last step, we will create a scree plot to visualize the weight of each principal component. In the cell below, create a scree plot by creating a line plot of the component scores (variance captured by each principal component) vs. the principal component number (1st, 2nd, 3rd, or 4th). Your graph should match the image below: Hint: Be sure to label your axes appropriately! You may find plt.xticks() (documentation) helpful for formatting. # your plot here plt.xticks([1, 2, 3, 4]) plt.xlabel(\"Principal Component\") plt.ylabel(\"Variance (Component Scores)\") plt.title(\"Scree Plot of Iris Principle Components\") plt.plot([1,2,3,4], np.square(s1) / len(iris_standardized)); Part 2: PCA on 3D Data In Part 2, our goal is to see visually how PCA is simply the process of rotating the coordinate axes of our data. The code below reads in a 3D dataset. We have named the DataFrame surfboard because the data resembles a surfboard when plotted in 3D space. # just run this cell surfboard = pd.read_csv(\"data/data3d.csv\") surfboard.head(5) x\ry\rz\r0\r0.005605\r2.298191\r1.746604\r1\r-1.093255\r2.457522\r0.170309\r2\r0.060946\r0.473669\r-0.003543\r3\r-1.761945\r2.151108\r3.132426\r4\r1.950637\r-0.194469\r-2.101949\r","date":"2024-08-13","objectID":"/datalab11/:3:0","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"[Tutorial 1] Visualize the Data The cell below will allow you to view the data as a 3D scatterplot. Rotate the data around and zoom in and out using your trackpad or the controls at the top right of the figure. You should see that the data is an ellipsoid that looks roughly like a surfboard or a hashbrown patty. That is, it is pretty long in one direction, pretty wide in another direction, and relatively thin along its third dimension. We can think of these as the “length”, “width”, and “thickness” of the surfboard data. Observe that the surfboard is not aligned with the x/y/z axes. If you get an error that your browser does not support webgl, you may need to restart your kernel and/or browser. # just run this cell fig = px.scatter_3d(surfboard, x='x', y='y', z='z', range_x = [-10, 10], range_y = [-10, 10], range_z = [-10, 10]) fig.show() Visualize the Data (Colorized) To give the figure a little more visual pop, the following cell does the same plot, but also assigns a pre-determined color value (that we’ve arbitrarily chosen) to each point. These colors do not mean anything important; they’re simply there as a visual aid. You might find it useful to use the colorize_surfboard_data method later in this lab. # just run this cell (the colorized version of previous cell) def colorize_surfboard_data(df): colors = pd.read_csv(\"data/surfboard_colors.csv\", header = None).values df_copy = df.copy() df_copy.insert(loc = 3, column = \"color\", value = colors) return df_copy fig = px.scatter_3d(colorize_surfboard_data(surfboard), x='x', y='y', z='z', range_x = [-10, 10], range_y = [-10, 10], range_z = [-10, 10], color = \"color\", color_continuous_scale = 'RdBu') fig.show() ","date":"2024-08-13","objectID":"/datalab11/:3:1","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 4: Centering and SVD ","date":"2024-08-13","objectID":"/datalab11/:4:0","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 4a In Part 1, we standardized the Iris data prior to performing SVD, i.e., we made features zero-mean and unit-variance. In this part, we’ll try just centering our data so that each feature is zero-mean and variance is unchanged. Compute the columnwise mean of surfboard in the cell below, and store the result in surfboard_mean. You can choose to make surfboard_mean a numpy array or a series, whichever is more convenient for you. Regardless of what data type you use, surfboard_mean should have 3 means: 1 for each attribute, with the x coordinate first, then y, then z. Then, subtract surfboard_mean from surfboard, and save the result in surfboard_centered. The order of the columns in surfboard_centered should be x, then y, then z. surfboard_mean = np.mean(surfboard, axis=0) surfboard_centered = surfboard - surfboard_mean grader.check(\"q4a\") ","date":"2024-08-13","objectID":"/datalab11/:4:1","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 4b In the following cell, compute the singular value decomposition (SVD) of surfboard_centered as $U\\Sigma V^T$, and store the left singular vectors $U$, singular values $\\Sigma$, and (transposed) right singular vectors $V^T$ in u, s, and vt, respectively. Your code should be very similar to Part 1, Question 1b up above. u2, s2, vt2 = np.linalg.svd(surfboard_centered, full_matrices=False) u2, s2, vt2 (array([[-0.02551985, 0.02108339, 0.03408865],\r[-0.02103979, 0.0259219 , -0.05432967],\r[-0.00283413, 0.00809889, -0.00204459],\r...,\r[ 0.01536972, 0.00483066, -0.05673824],\r[-0.00917593, -0.0345672 , -0.03491181],\r[-0.01701236, -0.02743128, 0.01966704]]),\rarray([103.76854043, 40.38357469, 21.04757518]),\rarray([[ 0.38544534, -0.67267377, -0.63161847],\r[ 0.5457216 , 0.7181477 , -0.43180066],\r[ 0.74405633, -0.17825229, 0.64389929]]))\rgrader.check(\"q4b\") ","date":"2024-08-13","objectID":"/datalab11/:4:2","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 4c: Total Variance In Part 1 Question 1c, we considered standardized features (each with unit variance), whose total variance was simply the count of features. Now, we’ll show that the same relationship holds between singular values s and the variance of our (unstandardized) data. In the cell below, compute the total variance as the sum of the squares of the singular values $\\sigma_i$ divided by the number of datapoints $N$. Here’s that formula again from Question 1c: $$\\text{Var}(X) = \\frac{\\sum_{i=1}^d{\\sigma_i^2}}{N} = \\sum_{i=1}^d \\frac{\\sigma_i^2}{N}$$ total_variance_computed_from_singular_values = np.sum(s2**2) / len(surfboard_centered) total_variance_computed_from_singular_values np.float64(12.841743509780112)\rgrader.check(\"q4c\") Your total_variance_computed_from_singular_values result should be very close to the total variance of the original surfboard data: # run this cell np.var(surfboard, axis=0) x 2.330704\ry 5.727527\rz 4.783513\rdtype: float64\rThe total variance of our dataset is given by the sum of these numbers. # run this cell total_variance_computed_from_surfboard = sum(np.var(surfboard, axis=0)) total_variance_computed_from_surfboard 12.841743509780109\rNote: The variances are the same for both surfboard_centered and surfboard (why?), so we show only one to avoid redundancy. ","date":"2024-08-13","objectID":"/datalab11/:4:3","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 4d: Variance Explained by First Principal Component In the cell below, set variance_explained_by_1st_pc to the proportion of the total variance explained by the 1st principal component. Your answer should be a number between 0 and 1. variance_explained_by_1st_pc = np.sum(s2[0:1]**2)/len(surfboard_centered) / total_variance_computed_from_surfboard variance_explained_by_1st_pc np.float64(0.8385084140449135)\rgrader.check(\"q4d\") We can also create a scree plot that shows the proportion of variance explained by all of our principal components, ordered from most to least. You already constructed a scree plot for the Iris data, so we’ll leave the surfboard scree plot for you to do on your own time. Instaed, let’s try to visualize why PCA is simply a rotation of the coordinate axes (i.e., features) of our data. ","date":"2024-08-13","objectID":"/datalab11/:4:4","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Question 5: V as a Rotation Matrix In lecture, we saw that the first column of $XV$ contained the first principal component values for each observation, the second column of $XV$ contained the second principal component values for each observation, and so forth. Let’s give this matrix a name: $P = XV$ is sometimes known as the “principal component matrix”. Compute the $P$ matrix for the surfboard dataset and store it in the variable surfboard_pcs. Hint: What does $X$ represent here: surfboard or surfboard_centered? Why? surfboard_pcs = surfboard_centered @ vt2.T grader.check(\"q1e\") ","date":"2024-08-13","objectID":"/datalab11/:5:0","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"[Tutorial 2] Visualizing the Principal Component Matrix In some sense, we can think of $P$ as an output of the PCA procedure. $P$ is a rotation of the data such that the data will now appear “axis aligned”. Specifically, for a 3d dataset, if we plot PC1, PC2, and PC3 along the x, y, and z axes of our plot, then the greatest amount of variation happens along the x-axis, the second greatest amount along the y-axis, and the smallest amount along the z-axis. To visualize this, run the cell below, which will show our data now projected onto the principal component space. Compare with your original figure (from Tutorial 1 in this part), and observe that the data is exactly the same—only it is now rotated. # just run this cell surfboard_pcs = surfboard_pcs.rename(columns = {0: \"pc1\", 1: \"pc2\", 2: \"pc3\"}) fig = px.scatter_3d(colorize_surfboard_data(surfboard_pcs), x='pc1', y='pc2', z='pc3', range_x = [-10, 10], range_y = [-10, 10], range_z = [-10, 10], color = 'color', color_continuous_scale = 'RdBu'); fig.show(); We can also create a 2D scatterplot of our surfboard data as well. Note that the resulting is just the 3D plot as viewed from directly “overhead”. # just run this cell fig = plt.figure(figsize=(10, 6)) plt.subplot(1, 2, 1) # just run this cell sns.scatterplot(data = colorize_surfboard_data(surfboard_pcs), x = 'pc1', y = 'pc2', hue = \"color\", palette = \"RdBu\", legend = False) plt.xlim(-10, 10); plt.ylim(-10, 10); plt.title(\"Top-Down View of $P$\") plt.show() ","date":"2024-08-13","objectID":"/datalab11/:5:1","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":"Part 2 Summary Above, we saw that the principal component matrix $P$ is simply the original data rotated in space so that it appears axis-aligned. Whenever we do a 2D scatter plot of only the first 2 columns of $P$, we are simply looking at the data from “above”, i.e. so that the 3rd (or higher) PC is invisible to us. Congratulations! You finished the lab! ","date":"2024-08-13","objectID":"/datalab11/:5:2","tags":["Numpy","Scikit-Learn"],"title":"DATA100-lab11: Principal Component Analysis","uri":"/datalab11/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab12.ipynb\") Lab 12: Logistic Regression # Run this cell to set up your notebook import numpy as np import pandas as pd import sklearn import sklearn.datasets import matplotlib.pyplot as plt import seaborn as sns import plotly.offline as py import plotly.graph_objs as go import plotly.figure_factory as ff %matplotlib inline sns.set() sns.set_context(\"talk\") ","date":"2024-08-13","objectID":"/datalab12/:0:0","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"Objectives In Questions 1 and 2 of this lab, we will manually construct the logistic regression model and minimize cross-entropy loss using scipy.minimize. This structure mirrors the linear regression labs from earlier in the semester and lets us dive deep into how logistic regression works. Lastly, in Question 3 we introduce the sklearn.linear_model.LogisticRegression module that you would use in practice, and we explore performance metrics for classification. We will explore a breast cancer dataset from the University of Wisconsin (source). This dataset can be loaded using the sklearn.datasets.load_breast_cancer() method. # just run this cell data = sklearn.datasets.load_breast_cancer() # data is actually a dictionnary print(data.keys()) print(data.DESCR) dict_keys(['data', 'target', 'frame', 'target_names', 'DESCR', 'feature_names', 'filename', 'data_module'])\r.. _breast_cancer_dataset:\rBreast cancer wisconsin (diagnostic) dataset\r--------------------------------------------\r**Data Set Characteristics:**\r:Number of Instances: 569\r:Number of Attributes: 30 numeric, predictive attributes and the class\r:Attribute Information:\r- radius (mean of distances from center to points on the perimeter)\r- texture (standard deviation of gray-scale values)\r- perimeter\r- area\r- smoothness (local variation in radius lengths)\r- compactness (perimeter^2 / area - 1.0)\r- concavity (severity of concave portions of the contour)\r- concave points (number of concave portions of the contour)\r- symmetry\r- fractal dimension (\"coastline approximation\" - 1)\rThe mean, standard error, and \"worst\" or largest (mean of the three\rworst/largest values) of these features were computed for each image,\rresulting in 30 features. For instance, field 0 is Mean Radius, field\r10 is Radius SE, field 20 is Worst Radius.\r- class:\r- WDBC-Malignant\r- WDBC-Benign\r:Summary Statistics:\r===================================== ====== ======\rMin Max\r===================================== ====== ======\rradius (mean): 6.981 28.11\rtexture (mean): 9.71 39.28\rperimeter (mean): 43.79 188.5\rarea (mean): 143.5 2501.0\rsmoothness (mean): 0.053 0.163\rcompactness (mean): 0.019 0.345\rconcavity (mean): 0.0 0.427\rconcave points (mean): 0.0 0.201\rsymmetry (mean): 0.106 0.304\rfractal dimension (mean): 0.05 0.097\rradius (standard error): 0.112 2.873\rtexture (standard error): 0.36 4.885\rperimeter (standard error): 0.757 21.98\rarea (standard error): 6.802 542.2\rsmoothness (standard error): 0.002 0.031\rcompactness (standard error): 0.002 0.135\rconcavity (standard error): 0.0 0.396\rconcave points (standard error): 0.0 0.053\rsymmetry (standard error): 0.008 0.079\rfractal dimension (standard error): 0.001 0.03\rradius (worst): 7.93 36.04\rtexture (worst): 12.02 49.54\rperimeter (worst): 50.41 251.2\rarea (worst): 185.2 4254.0\rsmoothness (worst): 0.071 0.223\rcompactness (worst): 0.027 1.058\rconcavity (worst): 0.0 1.252\rconcave points (worst): 0.0 0.291\rsymmetry (worst): 0.156 0.664\rfractal dimension (worst): 0.055 0.208\r===================================== ====== ======\r:Missing Attribute Values: None\r:Class Distribution: 212 - Malignant, 357 - Benign\r:Creator: Dr. William H. Wolberg, W. Nick Street, Olvi L. Mangasarian\r:Donor: Nick Street\r:Date: November, 1995\rThis is a copy of UCI ML Breast Cancer Wisconsin (Diagnostic) datasets.\rhttps://goo.gl/U2Uwz2\rFeatures are computed from a digitized image of a fine needle\raspirate (FNA) of a breast mass. They describe\rcharacteristics of the cell nuclei present in the image.\rSeparating plane described above was obtained using\rMultisurface Method-Tree (MSM-T) [K. P. Bennett, \"Decision Tree\rConstruction Via Linear Programming.\" Proceedings of the 4th\rMidwest Artificial Intelligence and Cognitive Science Society,\rpp. 97-101, 1992], a classification method which uses linear\rprogramming to construct a decision tree. Relevant features\rwere selected using an exhaustive search in the space of 1-4\rfeatures and 1-3 separating planes.\rThe actual linear program used to obtain the s","date":"2024-08-13","objectID":"/datalab12/:1:0","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"Question 1 ","date":"2024-08-13","objectID":"/datalab12/:2:0","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"Question 1a Using the above definition for $\\mathbb{X}$, we can also construct a matrix representation of our Logistic Regression model, just like we did for OLS. Noting that $\\theta = (\\theta_0, \\theta_1, \\dots, \\theta_p$), the vector $\\hat{\\mathbb{Y}}$ is: $$\\Large \\hat{\\mathbb{Y}} = \\sigma(\\mathbb{X} \\theta) $$ Then the $i$-th element of $\\hat{\\mathbb{Y}}$ is the probability that the $i$-th observation belongs to class 1, given the feature vector is the $i$-th row of design matrix $\\mathbb{X}$ and the parameter vector is $\\theta$. Below, implement the lr_model function to evaluate this expression. You should use @ or np.dot. def sigmoid(z): \"\"\" The sigmoid function, defined for you \"\"\" return 1 / (1 + np.exp(-z)) def lr_model(theta, X): \"\"\" Return the logistic regression model as defined above. You should not need to use a for loop; use @ or np.dot. Args: theta: The model parameters. Dimension (p+1,). X: The design matrix. Dimension (n, p+1). Return: Probabilities that Y = 1 for each datapoint. Dimension (n,). \"\"\" return sigmoid(X @ theta) grader.check(\"q1a\") ","date":"2024-08-13","objectID":"/datalab12/:2:1","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"Question 1b: Compute Empirical Risk Now let’s try to analyze the cross-entropy loss from logistic regression. Suppose for a single observation, we predict probability $p$ that the true response $y$ is in class 1 (otherwise the prediction is 0 with probability $1 - p$). The cross-entropy loss is: $$ - \\left( y \\log(p) + (1 - y) \\log(1 - p) \\right)$$ For the logistic regression model, the empirical risk is therefore defined as the average cross-entropy loss across all $n$ datapoints: $$\\Large R(\\theta) = -\\frac{1}{n} \\sum_{i=1}^n \\left( y_i \\log(\\sigma(X_i^T \\theta)) + (1 - y_i) \\log(1 - \\sigma(X_i^T \\theta)) \\right) $$ Where $y_i$ is the $i-$th response in our dataset, $\\theta$ are the parameters of our model, $X_i$ is the i’th row of our design matrix $\\mathbb{X}$, and $\\sigma(X_i^T \\theta)$ is the probability that the response is 1 given input $X_i$. Note: In this class, when performing linear algebra operations we interpret both rows and columns as column vectors. So if we wish to calculate the dot product between row $X_i$ and a vector $v$, we write $X_i^Tv$. Below, implement the function lr_loss that computes empirical risk over the dataset. Feel free to use functions defined in the previous part. def lr_avg_loss(theta, X, Y): ''' Compute the average cross entropy loss using X, Y, and theta. You should not need to use a for loop. Args: theta: The model parameters. Dimension (p+1,) X: The design matrix. Dimension (n, p+1). Y: The label. Dimension (n,). Return: The average cross entropy loss. ''' n = X.shape[0] return -1/n * np.sum(Y * np.log(sigmoid(X @ theta)) + (1-Y) * np.log(1-sigmoid(X @ theta))) grader.check(\"q1b\") Below is a plot showing the average training cross-entropy loss for various values of $\\theta_0$ and $\\theta_1$ (respectively x and y in the plot). # just run this cell with np.errstate(invalid='ignore', divide='ignore'): uvalues = np.linspace(-8,8,70) vvalues = np.linspace(-5,5,70) (u,v) = np.meshgrid(uvalues, vvalues) thetas = np.vstack((u.flatten(),v.flatten())) lr_avg_loss_values = np.array([lr_avg_loss(t, X_intercept_train, Y_train) for t in thetas.T]) lr_loss_surface = go.Surface(name=\"Logistic Regression Loss\", x=u, y=v, z=np.reshape(lr_avg_loss_values,(len(uvalues), len(vvalues))), contours=dict(z=dict(show=True, color=\"gray\", project=dict(z=True))) ) fig = go.Figure(data=[lr_loss_surface]) fig.update_layout( scene = dict( xaxis_title='theta_0', yaxis_title='theta_1', zaxis_title='Loss'), width=700, margin=dict(r=20, l=10, b=10, t=10)) py.iplot(fig) with np.errstate(invalid='ignore', divide='ignore'): uvalues = np.linspace(-8,8,70) vvalues = np.linspace(-5,5,70) (u,v) = np.meshgrid(uvalues, vvalues) thetas = np.vstack((u.flatten(),v.flatten())) lr_loss_values = np.array([lr_avg_loss(t, X_intercept_train, Y_train) for t in thetas.T]) lr_loss_surface = go.Surface(name=\"Logistic Regression Loss\", x=u, y=v, z=np.reshape(lr_loss_values,(len(uvalues), len(vvalues))), contours=dict(z=dict(show=True, color=\"gray\", project=dict(z=True))) ) fig = go.Figure(data=[lr_loss_surface]) # fig.update_layout( # scene = dict( # xaxis_title='theta_1', # yaxis_title='theta_2', # zaxis_title='Loss'), # width=700, # margin=dict(r=20, l=10, b=10, t=10)) py.iplot(fig) ","date":"2024-08-13","objectID":"/datalab12/:2:2","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"Question 1c Describe one interesting observation about the loss plot above. Part 2: Fit and Predict ","date":"2024-08-13","objectID":"/datalab12/:2:3","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"[Tutorial] scipy.optimize.minimize The next two cells call the minimize function from scipy on the lr_avg_loss function you defined in the previous part. We pass in the training data to args (documentation) to find the theta_hat that minimizes the average cross-entropy loss over the train set. # just run this cell from scipy.optimize import minimize min_result = minimize(lr_avg_loss, x0=np.zeros(X_intercept_train.shape[1]), args=(X_intercept_train, Y_train)) # args: Extra arguments passed to the objective function and its derivatives (fun, jac and hess functions). min_result message: Optimization terminated successfully.\rsuccess: True\rstatus: 0\rfun: 0.3123767645005891\rx: [-1.387e+01 9.372e-01]\rnit: 16\rjac: [-4.210e-07 -7.335e-06]\rhess_inv: [[ 7.478e+02 -5.212e+01]\r[-5.212e+01 3.683e+00]]\rnfev: 57\rnjev: 19\r# just run this cell theta_hat = min_result['x'] theta_hat array([-13.87178941, 0.93723937])\rBecause our design matrix $\\mathbb{X}$ leads with a column of all ones, theta_hat has two elements: $\\hat{\\theta}_0$ is the estimate of the intercept/bias term, and $\\hat{\\theta}_1$ is the estimate of the slope of our single feature. It’s time for a recap: For logistic regression with parameter $\\theta$, $P(Y = 1 | x) = \\sigma(x^T \\theta)$, where $\\sigma$ is the sigmoid function and $x$ is a feature vector. Therefore $\\sigma(x^T \\theta)$ is the Bernoulli probability that the response is 1 given the feature is $x$ Otherwise the response is 0 with probability $P(Y = 0 | x) = 1 - \\sigma(x^T \\theta)$. The $\\hat{\\theta}$ that minimizes average log-entropy loss of our training data also maximizes the likelihood of observing the training data according to the logistic regression model (check out lecture for more details). The main takeaway is that logistic regression models probabilities of classifying datapoints as 1 or 0. Next, we use this takeaway to implement model predictions. ","date":"2024-08-13","objectID":"/datalab12/:2:4","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"Question 2 Using the theta_hat estimate above, we can construct a decision rule for classifying a datapoint with observation $x$. Let $P(Y = 1 | x) = \\sigma(x^T \\hat{\\theta})$: $$\\Large \\text{classify}(x) = \\begin{cases} 1, \u0026 P(Y = 1 | x) \\geq 0.5 \\ 0, \u0026 P(Y = 1 | x) \u003c 0.5 \\end{cases}$$ This decision rule has a decision threshold $T = 0.5$. This threshold means that we treat the classes $0$ and $1$ “equally.” Lower thresholds mean that we are more likely to predict $1$, whereas higher thersholds mean that we are more likely to predict $0$. Implement the lr_predict function below, which returns a vector of predictions according to the logistic regression model. The function takes a design matrix of observations X, parameter estimate theta, and decision threshold threshold with default value 0.5. def lr_predict(theta, X, threshold=0.5): ''' Classification using a logistic regression model with a probability threshold. Args: theta: The model parameters. Dimension (p+1,) X: The design matrix. Dimension (n, p+1). threshold: decision rule threshold for predicting class 1. Return: A vector of predictions. ''' return (sigmoid(X @ theta) \u003e= threshold).astype(int) # 转换数据类型！ # do not modify below this line Y_train_pred = lr_predict(theta_hat, X_intercept_train) Y_train_pred array([0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1,\r0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0,\r0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0,\r0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0,\r0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,\r0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1,\r0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0,\r0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\r0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1,\r0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,\r1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1,\r0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1,\r1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1,\r1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1,\r1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0,\r0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,\r1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0,\r1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,\r0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0,\r0, 1, 0, 0, 0, 0, 0, 0])\rgrader.check(\"q2\") ","date":"2024-08-13","objectID":"/datalab12/:3:0","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"[Tutorial] Linearly separable data How do these predicted classifications compare to the true responses $\\mathbb{Y}$? Run the below cell to visualize our predicted responses, the true responses, and the probabilities we used to make predictions. We use sns.stripplot which introduces some jitter to avoid overplotting. # just run this cell plot_df = pd.DataFrame({\"X\": np.squeeze(X_train), \"Y\": Y_train, \"Y_pred\": Y_train_pred, \"correct\": (Y_train == Y_train_pred)}) sns.stripplot(data=plot_df, x=\"X\", y=\"Y\", orient='h', alpha=0.5, hue=\"correct\") plt.xlabel('mean radius, $x$') plt.ylabel('$y$') plt.yticks(ticks=[0, 1], labels=['0:\\nbenign', '1:\\nmalignant']) plt.title(\"Predictions for decision threshold T = 0.5\") plt.show() Because we are using a decision threshold $T = 0.5$, we predict $1$ for all $x$ where $\\sigma(x^T\\theta) \\geq 0.5$, which happens when $x^T\\theta = 0$. For the single mean radius feature, we can use algebra to solve for the boundary to be approximately $x \\approx 14.8$. In other words, will always predict $0$ (benign) if the mean radius feature is less than 14.8, and $1$ (malignant) otherwise. However, in our training data there are datapoints with large mean radii that are benign, and vice versa. Our data is not linearly separable by a vertical line. The above visualization is useful when we have just one feature. In practice, however, we use other performance metrics to diagnose our model performance. Next, we will explore several such metrics: accuracy, precision, recall, and confusion matrices. Part 3: Quantifying Performance ","date":"2024-08-13","objectID":"/datalab12/:3:1","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"[Tutorial] sklearn’s LogisticRegression Instead of using the model structure we built manually in the previous questions, we will instead use sklearn’s LogisticRegression model, which operates similarly to the sklearn OLS, Ridge, and LASSO models. Let’s first fit a logistic regression model to the training data. Some notes: Like with linear models, the fit_intercept argument specifies if model includes an intercept term. We therefore pass in the original matrix X_train in the call to lr.fit(). sklearn fits a regularized logistic regression model as specified by the solver='lbfgs' argument; read the documentation for more details. # just run this cell from sklearn.linear_model import LogisticRegression lr = LogisticRegression( fit_intercept=True, solver = 'lbfgs') lr.fit(X_train, Y_train) lr.intercept_, lr.coef_ (array([-13.75518968]), array([[0.92897696]]))\rNote that because we are now fitting a regularized logistic regression model, the estimated coefficients above deviate slightly from our numerical findings in Question 1. Like with linear models, we can call lr.predict(x_train) to classify our training data with our fitted model. # just run this cell lr.predict(X_train) array([0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1,\r0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0,\r0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0,\r0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0,\r0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0,\r0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1,\r0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0,\r0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\r0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1,\r0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,\r1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1,\r0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1,\r1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1,\r1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1,\r1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0,\r0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0,\r1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0,\r1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0,\r0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0,\r0, 1, 0, 0, 0, 0, 0, 0])\rNote that for a binary classification task, the sklearn model uses an unadjustable decision rule of 0.5. If you’re interested in manually adjusting this threshold, check out the documentation for lr.predict_proba(). ","date":"2024-08-13","objectID":"/datalab12/:3:2","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"Question 3 ","date":"2024-08-13","objectID":"/datalab12/:4:0","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"Question 3a: Accuracy Fill in the code below to compute the training and testing accuracy, defined as: $$ \\text{Training Accuracy} = \\frac{1}{n_{train_set}} \\sum_{i \\in {train_set}} {\\mathbb{1}_{y_i == \\hat{y_i}}} $$ $$ \\text{Testing Accuracy} = \\frac{1}{n_{test_set}} \\sum_{i \\in {test_set}} {\\mathbb{1}_{y_i == \\hat{y_i}}} $$ where for the $i$-th observation in the respective dataset, $\\hat{y_i}$ is the predicted response and $y_i$ the true response. $\\mathbb{1}_{y_i == \\hat{y_i}}$ is an indicator function which is $1$ if ${y_i} = \\hat{y_i}$ and $ 0$ otherwise. train_accuracy = np.sum(Y_train == lr.predict(X_train)) / len(Y_train) test_accuracy = np.sum(Y_test == lr.predict(X_test)) / len(Y_test) print(f\"Train accuracy: {train_accuracy:.4f}\") print(f\"Test accuracy: {test_accuracy:.4f}\") Train accuracy: 0.8709\rTest accuracy: 0.9091\rgrader.check(\"q3a\") ","date":"2024-08-13","objectID":"/datalab12/:4:1","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"Question 3b: Precision and Recall It seems we can get a very high test accuracy. What about precision and recall? Precision (also called positive predictive value) is the fraction of true positives among the total number of data points predicted as positive. 真阳性 / (真阳性 + 假阳性) Recall (also known as sensitivity) is the fraction of true positives among the total number of data points with positive labels. 真阳性 / (真阳性 + 假阴性) Precision measures the ability of our classifier to not predict negative samples as positive (i.e., avoid false positives), while recall is the ability of the classifier to find all the positive samples (i.e., avoid false negatives). Below is a graphical illustration of precision and recall, modified slightly from Wikipedia: Mathematically, Precision and Recall are defined as: $$ \\text{Precision} = \\frac{n_{true_positives}}{n_{true_positives} + n_{false_positives}} $$ $$ \\text{Recall} = \\frac{n_{true_positives}}{n_{true_positives} + n_{false_negatives}} $$ Use the formulas above to compute the precision and recall for the test set using the lr model trained using sklearn. Y_test_pred = lr.predict(X_test) # 注意bool索引！ precision = np.sum(Y_test_pred[Y_test == 1] == 1) / np.sum(Y_test_pred == 1) recall = np.sum(Y_test_pred[Y_test == 1] == 1) / np.sum(Y_test == 1) print(f'precision = {precision:.4f}') print(f'recall = {recall:.4f}') precision = 0.9184\rrecall = 0.8333\rgrader.check(\"q3b\") ","date":"2024-08-13","objectID":"/datalab12/:4:2","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"Question 3c Our precision is fairly high, while our recall is a bit lower. Consider the following plots, which display the distribution of the response variable $\\mathbb{Y}$ in the training and testing sets (sometimes called the target, or true response). Recall class labels are 0: benign, 1: malignant. fig, axes = plt.subplots(1, 2) sns.countplot(x=Y_train, ax=axes[0]); sns.countplot(x=Y_test, ax=axes[1]); axes[0].set_title('Train') axes[1].set_title('Test') plt.tight_layout(); Based on the above distribution, what might explain the observed difference between our precision and recall metrics? This is due to the class imbalance between M and B in both train and test sets. ","date":"2024-08-13","objectID":"/datalab12/:4:3","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"[Tutorial] Confusion Matrices To understand the link between precision and recall, it’s useful to create a confusion matrix of our predictions. Luckily, sklearn.metrics provides us with such a function! The confusion_matrix function (documentation) categorizes counts of datapoints based if their true and predicted values match. For the 143-datapoint test dataset: # just run this cell from sklearn.metrics import confusion_matrix Y_test_pred = lr.predict(X_test) cnf_matrix = confusion_matrix(Y_test, Y_test_pred) cnf_matrix array([[85, 4],\r[ 9, 45]])\rWe’ve implemented the following function to better visualize these four counts against the true and predicted categories: # just run this cell def plot_confusion_matrix(cm, classes, title='Confusion matrix', cmap=plt.cm.Blues): \"\"\" This function prints and plots the confusion matrix. \"\"\" import itertools plt.imshow(cm, interpolation='nearest', cmap=cmap) plt.title(title) plt.colorbar() tick_marks = np.arange(len(classes)) plt.xticks(tick_marks, classes, rotation=45) plt.yticks(tick_marks, classes) plt.grid(False) thresh = cm.max() / 2. for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])): plt.text(j, i, np.round(cm[i, j], 2), horizontalalignment=\"center\", color=\"white\" if cm[i, j] \u003e thresh else \"black\") plt.tight_layout() plt.ylabel('True label') plt.xlabel('Predicted label') class_names = ['False', 'True'] plot_confusion_matrix(cnf_matrix, classes=class_names, title='Confusion matrix, without normalization') ","date":"2024-08-13","objectID":"/datalab12/:4:4","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":"Question 3d: Normalized Confusion Matrix To better interpret these counts, assign cnf_matrix_norm to a normalized confusion matrix by the count of each true label category. In other words, build a 2-D NumPy array constructed by normalizing cnf_matrix by the count of datapoints in each row. For example, the top-left quadrant of cnf_matrix_norm should represent the proportion of true negatives over the total number of datapoints with negative labels. Hint: In array broadcasting, you may encounter issues dividing 2-D NumPy arrays by 1-D NumPy arrays. Check out the keepdims parameter in np.sum (documentation). cnf_matrix_norm = cnf_matrix / np.sum(cnf_matrix, axis=1, keepdims=True) # do not modify below this line plot_confusion_matrix(cnf_matrix_norm, classes=class_names, title='Normalized confusion matrix') grader.check(\"q3d\") Compare the normalized confusion matrix to the values you computed for precision and recall earlier: # just run this cell for your convenience print(f'precision = {precision:.4f}') print(f'recall = {recall:.4f}') precision = 0.9184\rrecall = 0.8333\rBased on the definitions of precision and recall, why does only recall appear in the normalized confusion matrix? Why doesn't precision appear? (No answer required for this part; just something to think about.)\rCongratulations! You finished the lab! ","date":"2024-08-13","objectID":"/datalab12/:4:5","tags":["Scikit-Learn","Numpy"],"title":"DATA100-lab12: Logistic Regression","uri":"/datalab12/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab10.ipynb\") Lab 10: SQL In this lab, we are going to practice viewing, sorting, grouping, and merging tables with SQL. We will explore two datasets: A “minified” version of the Internet Movie Database (IMDb). This SQLite database (~10MB) is a tiny sample of the much larger database (more than a few GBs). As a result, disclaimer that we may get wildly different results than if we use the whole database! The money donated during the 2016 election using the Federal Election Commission (FEC)’s public records. You will be connecting to a SQLite database containing the data. The data we will be working with in this lab is quite small (~16MB); however, it is a sample taken from a much larger database (more than a few GBs). # Run this cell to set up your notebook import numpy as np import pandas as pd import plotly.express as px import sqlalchemy from ds100_utils import fetch_and_cache from pathlib import Path %load_ext sql # Unzip the data. !unzip -o data.zip Archive: data.zip\rinflating: imdbmini.db inflating: fec_nyc.db ","date":"2024-08-13","objectID":"/datalab10/:0:0","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"SQL Query Syntax Throughout this lab, you will become familiar with the following syntax for the SELECT query: SELECT [DISTINCT] {* | expr [[AS] c_alias] {,expr [[AS] c_alias] ...}} FROM tableref {, tableref} [[INNER | LEFT ] JOIN table_name ON qualification_list] [WHERE search_condition] [GROUP BY colname {,colname...}] [HAVING search condition] [ORDER BY column_list] [LIMIT number] [OFFSET number of rows]; Part 0 [Tutorial]: Writing SQL in Jupyter Notebooks ","date":"2024-08-13","objectID":"/datalab10/:1:0","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"1. %%sql cell magic In lecture, we used the sql extension to call %%sql cell magic, which enables us to connect to SQL databses and issue SQL commands within Jupyter Notebooks. Run the below cell to connect to a mini IMDb database. %sql sqlite:///imdbmini.db Above, prefixing our single-line command with %sql means that the entire line will be treated as a SQL command (this is called “line magic”). In this class we will most often write multi-line SQL, meaning we need “cell magic”, where the first line has %%sql (note the double % operator). The database imdbmini.db includes several tables, one of which is Title. Running the below cell will return first 5 lines of that table. Note that %%sql is on its own line. We’ve also included syntax for single-line comments, which are surrounded by --. %%sql /* * This is a * multi-line comment. */ -- This is a single-line/inline comment. -- SELECT * FROM Name LIMIT 5; * sqlite:///imdbmini.db\rDone.\rnconst\rprimaryName\rbirthYear\rdeathYear\rprimaryProfession\r1\rFred Astaire\r1899\r1987\rsoundtrack,actor,miscellaneous\r2\rLauren Bacall\r1924\r2014\ractress,soundtrack\r3\rBrigitte Bardot\r1934\rNone\ractress,soundtrack,music_department\r4\rJohn Belushi\r1949\r1982\ractor,soundtrack,writer\r5\rIngmar Bergman\r1918\r2007\rwriter,director,actor\r","date":"2024-08-13","objectID":"/datalab10/:2:0","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"2. The Pandas command pd.read_sql As of 2022, the %sql magic for Jupyter Notebooks is still in development (check out its GitHub. It is still missing many features that would justify real-world use with Python. In particular, its returned tables are not Pandas dataframes (for example, the query result from the above cell is missing an index). The rest of this section describes how data scientists use SQL and Python in practice, using the Pandas command pd.read_sql (documentation). You will see both %sql magic and pd.read_sql in this course. The below cell connects to the same database using the SQLAlchemy Python library, which can connect to several different database management systems, including sqlite3, MySQL, PostgreSQL, and Oracle. The library also supports an advanced feature for generating queries called an object relational mapper or ORM, which we won’t discuss in this course but is quite useful for application development. # important!!! run this cell import sqlalchemy # create a SQL Alchemy connection to the database engine = sqlalchemy.create_engine(\"sqlite:///imdbmini.db\") connection = engine.connect() With the SQLAlchemy object connection, we can then call pd.read_sql which takes in a query string. Note the \"\"\" to define our multi-line string, which allows us to have a query span multiple lines. The resulting df DataFrame stores the results of the same SQL query from the previous section. # just run this cell query = \"\"\" SELECT * FROM Title LIMIT 5; \"\"\" df = pd.read_sql(query, engine) df tconst\rtitleType\rprimaryTitle\roriginalTitle\risAdult\rstartYear\rendYear\rruntimeMinutes\rgenres\r0\r417\rshort\rA Trip to the Moon\rLe voyage dans la lune\r0\r1902\rNone\r13\rAction,Adventure,Comedy\r1\r4972\rmovie\rThe Birth of a Nation\rThe Birth of a Nation\r0\r1915\rNone\r195\rDrama,History,War\r2\r10323\rmovie\rThe Cabinet of Dr. Caligari\rDas Cabinet des Dr. Caligari\r0\r1920\rNone\r76\rFantasy,Horror,Mystery\r3\r12349\rmovie\rThe Kid\rThe Kid\r0\r1921\rNone\r68\rComedy,Drama,Family\r4\r13442\rmovie\rNosferatu\rNosferatu, eine Symphonie des Grauens\r0\r1922\rNone\r94\rFantasy,Horror\rLong error messages: Given that the SQL query is now in the string, the errors become more unintelligible. Consider the below (incorrect) query, which has a semicolon in the wrong place. # uncomment the below code and check out the error # query = \"\"\" # SELECT * # FROM Title; # LIMIT 5 # \"\"\" # pd.read_sql(query, engine) ---------------------------------------------------------------------------\rProgrammingError Traceback (most recent call last)\rFile d:\\miniconda3\\Lib\\site-packages\\sqlalchemy\\engine\\base.py:1967, in Connection._exec_single_context(self, dialect, context, statement, parameters)\r1966 if not evt_handled:\r-\u003e 1967 self.dialect.do_execute(\r1968 cursor, str_statement, effective_parameters, context\r1969 )\r1971 if self._has_events or self.engine._has_events:\rFile d:\\miniconda3\\Lib\\site-packages\\sqlalchemy\\engine\\default.py:924, in DefaultDialect.do_execute(self, cursor, statement, parameters, context)\r923 def do_execute(self, cursor, statement, parameters, context=None):\r--\u003e 924 cursor.execute(statement, parameters)\rProgrammingError: You can only execute one statement at a time.\rThe above exception was the direct cause of the following exception:\rProgrammingError Traceback (most recent call last)\rCell In[7], line 8\r1 # uncomment the below code and check out the error\r3 query = \"\"\"\r4 SELECT *\r5 FROM Title;\r6 LIMIT 5\r7 \"\"\"\r----\u003e 8 pd.read_sql(query, engine)\rFile d:\\miniconda3\\Lib\\site-packages\\pandas\\io\\sql.py:734, in read_sql(sql, con, index_col, coerce_float, params, parse_dates, columns, chunksize, dtype_backend, dtype)\r724 return pandas_sql.read_table(\r725 sql,\r726 index_col=index_col,\r(...)\r731 dtype_backend=dtype_backend,\r732 )\r733 else:\r--\u003e 734 return pandas_sql.read_query(\r735 sql,\r736 index_col=index_col,\r737 params=params,\r738 coerce_float=coerce_float,\r739 parse_dates=parse_dates,\r740 chunksize=chunksize,\r741 dtype_backend=dtype_backend,\r742 dtype=dtype,\r743 )\rFile d:\\miniconda3\\Lib\\","date":"2024-08-13","objectID":"/datalab10/:2:1","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"3. A suggested workflow for writing SQL in Jupyter Notebooks Which approach is better, %sql magic or pd.read_sql? The SQL database generally contains much more data than what you would analyze in detail. As a Python-fluent data scientist, you will often query SQL databases to perform initial exploratory data analysis, a subset of which you load into Python for further processing. In practice, you would likely use a combination of the two approaches. First, you’d try out some SQL queries with %sql magic to get an interesting subset of data. Then, you’d copy over the query into a pd.read_sql command for visualization, modeling, and export with Pandas, sklearn, and other Python libraries. For SQL assignments in this course, to minimize unruly error messages while maximizing Python compatibility, we suggest the following “sandboxed” workflow: Create a %%sql magic cell below the answer cell. You can copy in the below code: %% sql -- This is a comment. Put your code here... -- Work on the SQL query in the %%sql cell; e.g., SELECT ... ; Then, once you’re satisfied with your SQL query, copy it into the multi-string query in the answer cell (the one that contains the pd.read_sql call). You don’t have to follow the above workflow to get full credit on assignments, but we suggest it to reduce debugging headaches. We’ve created the scratchwork %%sql cells for you in this assignment, but do not add cells between this %%sql cell and the Python cell right below it. It will cause errors when we run the autograder, and it will sometimes cause a failure to generate the PDF file. Part 1: The IMDb (mini) Dataset Let’s explore a miniature version of the IMDb Dataset. This is the same dataset that we will use for the upcoming homework. Let’s load in the database in two ways (using both Python and cell magic) so that we can flexibly explore the database. engine = sqlalchemy.create_engine(\"sqlite:///imdbmini.db\") connection = engine.connect() %sql sqlite:///imdbmini.db %%sql SELECT * FROM sqlite_master WHERE type='table'; * sqlite:///imdbmini.db\rDone.\rtype\rname\rtbl_name\rrootpage\rsql\rtable\rTitle\rTitle\r2\rCREATE TABLE \"Title\" ( \"tconst\" INTEGER, \"titleType\" TEXT, \"primaryTitle\" TEXT, \"originalTitle\" TEXT, \"isAdult\" TEXT, \"startYear\" TEXT, \"endYear\" TEXT, \"runtimeMinutes\" TEXT, \"genres\" TEXT )\rtable\rName\rName\r12\rCREATE TABLE \"Name\" ( \"nconst\" INTEGER, \"primaryName\" TEXT, \"birthYear\" TEXT, \"deathYear\" TEXT, \"primaryProfession\" TEXT )\rtable\rRole\rRole\r70\rCREATE TABLE \"Role\" ( tconst INTEGER, ordering TEXT, nconst INTEGER, category TEXT, job TEXT, characters TEXT )\rtable\rRating\rRating\r41\rCREATE TABLE \"Rating\" ( tconst INTEGER, averageRating TEXT, numVotes TEXT )\rFrom running the above cell, we see the database has 4 tables: Name, Role, Rating, and Title. [Click to Expand] See descriptions of each table's schema.\rName -Contains the following information for names of people. nconst (text) - alphanumeric unique identifier of the name/person primaryName (text)-name by which the person is most often credited birthYear (integer) -in YYYY format deathYear (integer) -in YYYY format Role -Contains the principal cast/crew for titles. tconst (text) - alphanumeric unique identifier of the title ordering (integer) -a number to uniquely identify rows for a given tconst nconst (text) - alphanumeric unique identifier of the name/person category (text) - the category of job that person was in characters (text) - the name of the character played if applicable, else ‘\\N’ Rating -Contains the IMDb rating and votes information for titles. tconst (text) - alphanumeric unique identifier of the title averageRating (real) -weighted average of all the individual user ratings numVotes (integer) - number of votes (i.e., ratings) the title has received Title - Contains the following information for titles. tconst (text) - alphanumeric unique identifier of the title titleType (text) - the type/format of the title primaryTitle (text) - the more popular title / the title used by the filmma","date":"2024-08-13","objectID":"/datalab10/:2:2","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"Question 1 What are the different kinds of titleTypes included in the Title table? Write a query to find out all the unique titleTypes of films using the DISTINCT keyword. (You may not use GROUP BY.) %%sql /* * Code in this scratchwork cell is __not graded.__ * Copy over any SQL queries you write here into the below Python cell. * Do __not__ insert any new cells in between the SQL/Python cells! * Doing so may break the autograder. */ -- Write below this comment. -- SELECT DISTINCT titleType FROM Title; * sqlite:///imdbmini.db\rDone.\rtitleType\rshort\rmovie\rtvSeries\rtvMovie\rtvMiniSeries\rvideo\rvideoGame\rtvEpisode\rtvSpecial\rquery_q1 = \"\"\" SELECT DISTINCT titleType FROM Title; \"\"\" res_q1 = pd.read_sql(query_q1, engine) res_q1 titleType\r0\rshort\r1\rmovie\r2\rtvSeries\r3\rtvMovie\r4\rtvMiniSeries\r5\rvideo\r6\rvideoGame\r7\rtvEpisode\r8\rtvSpecial\rgrader.check(\"q1\") q1 passed! 🍀 ","date":"2024-08-13","objectID":"/datalab10/:3:0","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"Question 2 Before we proceed we want to get a better picture of the kinds of jobs that exist. To do this examine the Role table by computing the number of records with each job category. Present the results in descending order by the total counts. The top of your table should look like this (however, you should have more rows): category total 0 actor 21665 1 writer 13830 2 … … %%sql /* * Code in this scratchwork cell is __not graded.__ * Copy over any SQL queries you write here into the below Python cell. * Do __not__ insert any new cells in between the SQL/Python cells! * Doing so may break the autograder. */ -- Write below this comment. -- SELECT category, COUNT(*) AS total FROM Role GROUP BY category ORDER BY total DESC; * sqlite:///imdbmini.db\rDone.\rcategory\rtotal\ractor\r21665\rwriter\r13830\ractress\r12175\rproducer\r11028\rdirector\r6995\rcomposer\r4123\rcinematographer\r2747\reditor\r1558\rself\r623\rproduction_designer\r410\rarchive_footage\r66\rarchive_sound\r6\rquery_q2 = \"\"\" SELECT category, COUNT(*) AS total FROM Role GROUP BY category ORDER BY total DESC; \"\"\" res_q2 = pd.read_sql(query_q2, engine) res_q2 category\rtotal\r0\ractor\r21665\r1\rwriter\r13830\r2\ractress\r12175\r3\rproducer\r11028\r4\rdirector\r6995\r5\rcomposer\r4123\r6\rcinematographer\r2747\r7\reditor\r1558\r8\rself\r623\r9\rproduction_designer\r410\r10\rarchive_footage\r66\r11\rarchive_sound\r6\rgrader.check(\"q2\") q2 passed! 🍀 If we computed the results correctly we should see a nice horizontal bar chart of the counts per category below:\r# just run this cell px.bar(res_q2, x=\"total\", y=\"category\", orientation='h') ","date":"2024-08-13","objectID":"/datalab10/:4:0","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"Question 3 Now that we have a better sense of the basics of our data, we can ask some more interesting questions. The Rating table has the numVotes and the averageRating for each title. Which 10 films have the most ratings? Write a SQL query that outputs three fields: the title, numVotes, and averageRating for the 10 films that have the highest number of ratings. Sort the result in descending order by the number of votes. Hint: The numVotes in the Rating table is not an integer! Use CAST(Rating.numVotes AS int) AS numVotes to convert the attribute to an integer. %%sql /* * Code in this scratchwork cell is __not graded.__ * Copy over any SQL queries you write here into the below Python cell. * Do __not__ insert any new cells in between the SQL/Python cells! * Doing so may break the autograder. */ -- Write below this comment. -- SELECT primaryTitle, CAST(numVotes AS int) AS numVotes, averageRating FROM Rating, Title WHERE Rating.tconst = Title.tconst ORDER BY numVotes DESC; query_q3 = \"\"\" SELECT primaryTitle AS title, CAST(numVotes AS int) AS numVotes, averageRating FROM Rating, Title WHERE Rating.tconst = Title.tconst ORDER BY numVotes DESC LIMIT 10; \"\"\" res_q3 = pd.read_sql(query_q3, engine) res_q3 title\rnumVotes\raverageRating\r0\rThe Shawshank Redemption\r2462686\r9.3\r1\rThe Dark Knight\r2417875\r9.0\r2\rInception\r2169255\r8.8\r3\rFight Club\r1939312\r8.8\r4\rPulp Fiction\r1907561\r8.9\r5\rForrest Gump\r1903969\r8.8\r6\rGame of Thrones\r1874040\r9.2\r7\rThe Matrix\r1756469\r8.7\r8\rThe Lord of the Rings: The Fellowship of the Ring\r1730296\r8.8\r9\rThe Lord of the Rings: The Return of the King\r1709023\r8.9\rgrader.check(\"q3\") Part 2: Election Donations in New York City Finally, let’s analyze the Federal Election Commission (FEC)’s public records. We connect to the database in two ways (using both Python and cell magic) so that we can flexibly explore the database. # important!!! run this cell and the next one import sqlalchemy # create a SQL Alchemy connection to the database engine = sqlalchemy.create_engine(\"sqlite:///fec_nyc.db\") connection = engine.connect() %sql sqlite:///fec_nyc.db ","date":"2024-08-13","objectID":"/datalab10/:5:0","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"Table Descriptions Run the below cell to explore the schemas of all tables saved in the database. If you’d like, you can consult the below linked FEC pages for the descriptions of the tables themselves. cand (link): Candidates table. Contains names and party affiliation. comm (link): Committees table. Contains committee names and types. indiv_sample_nyc (link): All individual contributions from New York City . %%sql /* just run this cell */ SELECT sql FROM sqlite_master WHERE type='table'; * sqlite:///fec_nyc.db\rsqlite:///imdbmini.db\rDone.\rsql\rCREATE TABLE \"cand\" ( cand_id character varying(9), cand_name text, cand_pty_affiliation character varying(3), cand_election_yr integer, cand_office_st character varying(2), cand_office character(1), cand_office_district integer, cand_ici character(1), cand_status character(1), cand_pcc character varying(9), cand_st1 text, cand_st2 text, cand_city text, cand_st character varying(2), cand_zip character varying(10) )\rCREATE TABLE \"comm\"( \"cmte_id\" TEXT, \"cmte_nm\" TEXT, \"tres_nm\" TEXT, \"cmte_st1\" TEXT, \"cmte_st2\" TEXT, \"cmte_city\" TEXT, \"cmte_st\" TEXT, \"cmte_zip\" TEXT, \"cmte_dsgn\" TEXT, \"cmte_tp\" TEXT, \"cmte_pty_affiliation\" TEXT, \"cmte_filing_freq\" TEXT, \"org_tp\" TEXT, \"connected_org_nm\" TEXT, \"cand_id\" TEXT )\rCREATE TABLE indiv_sample_nyc ( cmte_id character varying(9), amndt_ind character(1), rpt_tp character varying(3), transaction_pgi character(5), image_num bigint, transaction_tp character varying(3), entity_tp character varying(3), name text, city text, state character(2), zip_code character varying(12), employer text, occupation text, transaction_dt character varying(9), transaction_amt integer, other_id text, tran_id text, file_num bigint, memo_cd text, memo_text text, sub_id bigint )\rLet’s look at the indiv_sample_nyc table. The below cell displays individual donations made by residents of the state of New York. We use LIMIT 5 to avoid loading and displaying a huge table. %%sql /* just run this cell */ SELECT comm.cmte_id, cmte_nm, sum(transaction_amt) as total FROM indiv_sample_nyc, comm WHERE indiv_sample_nyc.cmte_id = comm.cmte_id AND name LIKE '%TRUMP%' AND name LIKE '%DONALD%' GROUP BY cmte_nm ORDER BY transaction_amt LIMIT 5; * sqlite:///fec_nyc.db\rsqlite:///imdbmini.db\rDone.\rcmte_id\rcmte_nm\rtotal\rC00608489\rGREAT AMERICA PAC\r75\rC00369033\rTEXANS FOR SENATOR JOHN CORNYN INC\r1000\rC00494229\rHELLER FOR SENATE\r2000\rC00554949\rFRIENDS OF DAVE BRAT INC.\r2600\rC00230482\rGRASSLEY COMMITTEE INC\r5200\rYou can write a SQL query to return the id and name of the first five candidates from the Democratic party, as below: %%sql /* just run this cell */ SELECT cand_id, cand_name FROM cand WHERE cand_pty_affiliation = 'DEM' LIMIT 5; * sqlite:///fec_nyc.db\rsqlite:///imdbmini.db\rDone.\rcand_id\rcand_name\rH0AL05049\rCRAMER, ROBERT E \"BUD\" JR\rH0AL07086\rSEWELL, TERRYCINA ANDREA\rH0AL07094\rHILLIARD, EARL FREDERICK JR\rH0AR01091\rGREGORY, JAMES CHRISTOPHER\rH0AR01109\rCAUSEY, CHAD\r","date":"2024-08-13","objectID":"/datalab10/:6:0","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"[Tutorial] Matching Text with LIKE First, let’s look at 2016 election contributions made by Donald Trump, who was a New York (NY) resident during that year. The following SQL query returns the cmte_id, transaction_amt, and name for every contribution made by any donor with “DONALD” and “TRUMP” in their name in the indiv_sample_nyc table. Notes: We use the WHERE ... LIKE '...' to match fields with text patterns. The % wildcard represents at least zero characters. Compare this to what you know from regex! We use pd.read_sql syntax here because we will do some EDA on the result res. # just run this cell example_query = \"\"\" SELECT cmte_id, transaction_amt, name FROM indiv_sample_nyc WHERE name LIKE '%TRUMP%' AND name LIKE '%DONALD%'; \"\"\" example_res = pd.read_sql(example_query, engine) example_res cmte_id\rtransaction_amt\rname\r0\rC00230482\r2600\rDONALD, TRUMP\r1\rC00230482\r2600\rDONALD, TRUMP\r2\rC00014498\r9000\rTRUMP, DONALD\r3\rC00494229\r2000\rTRUMP, DONALD MR\r4\rC00571869\r2700\rTRUMP, DONALD J.\r...\r...\r...\r...\r152\rC00608489\r5\rDONALD J TRUMP FOR PRESIDENT INC\r153\rC00608489\r5\rDONALD J TRUMP FOR PRESIDENT INC\r154\rC00608489\r5\rDONALD J TRUMP FOR PRESIDENT INC\r155\rC00608489\r5\rDONALD J TRUMP FOR PRESIDENT INC\r156\rC00608489\r5\rDONALD J TRUMP FOR PRESIDENT INC\r157 rows × 3 columns If we look at the list above, it appears that some donations were not by Donald Trump himself, but instead by an entity called “DONALD J TRUMP FOR PRESIDENT INC”. Fortunately, we see that our query only seems to have picked up one such anomalous name. # just run this cell example_res['name'].value_counts() name\rTRUMP, DONALD J. 133\rDONALD J TRUMP FOR PRESIDENT INC 15\rTRUMP, DONALD 4\rDONALD, TRUMP 2\rTRUMP, DONALD MR 1\rTRUMP, DONALD J MR. 1\rTRUMP, DONALD J MR 1\rName: count, dtype: int64\r","date":"2024-08-13","objectID":"/datalab10/:7:0","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"Question 4 Revise the above query so that the 15 anomalous donations made by “DONALD J TRUMP FOR PRESIDENT INC” do not appear. Your resulting table should have 142 rows. Hints: Consider using the above query as a starting point, or checking out the SQL query skeleton at the top of this lab. The NOT keyword may also be useful here. %%sql /* * Code in this scratchwork cell is __not graded.__ * Copy over any SQL queries you write here into the below Python cell. * Do __not__ insert any new cells in between the SQL/Python cells! * Doing so may break the autograder. */ -- Write below this comment. -- SELECT cmte_id, transaction_amt, name FROM indiv_sample_nyc WHERE name LIKE '%TRUMP%' AND name LIKE '%DONALD%' AND name NOT LIKE '%DONALD J TRUMP FOR PRESIDENT INC%'; query_q4 = \"\"\" SELECT cmte_id, transaction_amt, name FROM indiv_sample_nyc WHERE name LIKE '%TRUMP%' AND name LIKE '%DONALD%' AND name NOT LIKE '%DONALD J TRUMP FOR PRESIDENT INC%'; \"\"\" res_q4 = pd.read_sql(query_q4, engine) res_q4 cmte_id\rtransaction_amt\rname\r0\rC00230482\r2600\rDONALD, TRUMP\r1\rC00230482\r2600\rDONALD, TRUMP\r2\rC00014498\r9000\rTRUMP, DONALD\r3\rC00494229\r2000\rTRUMP, DONALD MR\r4\rC00571869\r2700\rTRUMP, DONALD J.\r...\r...\r...\r...\r137\rC00580100\r9752\rTRUMP, DONALD J.\r138\rC00580100\r2574\rTRUMP, DONALD J.\r139\rC00580100\r23775\rTRUMP, DONALD J.\r140\rC00580100\r2000000\rTRUMP, DONALD J.\r141\rC00580100\r2574\rTRUMP, DONALD J.\r142 rows × 3 columns grader.check(\"q4\") q4 passed! ","date":"2024-08-13","objectID":"/datalab10/:8:0","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"Question 5: JOINing Tables Let’s explore the other two tables in our database: cand and comm. The cand table contains summary financial information about each candidate registered with the FEC or appearing on an official state ballot for House, Senate or President. %%sql /* just run this cell */ SELECT * FROM indiv_sample_nyc LIMIT 5; * sqlite:///fec_nyc.db\rsqlite:///imdbmini.db\rDone.\rcmte_id\ramndt_ind\rrpt_tp\rtransaction_pgi\rimage_num\rtransaction_tp\rentity_tp\rname\rcity\rstate\rzip_code\remployer\roccupation\rtransaction_dt\rtransaction_amt\rother_id\rtran_id\rfile_num\rmemo_cd\rmemo_text\rsub_id\rC00445015\rN\rQ1\rP 15951128130\r15\rIND\rSINGER, TRIPP MR.\rNEW YORK\rNY\r100214505\rATLANTIC MAILBOXES, INC.\rOWNER\r01302015\r1000\rA-CF13736\r1002485\r4041420151241812398\rC00510461\rN\rQ1\rP 15951129284\r15E\rIND\rSIMON, DANIEL A\rNEW YORK\rNY\r100237940\rN/A\rRETIRED\r03292015\r400\rC00401224\rVN8JBDDJBA8\r1002590\r* EARMARKED CONTRIBUTION: SEE BELOW\r4041420151241813640\rC00422410\rN\rQ1\rP 15970352211\r15\rIND\rABDUL RAUF, FEISAL\rNEW YORK\rNY\r101150010\rTHE CORDOBA INITIATIVE\rCHAIRMAN\r03042015\r250\rVN8A3DBSYG6\r1003643\r4041620151241914560\rC00510461\rN\rQ1\rP 15951129280\r15\rIND\rSCHWARZER, FRANK\rNEW YORK\rNY\r100145135\rMETRO HYDRAULIC JACK CO\rSALES\r01162015\r100\rVN8JBDAP4C4\r1002590\r* EARMARKED CONTRIBUTION: SEE BELOW\r4041420151241813630\rC00510461\rN\rQ1\rP 15951129281\r15\rIND\rSCHWARZER, FRANK\rNEW YORK\rNY\r100145135\rMETRO HYDRAULIC JACK CO\rSALES\r02162015\r100\rVN8JBDBRDG3\r1002590\r* EARMARKED CONTRIBUTION: SEE BELOW\r4041420151241813632\rThe comm table contains summary financial information about each committee registered with the FEC. Committees are organizations that spend money for political action or parties, or spend money for or against political candidates. %%sql /* just run this cell */ SELECT * FROM comm LIMIT 5; * sqlite:///fec_nyc.db\rsqlite:///imdbmini.db\rDone.\rcmte_id\rcmte_nm\rtres_nm\rcmte_st1\rcmte_st2\rcmte_city\rcmte_st\rcmte_zip\rcmte_dsgn\rcmte_tp\rcmte_pty_affiliation\rcmte_filing_freq\rorg_tp\rconnected_org_nm\rcand_id\rC00000059\rHALLMARK CARDS PAC\rERIN BROWER\r2501 MCGEE\rMD#288\rKANSAS CITY\rMO\r64108\rU\rQ\rUNK\rM\rC\rC00000422\rAMERICAN MEDICAL ASSOCIATION POLITICAL ACTION COMMITTEE\rWALKER, KEVIN\r25 MASSACHUSETTS AVE, NW\rSUITE 600\rWASHINGTON\rDC\r20001\rB\rQ\rM\rM\rAMERICAN MEDICAL ASSOCIATION\rC00000489\rD R I V E POLITICAL FUND CHAPTER 886\rTOM RITTER\r3528 W RENO\rOKLAHOMA CITY\rOK\r73107\rU\rN\rQ\rL\rTEAMSTERS LOCAL UNION 886\rC00000547\rKANSAS MEDICAL SOCIETY POLITICAL ACTION COMMITTEE\rC. RICHARD BONEBRAKE, M.D.\r623 SW 10TH AVE\rTOPEKA\rKS\r66612\rU\rQ\rUNK\rQ\rT\rC00000638\rINDIANA STATE MEDICAL ASSOCIATION POLITICAL ACTION COMMITTEE\rVIDYA KORA, M.D.\r322 CANAL WALK, CANAL LEVEL\rINDIANAPOLIS\rIN\r46202\rU\rQ\rQ\rM\r","date":"2024-08-13","objectID":"/datalab10/:9:0","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"Question 5a Notice that both the cand and comm tables have a cand_id column. Let’s try joining these two tables on this column to print out committee information for candidates. List the first 5 candidate names (cand_name) in reverse lexicographic order by cand_name, along with their corresponding committee names. Only select rows that have a matching cand_id in both tables. Your output should look similar to the following: cand_name cmte_nm 0 ZUTLER, DANIEL PAUL MR CITIZENS TO ELECT DANIEL P ZUTLER FOR PRESIDENT 1 ZUMWALT, JAMES ZUMWALT FOR CONGRESS … … … Consider starting from the following query skeleton, which uses the AS keyword to rename the cand and comm tables to c1 and c2, respectively. Which join is most appropriate? SELECT ...\rFROM cand AS c1\r[INNER | {LEFT |RIGHT | FULL } {OUTER}] JOIN comm AS c2\rON ...\r...\r...;\r%%sql /* * Code in this scratchwork cell is __not graded.__ * Copy over any SQL queries you write here into the below Python cell. * Do __not__ insert any new cells in between the SQL/Python cells! * Doing so may break the autograder. */ -- Write below this comment. -- SELECT cand_name, cmte_nm FROM cand AS c1 INNER JOIN comm AS c2 ON c1.cand_id = c2.cand_id ORDER BY cand_name DESC; query_q5a = \"\"\" SELECT cand_name, cmte_nm FROM cand AS c1 INNER JOIN comm AS c2 ON c1.cand_id = c2.cand_id ORDER BY cand_name DESC LIMIT 5; \"\"\" res_q5a = pd.read_sql(query_q5a, engine) res_q5a cand_name\rcmte_nm\r0\rZUTLER, DANIEL PAUL MR\rCITIZENS TO ELECT DANIEL P ZUTLER FOR PRESIDENT\r1\rZUMWALT, JAMES\rZUMWALT FOR CONGRESS\r2\rZUKOWSKI, ANDREW GEORGE\rZUKOWSKI FOR CONGRESS\r3\rZUCCOLO, JOE\rJOE ZUCCOLO FOR CONGRESS\r4\rZORN, ROBERT ERWIN\rCONSTITUTIONAL COMMITTEE\rgrader.check(\"q5a\") q5a passed! 🎉 ","date":"2024-08-13","objectID":"/datalab10/:9:1","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"Question 5b Suppose we modify the query from the previous part to include all candidates, including those that don’t have a committee. List the first 5 candidate names (cand_name) in reverse lexicographic order by cand_name, along with their corresponding committee names. If the candidate has no committee in the comm table, then cmte_nm should be NULL (or None in the Python representation). Your output should look similar to the following: cand_name cmte_nm 0 ZUTLER, DANIEL PAUL MR CITIZENS TO ELECT DANIEL P ZUTLER FOR PRESIDENT … … … 4 ZORNOW, TODD MR None Hint: Start from the same query skeleton as the previous part. Which join is most appropriate? %%sql /* * Code in this scratchwork cell is __not graded.__ * Copy over any SQL queries you write here into the below Python cell. * Do __not__ insert any new cells in between the SQL/Python cells! * Doing so may break the autograder. */ -- Write below this comment. -- SELECT cand_name, cmte_nm FROM cand AS c1 LEFT JOIN comm AS c2 ON c1.cand_id = c2.cand_id ORDER BY cand_name DESC LIMIT 5; * sqlite:///fec_nyc.db\rsqlite:///imdbmini.db\rDone.\rcand_name\rcmte_nm\rZUTLER, DANIEL PAUL MR\rCITIZENS TO ELECT DANIEL P ZUTLER FOR PRESIDENT\rZUMWALT, JAMES\rZUMWALT FOR CONGRESS\rZUKOWSKI, ANDREW GEORGE\rZUKOWSKI FOR CONGRESS\rZUCCOLO, JOE\rJOE ZUCCOLO FOR CONGRESS\rZORNOW, TODD MR\rNone\rquery_q5b = \"\"\" SELECT cand_name, cmte_nm FROM cand AS c1 LEFT JOIN comm AS c2 ON c1.cand_id = c2.cand_id ORDER BY cand_name DESC LIMIT 5; \"\"\" res_q5b = pd.read_sql(query_q5b, engine) res_q5b cand_name\rcmte_nm\r0\rZUTLER, DANIEL PAUL MR\rCITIZENS TO ELECT DANIEL P ZUTLER FOR PRESIDENT\r1\rZUMWALT, JAMES\rZUMWALT FOR CONGRESS\r2\rZUKOWSKI, ANDREW GEORGE\rZUKOWSKI FOR CONGRESS\r3\rZUCCOLO, JOE\rJOE ZUCCOLO FOR CONGRESS\r4\rZORNOW, TODD MR\rNone\rgrader.check(\"q5b\") q5b passed! 🚀 ","date":"2024-08-13","objectID":"/datalab10/:9:2","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":"Question 6: Subqueries and Grouping If we return to our results from Question 4, we see that many of the contributions were to the same committee: # Your SQL query result from Question 4 # reprinted for your convenience res_q4 cmte_id\rtransaction_amt\rname\r0\rC00230482\r2600\rDONALD, TRUMP\r1\rC00230482\r2600\rDONALD, TRUMP\r2\rC00014498\r9000\rTRUMP, DONALD\r3\rC00494229\r2000\rTRUMP, DONALD MR\r4\rC00571869\r2700\rTRUMP, DONALD J.\r...\r...\r...\r...\r137\rC00580100\r9752\rTRUMP, DONALD J.\r138\rC00580100\r2574\rTRUMP, DONALD J.\r139\rC00580100\r23775\rTRUMP, DONALD J.\r140\rC00580100\r2000000\rTRUMP, DONALD J.\r141\rC00580100\r2574\rTRUMP, DONALD J.\r142 rows × 3 columns Create a new SQL query that returns the total amount that Donald Trump contributed to each committee. Your table should have four columns: cmte_id, total_amount (total amount contributed to that committee), num_donations (total number of donations), and cmte_nm (name of the committee). Your table should be sorted in decreasing order of total_amount. This is a hard question! Don’t be afraid to reference the lecture slides, or the overall SQL query skeleton at the top of this lab. Here are some other hints: Note that committee names are not available in indiv_sample_nyc, so you will have to obtain information somehow from the comm table (perhaps a JOIN would be useful). Remember that you can compute summary statistics after grouping by using aggregates like COUNT(*), SUM() as output fields. A subquery may be useful to break your question down into subparts. Consider the following query skeleton, which uses the WITH operator to store a subquery’s results in a temporary table named donations. WITH donations AS (\rSELECT ...\r...\r)\rSELECT ...\rFROM donations\rGROUP BY ...\rORDER BY ...;\r%%sql /* just run this cell */ SELECT comm.cmte_id, sum(transaction_amt) as total_amount, COUNT(*) as num_donations, cmte_nm FROM indiv_sample_nyc, comm WHERE indiv_sample_nyc.cmte_id = comm.cmte_id AND name LIKE '%TRUMP%' AND name LIKE '%DONALD%' GROUP BY cmte_nm ORDER BY total_amount DESC LIMIT 10; * sqlite:///fec_nyc.db\rsqlite:///imdbmini.db\rDone.\rcmte_id\rtotal_amount\rnum_donations\rcmte_nm\rC00580100\r18633157\r131\rDONALD J. TRUMP FOR PRESIDENT, INC.\rC00055582\r10000\r1\rNY REPUBLICAN FEDERAL CAMPAIGN COMMITTEE\rC00014498\r9000\r1\rREPUBLICAN PARTY OF IOWA\rC00571869\r5400\r2\rDONOVAN FOR CONGRESS\rC00230482\r5200\r2\rGRASSLEY COMMITTEE INC\rC00034033\r5000\r1\rSOUTH CAROLINA REPUBLICAN PARTY\rC00136457\r5000\r1\rNEW HAMPSHIRE REPUBLICAN STATE COMMITTEE\rC00554949\r2600\r1\rFRIENDS OF DAVE BRAT INC.\rC00494229\r2000\r1\rHELLER FOR SENATE\rC00369033\r1000\r1\rTEXANS FOR SENATOR JOHN CORNYN INC\r%%sql /* * Code in this scratchwork cell is __not graded.__ * Copy over any SQL queries you write here into the below Python cell. * Do __not__ insert any new cells in between the SQL/Python cells! * Doing so may break the autograder. */ -- Write below this comment. -- WITH donations AS ( SELECT c1.cmte_id,transaction_amt, cmte_nm FROM indiv_sample_nyc AS c1, comm AS c2 WHERE c1.cmte_id = c2.cmte_id AND name LIKE '%TRUMP%' AND name LIKE '%DONALD%' AND transaction_amt \u003e 0 ) SELECT cmte_id, SUM(transaction_amt) AS total_amount, count(*) AS num_donations, cmte_nm FROM donations GROUP BY cmte_nm ORDER BY total_amount LIMIT 10; * sqlite:///fec_nyc.db\rsqlite:///imdbmini.db\rDone.\rcmte_id\rtotal_amount\rnum_donations\rcmte_nm\rC00608489\r75\r15\rGREAT AMERICA PAC\rC00369033\r1000\r1\rTEXANS FOR SENATOR JOHN CORNYN INC\rC00494229\r2000\r1\rHELLER FOR SENATE\rC00554949\r2600\r1\rFRIENDS OF DAVE BRAT INC.\rC00136457\r5000\r1\rNEW HAMPSHIRE REPUBLICAN STATE COMMITTEE\rC00034033\r5000\r1\rSOUTH CAROLINA REPUBLICAN PARTY\rC00230482\r5200\r2\rGRASSLEY COMMITTEE INC\rC00571869\r5400\r2\rDONOVAN FOR CONGRESS\rC00014498\r9000\r1\rREPUBLICAN PARTY OF IOWA\rC00055582\r10000\r1\rNY REPUBLICAN FEDERAL CAMPAIGN COMMITTEE\rquery_q6 = \"\"\" SELECT comm.cmte_id, sum(transaction_amt) as total_amount, COUNT(*) as num_donations, cmte_nm FROM indiv_sample_nyc, comm WHERE indiv_sample_nyc.cmte_id = comm.cmte_id AND name LIKE '%TRUMP%' AND name LIKE '","date":"2024-08-13","objectID":"/datalab10/:10:0","tags":["Pandas","sqlite3","sqlalchemy"],"title":"DATA100-lab10: SQL","uri":"/datalab10/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab09.ipynb\") Lab 9: Probability and Modeling In this lab, you will explore estimators and modeling in two parts: You will explore if the “sample max” is a biased estimator for the true max of a population. Given a sample (and no access to the population), you will bootstrap the sample correlation estimator to infer properties of the population correlation of two features. # Run this cell to set up your notebook import csv import matplotlib.pyplot as plt import numpy as np import pandas as pd import scipy.stats import seaborn as sns from IPython.display import FileLink, FileLinks FileLink('path_to_file/filename.extension') %matplotlib inline sns.set() sns.set_context(\"talk\") import warnings warnings.filterwarnings('ignore') from IPython.display import display, Latex, Markdown Part 1: Estimator for Population Max Berkeley Half Marathon is an annual weekend-long race here in Berkeley. On race day, you want to know how many people participated in this year’s race, but you don’t have access to the official head count. So you want to find an estimator for this population maximum (Note: we artificially generated this data, but assume it is the population data as described). The bib numbers of each participant (i.e., racer) are in order of registration—integers from $1$ to the total unknown number of participants. You decide to construct a sample by recording the bib number of every racer you see on the street in a given time period, and use the maximum bib number in your sample as an estimator for the true maximum bib number (i.e., total number of particpants, assuming everyone who registered participated). Assume that a racer’s bib number has no relation to their racing experience, so that you are equally likely to see any of bib number in your sample. Is the sample maximum a good estimator for the population maximum? We’ll use simulation to explore in this part of the lab. Note: In Part 1 of this lab, we assume that we have access to the true population of racers (and therefore the parameter, the true population maximum), so that we can evaluate the sample maximum across all possible samples. However, in practice we don’t have access to the population, nor the population parameter. In Part 2, we’ll explore the analysis we can do if just provided a single sample. ","date":"2024-08-13","objectID":"/datalab9/:0:0","tags":["Numpy","Pandas"],"title":"DATA100-lab9: Probability and Modeling","uri":"/datalab9/"},{"categories":["DATA100"],"content":"Question 1 Let’s first assume that we have access to the total number of participants (in practice we don’t!). The dataset marathon.csv includes information for all racers who registered for the Berkeley Half Marathon. Load the dataset marathon.csv into the DataFrame marathon, assign true_max to the true maximum bib number of the population. (Recall that max bib number is our proxy for total number of participants.) marathon = pd.read_csv('marathon.csv') marathon.head() true_max = int(marathon['Bib Number'].max()) true_max 50732\rgrader.check(\"q1\") q1 passed! 🚀 # just run this cell marathon.describe() Bib Number\rcount\r50732.000000\rmean\r25366.500000\rstd\r14645.211265\rmin\r1.000000\r25%\r12683.750000\r50%\r25366.500000\r75%\r38049.250000\rmax\r50732.000000\r","date":"2024-08-13","objectID":"/datalab9/:1:0","tags":["Numpy","Pandas"],"title":"DATA100-lab9: Probability and Modeling","uri":"/datalab9/"},{"categories":["DATA100"],"content":"Question 2 How would a sample maximum compare to the true maximum? Formally defined, let $X_1, \\dots, X_n$ be a sample of $n$ random variables drawn IID (independent and identically distributed) from the population. Define the sample max as the maximum value of the sample. $$\\text{samplemax} = \\max (X_1, \\dots, X_n)$$ Recall from Data 8 that we can get the empirical distribution of a statistic by simulating, or repeatedly sampling from the population. Suppose we compute the sample max as the maximum bib number from observing the bib numbers of $n = 200$ random racers. By repeating this process for many randomly selected samples, we get a simulated distributed of the sample max statistic. Assign sample_maxes to an array that contains 5,000 simulated sample maxes from samples of size 200, each sampled randomly with replacement from the population marathon. (Side note: We sample with replacement because while it suggests that we could see the same racer multiple times in our sample, it allows us to assume each individual in our sample is drawn IID from the population.) Some useful functions: df.sample (link), np.random.choice (link). Do not edit the np.random.seed call, which sets the pseudorandomness of the autograder. np.random.seed(2022) # do not change this line sample_maxes = [] for i in range(5000): sample = marathon['Bib Number'].sample(n=200, replace=True) sample_maxes.append(sample.max()) sample_maxes = np.array(sample_maxes) sample_maxes array([50641, 50724, 50486, ..., 50642, 50434, 50704])\rgrader.check(\"q2\") ","date":"2024-08-13","objectID":"/datalab9/:2:0","tags":["Numpy","Pandas"],"title":"DATA100-lab9: Probability and Modeling","uri":"/datalab9/"},{"categories":["DATA100"],"content":"Question 3 ","date":"2024-08-13","objectID":"/datalab9/:3:0","tags":["Numpy","Pandas"],"title":"DATA100-lab9: Probability and Modeling","uri":"/datalab9/"},{"categories":["DATA100"],"content":"Question 3a Plot the empirical distribution of the sample maximum that you generated in Question 2. Your plot should look like the below plot. It should include both the average sample maximum and the true population maximum as vertical lines. Visualization/plotting tips: To plot a vertical line with specific linestyles, see the plt.axvline documentation. To include a label in the legend, pass in label=... to the plot that you’d like to label (example). BEGIN QUESTION name: q3a plt.figure(figsize = [10, 6]) bins = np.linspace(49000, 50750, 25) # for your plot avg_sample_maxes = np.mean(sample_maxes) plt.hist(sample_maxes, bins) plt.axvline(x = true_max, color ='black', label = 'True Maximum', linestyle = '--') plt.axvline(x = avg_sample_maxes, color = 'green', label = 'E[Sample Max]', linestyle = '--') plt.legend(); # show legend ","date":"2024-08-13","objectID":"/datalab9/:3:1","tags":["Numpy","Pandas"],"title":"DATA100-lab9: Probability and Modeling","uri":"/datalab9/"},{"categories":["DATA100"],"content":"Question 3b Recall from Spring 2022 Lecture 17 that an unbiased estimator is one where the expected value of the estimator is the parameter. For example, the sample mean $\\bar{X}_n$ is an unbiased estimator of the population mean $\\mu$ because $\\mathbb{E}[\\bar{X}_n] = \\mu$ by the Central Limit Theorem. Based on your analysis in Question 3a, assign q3b to the most correct option; then in the second cell, explain your choice. The sample maximum is an unbiased estimator of the population maximum. The sample maximum overestimates the population maximum. The sample maximum underestimates the population maximum. q3b = 3 grader.check(\"q3b\") q3b passed! 🚀 Part 2: Inference for the Population Correlation The previous part assumed that we had access to the population; from there, we simulated many different samples to understand properties of our estimator. In practice, however, we only have access to one sample (and therefore one value of our estimator); we will explore this next. In Spring 2022 Lecture 16, we defined population correlation as the expected product of standardized deviations from expectation: $$r(X, Y) = \\mathbb{E} \\left[\\left(\\frac{X - \\mathbb{E}[X]}{\\text{SD}(X)} \\right) \\left(\\frac{Y - \\mathbb{E}[Y]}{\\text{SD}(Y)}\\right)\\right]$$ Note that population correlation involves the population means $\\mathbb{E}[X]$ and $\\mathbb{E}[Y]$ and the population standard deviations $\\text{SD}(X)$ and $\\text{SD}(Y)$. Correlation provides us with important information about the linear relationship between variables. In this part, we’ll explore the tips dataset once more, and we will compute the sample correlation statistic of two features: total bill and party size. We will then explore how the sample correlation estimates the true population correlation parameter. The below cell assigns data to our single sample collected about customer tipping behaviors. # just run this cell tips = sns.load_dataset(\"tips\") data = tips[['total_bill','size']] data total_bill\rsize\r0\r16.99\r2\r1\r10.34\r3\r2\r21.01\r3\r3\r23.68\r2\r4\r24.59\r4\r...\r...\r...\r239\r29.03\r3\r240\r27.18\r2\r241\r22.67\r2\r242\r17.82\r2\r243\r18.78\r2\r244 rows × 2 columns ","date":"2024-08-13","objectID":"/datalab9/:3:2","tags":["Numpy","Pandas"],"title":"DATA100-lab9: Probability and Modeling","uri":"/datalab9/"},{"categories":["DATA100"],"content":"Question 4 To estimate the population correlation, we’d like to use an estimator based on data from a simple random sample of our tips data set. For a sample $(X_1, Y_1), \\dots, (X_n, Y_n)$ generated IID from a population, define the sample correlation as follows: $$\\frac{\\sum\\limits_{i=1}^n\\left(X_i-\\overline{X}\\right)\\left(Y_i-\\overline{Y}\\right)}{\\sqrt{\\sum\\limits_{i=1}^n \\left(X_i - \\overline{X}\\right)^2}\\sqrt{\\sum\\limits_{i=1}^n \\left(Y_i - \\overline{Y}\\right)^2}}$$ Note the similar structure to the true population correlation. If the $i$-th individual in our sample has “total bill” $X_i$ and “party size” $Y_i$, then $\\overline{X}, \\overline{Y}$ are the sample means of total bill and party size, respectively. Implement the sample_correlation function in the cell below to compute the sample correlation for sample, which has two columns: total_bill and size. def sample_correlation(sample): \"\"\"Compute sample correlation of x and y. sample: A DataFrame of dimension (n, 2) \"\"\" x, y = sample['total_bill'], sample['size'] x_bar = np.mean(x) y_bar = np.mean(y) n = len(sample) return np.sum((x - x_bar) * (y - y_bar)) / np.sqrt(np.sum((x - x_bar) ** 2) * np.sum((y - y_bar) ** 2)) sample_correlation(data) np.float64(0.5983151309049014)\rgrader.check(\"q4\") Let the sample correlation of data be the estimator for the population correlation. In other words: Parameter: Population correlation. Unknown, but fixed. Statistic: Sample correlation. Dependent on the random sample we obtained. Estimator: The sample correlation statistic corr_est is an estimator of the population correlation parameter. # just run this cell corr_est = sample_correlation(data) corr_est np.float64(0.5983151309049014)\rWhat can we infer about the population correlation given this estimate? Is it possible that the total bill and the party size are actually uncorrelated? We can perform bootstrapped hypothesis testing as follows:[假设检验] Null hypothesis: Total bill and party size are uncorrelated; the population correlation is 0. Alternate hypothesis: The population correlation is not 0. To test this hypothesis, we can bootstrap a $(1-p)$% confidence interval for the population correlation and check if 0 is in the interval. If 0 is in the interval, the data are consistent with the null hypothesis. If 0 is not in the interval, we reject the null hypothesis at the $p$% significance level. For more on the duality of the confidence interval and the p-value, see this StackExchange discussion. ","date":"2024-08-13","objectID":"/datalab9/:4:0","tags":["Numpy","Pandas"],"title":"DATA100-lab9: Probability and Modeling","uri":"/datalab9/"},{"categories":["DATA100"],"content":"Question 5 Implement the ci_correlation function in the cell below that returns a bootstrapped confidence interval at the $conf$% level. Your bootstrap should resample the sample dataframe with replacement m times to construct m bootstrapped sample correlations using the sample_correlation function you implemented in Question 4. Then, assign boot_ci to the bootstrapped 95% confidence interval for the tips data sample. def ci_correlation(sample, conf, m=5000): \"\"\"Compute a confidence interval for an estimator. sample: A DataFrame or Series estimator: A function that maps a sample DataFrame to an estimate (number) \"\"\" estimates = [] n = len(sample) for j in range(m): resample = sample.sample(n=n, replace=True) estimates.append(sample_correlation(resample)) lower = np.percentile(estimates, (100-conf)/2) upper = np.percentile(estimates, 100-(100-conf)/2) # 一个用于计算数组沿指定轴的百分位数的函数 return (lower, upper) boot_ci = ci_correlation(data, conf=95) boot_ci (np.float64(0.5126429599326643), np.float64(0.6790547421163837))\rgrader.check(\"q5\") ","date":"2024-08-13","objectID":"/datalab9/:5:0","tags":["Numpy","Pandas"],"title":"DATA100-lab9: Probability and Modeling","uri":"/datalab9/"},{"categories":["DATA100"],"content":"Question 6 Now that we have the bootstrapped 95% confidence interval of the parameter based on a single sample of size 244, let’s determine what we can conclude about our population correlation. ","date":"2024-08-13","objectID":"/datalab9/:6:0","tags":["Numpy","Pandas"],"title":"DATA100-lab9: Probability and Modeling","uri":"/datalab9/"},{"categories":["DATA100"],"content":"Question 6a Fill in the blanks for the sentence: By bootstrapping our sample data, our estimate of the population correlation is ________ with a ___ % confidence interval of ________. 0.5983, 95, (np.float64(0.5126429599326643), np.float64(0.6790547421163837)) ","date":"2024-08-13","objectID":"/datalab9/:6:1","tags":["Numpy","Pandas"],"title":"DATA100-lab9: Probability and Modeling","uri":"/datalab9/"},{"categories":["DATA100"],"content":"Question 6b In the cell below, interpret the statement in Question 6a. Can we reject the null hypothesis at the 5% significance level? What can we infer about the relationship between total bill and party size? 拒绝原假设，接受备择假设==\u003e有关联 ","date":"2024-08-13","objectID":"/datalab9/:6:2","tags":["Numpy","Pandas"],"title":"DATA100-lab9: Probability and Modeling","uri":"/datalab9/"},{"categories":["DATA100"],"content":"Submission Congratulations! You are finished with this assignment. ","date":"2024-08-13","objectID":"/datalab9/:7:0","tags":["Numpy","Pandas"],"title":"DATA100-lab9: Probability and Modeling","uri":"/datalab9/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab07.ipynb\") Lab 7: Gradient Descent and Feature Engineering In this lab, we will work through the process of: Defining loss functions Feature engineering Minimizing loss functions using numeric methods and analytical methods Understanding what happens if we use the analytical solution for OLS on a matrix with redundant features Computing a gradient for a nonlinear model Using gradient descent to optimize the nonline model This lab will continue using the toy tips calculation dataset used in Labs 5 and 6. Loading the Tips Dataset To begin, let’s load the tips dataset from the seaborn library. This dataset contains records of tips, total bill, and information about the person who paid the bill. As earlier, we’ll be trying to predict tips from the other data. import pandas as pd import numpy as np import seaborn as sns from sklearn.feature_extraction import DictVectorizer import matplotlib.pyplot as plt np.random.seed(42) plt.style.use('fivethirtyeight') sns.set() sns.set_context(\"talk\") %matplotlib inline data = sns.load_dataset(\"tips\") print(\"Number of Records:\", len(data)) data.head() Number of Records: 244\rtotal_bill\rtip\rsex\rsmoker\rday\rtime\rsize\r0\r16.99\r1.01\rFemale\rNo\rSun\rDinner\r2\r1\r10.34\r1.66\rMale\rNo\rSun\rDinner\r3\r2\r21.01\r3.50\rMale\rNo\rSun\rDinner\r3\r3\r23.68\r3.31\rMale\rNo\rSun\rDinner\r2\r4\r24.59\r3.61\rFemale\rNo\rSun\rDinner\r4\r","date":"2024-08-13","objectID":"/datalab7/:0:0","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Intro to Feature Engineering So far, we’ve only considered models of the form $\\hat{y} = f_{\\theta}(x) = \\sum_{j=0}^d x_j\\theta_j$, where $\\hat{y}$ is quantitative continuous. We call this a linear model because it is a linear combination of the features (the $x_j$). However, our features don’t need to be numbers: we could have categorical values such as names. Additionally, the true relationship doesn’t have to be linear, as we could have a relationship that is quadratic, such as the relationship between the height of a projectile and time. In these cases, we often apply feature functions, functions that take in some value and output another value. This might look like converting a string into a number, combining multiple numeric values, or creating a boolean value from some filter. Then, if we call $\\phi$ (“phi”) our “phi”-ture function, our model takes the form $\\hat{y} = f_{\\theta}(x) = \\sum_{j=0}^d \\phi(x)_j\\theta_j$. ","date":"2024-08-13","objectID":"/datalab7/:1:0","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Example feature functions 编码一直是一个先验工程问题？ vs AutoEncoders One-hot encoding converts a single categorical feature into many binary features, each of which represents one of the possible values in the original column each of the binary feature columns produced contains a 1 for rows that had that column’s label in the original column, and 0 elsewhere Polynomial features create polynomial combinations of features ","date":"2024-08-13","objectID":"/datalab7/:1:1","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Question 1: Defining the Model and Feature Engineering In Lab 6 we used the constant model. Now let’s make a more complicated model that utilizes other features in our dataset. You can imagine that we might want to use the features with an equation that looks as shown below: $$ \\text{Tip} = \\theta_1 \\cdot \\text{total}_\\text{bill} + \\theta_2 \\cdot \\text{sex} + \\theta_3 \\cdot \\text{smoker} + \\theta_4 \\cdot \\text{day} + \\theta_5 \\cdot \\text{time} + \\theta_6 \\cdot \\text{size} $$ Unfortunately, that’s not possible because some of these features like “day” are not numbers, so it doesn’t make sense to multiply by a numerical parameter. Let’s start by converting some of these non-numerical values into numerical values. Before we do this, let’s separate out the tips and the features into two separate variables. tips = data['tip'] X = data.drop(columns='tip') ","date":"2024-08-13","objectID":"/datalab7/:2:0","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Question 1a: Feature Engineering First, let’s convert our features to numerical values. A straightforward approach is to map some of these non-numerical features into numerical ones. For example, we can treat the day as a value from 1-7. However, one of the disadvantages in directly translating to a numeric value is that we unintentionally assign certain features disproportionate weight. Consider assigning Sunday to the numeric value of 7, and Monday to the numeric value of 1. In our linear model, Sunday will have 7 times the influence of Monday, which can lower the accuracy of our model. Instead, let’s use one-hot encoding to better represent these features! As you will learn in lecture, one-hot encoding is a way that we can produce a binary vector to indicate non-numeric features. In the tips dataset for example, we encode Sunday as the vector [0 0 0 1] because our dataset only contains bills from Thursday through Sunday. This assigns a more even weight across each category in non-numeric features. Complete the code below to one-hot encode our dataset. This dataframe holds our “featurized” data, which is also often denoted by $\\phi$. Hint: You may find the pd.get_dummies method or the DictVectorizer class useful when doing your one-hot encoding. def one_hot_encode(data): \"\"\" Return the one-hot encoded dataframe of our input data. Parameters ----------- data: a dataframe that may include non-numerical features Returns ----------- A one-hot encoded dataframe that only contains numeric features \"\"\" return pd.get_dummies(data, dtype=float) one_hot_X = one_hot_encode(X) one_hot_X.head() total_bill\rsize\rsex_Male\rsex_Female\rsmoker_Yes\rsmoker_No\rday_Thur\rday_Fri\rday_Sat\rday_Sun\rtime_Lunch\rtime_Dinner\r0\r16.99\r2\r0.0\r1.0\r0.0\r1.0\r0.0\r0.0\r0.0\r1.0\r0.0\r1.0\r1\r10.34\r3\r1.0\r0.0\r0.0\r1.0\r0.0\r0.0\r0.0\r1.0\r0.0\r1.0\r2\r21.01\r3\r1.0\r0.0\r0.0\r1.0\r0.0\r0.0\r0.0\r1.0\r0.0\r1.0\r3\r23.68\r2\r1.0\r0.0\r0.0\r1.0\r0.0\r0.0\r0.0\r1.0\r0.0\r1.0\r4\r24.59\r4\r0.0\r1.0\r0.0\r1.0\r0.0\r0.0\r0.0\r1.0\r0.0\r1.0\rgrader.check(\"q1a\") ","date":"2024-08-13","objectID":"/datalab7/:2:1","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Question 1b: Defining the Model Now that all of our data is numeric, we can begin to define our model function. Notice that after one-hot encoding our data, we now have 12 features instead of 6. Therefore, our linear model now looks like: $$ \\text{Tip} = \\theta_1 \\cdot \\text{size} + \\theta_2 \\cdot \\text{total}_\\text{bill} + \\theta_3 \\cdot \\text{day}_\\text{Thur} + \\theta_4 \\cdot \\text{day}_\\text{Fri} + … + \\theta_{11} \\cdot \\text{time}_\\text{Lunch} + \\theta_{12} \\cdot \\text{time}_\\text{Dinner} $$ We can represent the linear combination above as a matrix-vector product. Implement the linear_model function to evaluate this product. Below, we create a MyLinearModel class with two methods, predict and fit. When fitted, this model fails to do anything useful, setting all of its 12 parameters to zero. class MyLinearModel(): def predict(self, X): return X @ self._thetas def fit(self, X, y): number_of_features = X.shape[1] self._thetas = np.zeros(shape = (number_of_features, 1)) model = MyLinearModel() model.fit(one_hot_X, tips) model._thetas array([[0.],\r[0.],\r[0.],\r[0.],\r[0.],\r[0.],\r[0.],\r[0.],\r[0.],\r[0.],\r[0.],\r[0.]])\r","date":"2024-08-13","objectID":"/datalab7/:2:2","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Question 2: Fitting a Linear Model using scipy.optimize.minimize Methods Recall in Lab 5 and in lecture 12 we defined multiple loss functions and found the optimal theta using the scipy.optimize.minimize function. Adapt the code below to implement the fit method of the linear model. Note that we’ve added a loss_function parameter where the model is fit using the desired loss function, i.e. not necssarily the L2 loss. Example loss function are given as l1 and l2. from scipy.optimize import minimize def l1(y, y_hat): return np.abs(y - y_hat) def l2(y, y_hat): return (y - y_hat)**2 class MyLinearModel(): def predict(self, X): return X @ self._thetas def fit(self, loss_function, X, y): \"\"\" Produce the estimated optimal _thetas for the given loss function, feature matrix X, and observations y. Parameters ----------- loss_function: either the squared or absolute loss functions defined above X: a 2D dataframe (or numpy array) of numeric features (one-hot encoded) y: a 1D vector of tip amounts Returns ----------- The estimate for the optimal theta vector that minimizes our loss \"\"\" number_of_features = X.shape[1] ## Notes on the following function call which you need to finish: # # 0. The starting guess should be some arbitrary array of the correct length. # Note the \"number of features\" variable above.\" # 1. The ... in \"lambda theta: ...\" should be replaced by the average loss if we # compute X @ theta. The loss is measured using the given loss function, # relative to the observations in the variable y. starting_guess = np.random.rand(number_of_features) self._thetas = minimize(lambda theta: loss_function(y, X @ theta).mean() , x0 = starting_guess)['x'] # Notice above that we extract the 'x' entry in the dictionary returned by `minimize`. # This entry corresponds to the optimal theta estimated by the function. Sorry # we know it's a little confusing, but 'x' is hard coded into the minimize function # because of the fact that in the optimization universe \"x\" is what you optimize over. # It'd be less confusing for DS100 students if they used \"theta\". # When you run the code below, you should get back some non zero thetas. model = MyLinearModel() model.fit(l2, one_hot_X, tips) model._thetas array([ 0.09448702, 0.17599315, 0.31373886, 0.34618029, -0.22256393,\r-0.13615575, 0.30569628, 0.46797868, 0.34653012, 0.44250887,\r0.1939605 , 0.1258012 ])\rgrader.check(\"q2\") q2 passed! 💯 The MSE for your model above should be just slightly larger than 1: from sklearn.metrics import mean_squared_error mean_squared_error(model.predict(one_hot_X), tips) np.float64(1.0103535612506567)\r","date":"2024-08-13","objectID":"/datalab7/:3:0","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Question 3: Fitting the Model using Analytic Methods Let’s also fit our model analytically for the L2 loss function. Recall from lecture that with a linear model, we are solving the following optimization problem for least squares: $$\\min_{\\theta} ||\\Bbb{X}\\theta - \\Bbb{y}||^2$$ We showed in Lecture 11 that the optimal $\\hat{\\theta}$ when $X^TX$ is invertible is given by the equation: $(X^TX)^{-1}X^TY$ ","date":"2024-08-13","objectID":"/datalab7/:4:0","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Question 3a: Analytic Solution Using Explicit Inverses For this problem, implement the analytic solution above using np.linalg.inv to compute the inverse of $X^TX$. Reminder: To compute the transpose of a matrix, you can use X.T or X.transpose() class MyAnalyticallyFitOLSModel(): def predict(self, X): return X @ self._thetas def fit(self, X, y): \"\"\" Sets _thetas using the analytical solution to the ordinary least squares problem Parameters ----------- X: a 2D dataframe (or numpy array) of numeric features (one-hot encoded) y: a 1D vector of tip amounts Returns ----------- The estimate for theta computed using the equation mentioned above \"\"\" xTx = X.T @ X xTy = X.T @ y self._thetas = np.linalg.inv(xTx) @ xTy Now, run the cell below to find the analytical solution for the tips dataset. Depending on the machine that you run your code on, you should either see a singular matrix error or end up with thetas that are nonsensical (magnitudes greater than 10^15). This is not good! # When you run the code below, you should get back some non zero thetas. model = MyAnalyticallyFitOLSModel() model.fit(one_hot_X, tips) analytical_thetas = model._thetas analytical_thetas array([ 9.66544413e+00, -1.89677732e+02, -8.30149679e+17, -8.30149679e+17,\r8.30149679e+17, 8.30149679e+17, -2.56000000e+02, 0.00000000e+00,\r-3.20000000e+01, 3.20000000e+01, -8.00000000e+00, 0.00000000e+00])\rIn the cell below, explain why we got the error（指参数不对？） above when trying to calculate the analytical solution for our one-hot encoded tips dataset. 本质上是因为矩阵 不可逆，独热编码某些线性组合之后可以轻易看出矩阵 $X^TX$ 不是满秩的 ","date":"2024-08-13","objectID":"/datalab7/:4:1","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Question 3b: Fixing our One-Hot Encoding Now, let’s fix our one-hot encoding approach from question 1 so we don’t get the error we saw in question 3a. Complete the code below to one-hot-encode our dataset such that one_hot_X_revised has no redundant features. def one_hot_encode_revised(data): \"\"\" Return the one-hot encoded dataframe of our input data, removing redundancies. Parameters ----------- data: a dataframe that may include non-numerical features Returns ----------- A one-hot encoded dataframe that only contains numeric features without any redundancies. \"\"\" columns = ['sex', 'smoker', 'day', 'time'] for column in columns: values = data[column].unique() for value in values[:-1]: # 这是用[]切片的技巧，从values中取除了最后一个元素的所有元素 data[column + '=' + value] = (data[column] == value).astype(int) data = data.drop(column, axis=1) # 删除原始的列 return data one_hot_X_revised = one_hot_encode_revised(X) numerical_model = MyLinearModel() numerical_model.fit(l2, one_hot_X_revised, tips) analytical_model = MyAnalyticallyFitOLSModel() analytical_model.fit(one_hot_X_revised, tips) print(\"Our numerical model's loss is: \", mean_squared_error(numerical_model.predict(one_hot_X_revised), tips)) print(\"Our analytical model's loss is: \", mean_squared_error(analytical_model.predict(one_hot_X_revised), tips)) Our numerical model's loss is: 1.0255082437778105\rOur analytical model's loss is: 1.0255082436053506\rgrader.check(\"q3b\") ","date":"2024-08-13","objectID":"/datalab7/:4:2","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Question 3c: Analyzing our new One-Hot Encoding Why did removing redundancies in our one-hot encoding fix the problem we had in 3a? 不是全部进行独热编码操作，避免线性相关性 Note: An alternate approach is to use np.linalg.solve instead of np.linalg.inv. For the example above, even with the redundant features, np.linalg.solve will work well. Though in general, it’s best to drop redundant features anyway. In case you want to learn more, here is a relevant Stack Overflow post: https://stackoverflow.com/questions/31256252/why-does-numpy-linalg-solve-offer-more-precise-matrix-inversions-than-numpy-li ","date":"2024-08-13","objectID":"/datalab7/:4:3","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Question 4: Gradient Descent # Run this cell to load the data for this problem df = pd.read_csv(\"lab7_data.csv\", index_col=0) df.head() x\ry\r0\r-5.000000\r-7.672309\r1\r-4.966555\r-7.779735\r2\r-4.933110\r-7.995938\r3\r-4.899666\r-8.197059\r4\r-4.866221\r-8.183883\rIf we plot this data, we see that there is a clear sinusoidal relationship between x and y. import plotly.express as px px.scatter(df, x = \"x\", y = \"y\") In this exercise, we’ll show gradient descent is so powerful it can even optimize a nonlinear model. Specifically, we’re going to model the relationship of our data by: $$\\Large{ f_{\\boldsymbol{\\theta(x)}} = \\theta_1x + sin(\\theta_2x) }$$ Our model is parameterized by both $\\theta_1$ and $\\theta_2$, which we can represent in the vector, $\\boldsymbol{\\theta}$. Note that a general sine function $a\\sin(bx+c)$ has three parameters: amplitude scaling parameter $a$, frequency parameter $b$ and phase shifting parameter $c$. Here, we’re assuming the amplitude $a$ is around 1, and the phase shifting parameter $c$ is around zero. We do not attempt to justify this assumption and you’re welcome to see what happens if you ignore this assumption at the end of this lab. You might ask why we don’t just create a linear model like we did earlier with a sinusoidal feature. The issue is that the theta is INSIDE the sin function. In other words, linear models use their parameters to adjust the scale of each feature, but $\\theta_2$ in this model adjusts the frequency of the feature. There are tricks we could play to use our linear model framework here, but we won’t attempt this in our lab. We define the sin_model function below that predicts $\\textbf{y}$ (the $y$-values) using $\\textbf{x}$ (the $x$-values) based on our new equation. def sin_model(x, theta): \"\"\" Predict the estimate of y given x, theta_1, theta_2 Keyword arguments: x -- the vector of values x theta -- a vector of length 2, where theta[0] = theta_1 and theta[1] = theta_2 \"\"\" theta_1 = theta[0] theta_2 = theta[1] return theta_1 * x + np.sin(theta_2 * x) ","date":"2024-08-13","objectID":"/datalab7/:5:0","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Question 4a: Computing the Gradient of the MSE With Respect to Theta on the Sin Model Recall $\\hat{\\theta}$ is the value of $\\theta$ that minimizes our loss function. One way of solving for $\\hat{\\theta}$ is by computing the gradient of our loss function with respect to $\\theta$, like we did in lecture: https://docs.google.com/presentation/d/1j9ESgjn-aeZSOX5ON1wjkF5WBZHc4IN7XvTpYnX1pFs/edit#slide=id.gfc76b62ec3_0_27. Recall that the gradient is a column vector of two partial derivatives. Write/derive the expressions for following values and use them to fill in the functions below. $L(\\textbf{x}, \\textbf{y}, \\theta_1, \\theta_2)$: our loss function, the mean squared error $\\frac{\\partial L }{\\partial \\theta_1}$: the partial derivative of $L$ with respect to $\\theta_1$ $\\frac{\\partial L }{\\partial \\theta_2}$: the partial derivative of $L$ with respect to $\\theta_2$ Recall that $L(\\textbf{x}, \\textbf{y}, \\theta_1, \\theta_2) = \\frac{1}{n} \\sum_{i=1}^{n} (\\textbf{y}_i - \\hat{\\textbf{y}}_i)^2$ Specifically, the functions sin_MSE, sin_MSE_dt1 and sin_MSE_dt2 should compute $R$, $\\frac{\\partial R }{\\partial \\theta_1}$ and $\\frac{\\partial R }{\\partial \\theta_2}$ respectively. Use the expressions you wrote for $\\frac{\\partial R }{\\partial \\theta_1}$ and $\\frac{\\partial R }{\\partial \\theta_2}$ to implement these functions. In the functions below, the parameter theta is a vector that looks like $\\begin{bmatrix} \\theta_1 \\ \\theta_2 \\end{bmatrix}$. We have completed sin_MSE_gradient, which calls dt1 and dt2 and returns the gradient dt for you. Notes: Keep in mind that we are still working with our original set of data, df. To keep your code a bit more concise, be aware that np.mean does the same thing as np.sum divided by the length of the numpy array. *注意mean的层级别 Another way to keep your code more concise is to use the function sin_model we defined which computes the output of the model. def sin_MSE(theta, x, y): \"\"\" Compute the numerical value of the l2 loss of our sinusoidal model given theta Keyword arguments: theta -- the vector of values theta x -- the vector of x values y -- the vector of y values \"\"\" return np.mean((y - sin_model(x, theta))**2) def sin_MSE_dt1(theta, x, y): \"\"\" Compute the numerical value of the partial of l2 loss with respect to theta_1 Keyword arguments: theta -- the vector of values theta x -- the vector of x values y -- the vector of y values \"\"\" return np.mean(-2 * (y - sin_model(x, theta)) * x) def sin_MSE_dt2(theta, x, y): \"\"\" Compute the numerical value of the partial of l2 loss with respect to theta_2 Keyword arguments: theta -- the vector of values theta x -- the vector of x values y -- the vector of y values \"\"\" return np.mean(-2*(y-sin_model(x, theta))*x*np.cos(theta[1]*x)) # This function calls dt1 and dt2 and returns the gradient dt. It is already implemented for you. def sin_MSE_gradient(theta, x, y): \"\"\" Returns the gradient of l2 loss with respect to vector theta Keyword arguments: theta -- the vector of values theta x -- the vector of x values y -- the vector of y values \"\"\" return np.array([sin_MSE_dt1(theta, x, y), sin_MSE_dt2(theta, x, y)]) grader.check(\"q4a\") ","date":"2024-08-13","objectID":"/datalab7/:5:1","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Question 4b: Implementing Gradient Descent and Using It to Optimize the Sin Model Let’s now implement gradient descent. Note that the function you’re implementing here is somewhat different than the gradient descent function we created in lecture. The version in lecture was gradient_descent(df, initial_guess, alpha, n), where df was the gradient of the function we are minimizing and initial_guess are the starting parameters for that function. Here our signature is a bit different (described below) than the gradient_descent implementation from lecture. def init_theta(): \"\"\"Creates an initial theta [0, 0] of shape (2,) as a starting point for gradient descent\"\"\" return np.array([0, 0]) def grad_desc(loss_f, gradient_loss_f, theta, data, num_iter=20, alpha=0.1): \"\"\" Run gradient descent update for a finite number of iterations and static learning rate Keyword arguments: loss_f -- the loss function to be minimized (used for computing loss_history) gradient_loss_f -- the gradient of the loss function to be minimized theta -- the vector of values theta to use at first iteration data -- the data used in the model num_iter -- the max number of iterations alpha -- the learning rate (also called the step size) Return: theta -- the optimal value of theta after num_iter of gradient descent theta_history -- the series of theta values over each iteration of gradient descent loss_history -- the series of loss values over each iteration of gradient descent \"\"\" theta_history = [] loss_history = [] for i in range(num_iter): theta_history.append(theta) # 先append比较好 loss_history.append(loss_f(theta, data['x'], data['y'])) d_b = gradient_loss_f(theta, data['x'], data['y']) theta = theta - alpha * d_b return theta, theta_history, loss_history theta_start = init_theta() theta_hat, thetas_used, losses_calculated = grad_desc( sin_MSE, sin_MSE_gradient, theta_start, df, num_iter=20, alpha=0.1 ) for b, l in zip(thetas_used, losses_calculated): print(f\"theta: {b}, Loss: {l}\") theta: [0 0], Loss: 20.859191416422235\rtheta: [2.60105745 2.60105745], Loss: 9.285008173048666\rtheta: [0.90342728 2.59100602], Loss: 4.680169273815357\rtheta: [2.05633644 2.9631291 ], Loss: 2.6242517936325833\rtheta: [1.15892347 2.86687431], Loss: 1.4765157174727774\rtheta: [1.79388042 3.07275573], Loss: 0.9073271435862448\rtheta: [1.32157494 3.00146569], Loss: 0.541531643291128\rtheta: [1.64954491 3.02910866], Loss: 0.3775841142469479\rtheta: [1.42325294 2.98820303], Loss: 0.2969750688130759\rtheta: [1.58295041 3.01033846], Loss: 0.2590425421375732\rtheta: [1.47097255 2.98926519], Loss: 0.23973439443291833\rtheta: [1.55040965 3.0017442 ], Loss: 0.23034782416254634\rtheta: [1.49439132 2.99135194], Loss: 0.2255775832667724\rtheta: [1.5341564 2.99797824], Loss: 0.22321772191904068\rtheta: [1.50603995 2.99286671], Loss: 0.22202363967204045\rtheta: [1.52598919 2.99628665], Loss: 0.22142811500262397\rtheta: [1.51186655 2.99375531], Loss: 0.22112776381775168\rtheta: [1.52188208 2.99549617], Loss: 0.22097741373654575\rtheta: [1.51478773 2.99423497], Loss: 0.22090173185683032\rtheta: [1.51981739 2.99511516], Loss: 0.2208637810584589\rgrader.check(\"q4b\") If you pass the tests above, you’re done coding for this lab, though there are some cool visualizations below we’d like you to think about. Let’s visually inspect our results of running gradient descent to optimize $\\boldsymbol\\theta$. The code below plots our $x$-values with our model’s predicted $\\hat{y}$-values over the original scatter plot. You should notice that gradient descent successfully optimized $\\boldsymbol\\theta$. theta_init = init_theta() theta_est, thetas, loss = grad_desc(sin_MSE, sin_MSE_gradient, theta_init, df) Plotting our model output over our observaitons shows that gradient descent did a great job finding both the overall increase (slope) of the data, as well as the oscillation frequency. x, y = df['x'], df['y'] y_pred = sin_model(x, theta_est) plt.plot(x, y_pred, label='Model ($\\hat{y}$)') plt.scatter(x, y, alpha=0.5, label='Observati","date":"2024-08-13","objectID":"/datalab7/:5:2","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":"Visualizing Loss (Extra) Let’s visualize our loss functions and gain some insight as to how gradient descent optimizes our model parameters. In the previous plot we saw the loss decrease with each iteration. In this part, we’ll see the trajectory of the algorithm as it travels the loss surface? Run the following cells to see visualization of this trajectory. thetas = np.array(thetas).squeeze() loss = np.array(loss) thetas array([[0. , 0. ],\r[2.60105745, 2.60105745],\r[0.90342728, 2.59100602],\r[2.05633644, 2.9631291 ],\r[1.15892347, 2.86687431],\r[1.79388042, 3.07275573],\r[1.32157494, 3.00146569],\r[1.64954491, 3.02910866],\r[1.42325294, 2.98820303],\r[1.58295041, 3.01033846],\r[1.47097255, 2.98926519],\r[1.55040965, 3.0017442 ],\r[1.49439132, 2.99135194],\r[1.5341564 , 2.99797824],\r[1.50603995, 2.99286671],\r[1.52598919, 2.99628665],\r[1.51186655, 2.99375531],\r[1.52188208, 2.99549617],\r[1.51478773, 2.99423497],\r[1.51981739, 2.99511516]])\r# Run me to see a 3D plot (gradient descent with static alpha) from lab7_utils import plot_3d plot_3d(thetas[:, 0], thetas[:, 1], loss, mean_squared_error, sin_model, x, y) import plotly import plotly.graph_objs as go def contour_plot(title, theta_history, loss_function, model, x, y): \"\"\" The function takes the following as argument: theta_history: a (N, 2) array of theta history loss: a list or array of loss value loss_function: for example, l2_loss model: for example, sin_model x: the original x input y: the original y output \"\"\" theta_1_series = theta_history[:,0] # a list or array of theta_1 value theta_2_series = theta_history[:,1] # a list or array of theta_2 value ## In the following block of code, we generate the z value ## across a 2D grid theta1_s = np.linspace(np.min(theta_1_series) - 0.1, np.max(theta_1_series) + 0.1) theta2_s = np.linspace(np.min(theta_2_series) - 0.1, np.max(theta_2_series) + 0.1) x_s, y_s = np.meshgrid(theta1_s, theta2_s) data = np.stack([x_s.flatten(), y_s.flatten()]).T ls = [] for theta1, theta2 in data: l = loss_function(model(x, np.array([theta1, theta2])), y) ls.append(l) z = np.array(ls).reshape(50, 50) # Create trace of theta point # Create the contour theta_points = go.Scatter(name=\"theta Values\", x=theta_1_series, y=theta_2_series, mode=\"lines+markers\") lr_loss_contours = go.Contour(x=theta1_s, y=theta2_s, z=z, colorscale='Viridis', reversescale=True) plotly.offline.iplot(go.Figure(data=[lr_loss_contours, theta_points], layout={'title': title})) contour_plot('Gradient Descent with Static Learning Rate', thetas, mean_squared_error, sin_model, df[\"x\"], df[\"y\"]) As we can see, gradient descent is able to navigate even this fairly complex loss space and find a nice minimum. Congratulations! You finished the lab! ","date":"2024-08-13","objectID":"/datalab7/:6:0","tags":["Numpy","Pandas","Scikit-Learn","SciPy","Plotly","Seaborn"],"title":"DATA100-lab7: Gradient Descent and Feature Engineering","uri":"/datalab7/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab08.ipynb\") Lab 8: Model Selection, Regularization, and Cross-Validation In this lab, you will practice using scikit-learn to generate models of various complexity. You’ll then use the holdout method and K-fold cross-validation to select the models that generalize best. # Run this cell to set up your notebook import seaborn as sns import csv import numpy as np import pandas as pd import matplotlib.pyplot as plt %matplotlib inline sns.set() sns.set_context(\"talk\") from IPython.display import display, Latex, Markdown ","date":"2024-08-13","objectID":"/datalab8/:0:0","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Introduction For this lab, we will use a toy dataset to predict the house prices in Boston with data provided by the sklearn.datasets package. There are more interesting datasets in the package if you want to explore them during your free time! Run the following cell to load the data. load_boston() will return a dictionary object which includes keys for: data : the covariates (X) target : the response vector (Y) feature_names: the column names DESCR : a full description of the data filename: name of the csv file import pickle boston_data = pickle.load(open(\"boston_data.pickle\", \"rb\")) print(boston_data.keys()) sum(boston_data.data) dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename', 'data_module'])\rarray([1.82844292e+03, 5.75000000e+03, 5.63521000e+03, 3.50000000e+01,\r2.80675700e+02, 3.18002500e+03, 3.46989000e+04, 1.92029160e+03,\r4.83200000e+03, 2.06568000e+05, 9.33850000e+03, 6.40245000e+03])\rprint(boston_data['DESCR']) .. _boston_dataset:\rBoston house prices dataset\r---------------------------\r**Data Set Characteristics:** :Number of Instances: 506 :Number of Attributes: 12 numeric/categorical predictive. Median Value (attribute 13) is usually the target.\r:Attribute Information (in order):\r- CRIM per capita crime rate by town\r- ZN proportion of residential land zoned for lots over 25,000 sq.ft.\r- INDUS proportion of non-retail business acres per town\r- CHAS Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\r- NOX nitric oxides concentration (parts per 10 million)\r- RM average number of rooms per dwelling\r- AGE proportion of owner-occupied units built prior to 1940\r- DIS weighted distances to five Boston employment centres\r- RAD index of accessibility to radial highways\r- TAX full-value property-tax rate per $10,000\r- PTRATIO pupil-teacher ratio by town\r- LSTAT % lower status of the population\r- MEDV Median value of owner-occupied homes in $1000's\r:Missing Attribute Values: None\r:Creator: Harrison, D. and Rubinfeld, D.L.\rThis is a copy of UCI ML housing dataset.\rhttps://archive.ics.uci.edu/ml/machine-learning-databases/housing/\rThis dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.\rThe Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic\rprices and the demand for clean air', J. Environ. Economics \u0026 Management,\rvol.5, 81-102, 1978. Used in Belsley, Kuh \u0026 Welsch, 'Regression diagnostics\r...', Wiley, 1980. N.B. Various transformations are used in the table on\rpages 244-261 of the latter.\rThe Boston house-price data has been used in many machine learning papers that address regression\rproblems. .. topic:: References\r- Belsley, Kuh \u0026 Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.\r- Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.\rA look at the DESCR attribute tells us the data contains these features: 1. CRIM per capita crime rate by town\r2. ZN proportion of residential land zoned for lots over 25,000 sq.ft.\r3. INDUS proportion of non-retail business acres per town\r4. CHAS Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\r5. NOX nitric oxides concentration (parts per 10 million)\r6. RM average number of rooms per dwelling\r7. AGE proportion of owner-occupied units built prior to 1940\r8. DIS weighted distances to five Boston employment centres\r9. RAD index of accessibility to radial highways\r10. TAX full-value property-tax rate per 10,000 USD\r11. PTRATIO pupil-teacher ratio by town\r12. LSTAT % lower status of the population\rLet’s now convert this data into a pandas DataFrame. boston = pd.DataFrame(boston_data['data'], columns=boston_data['feature_names']) boston.head() CRIM\rZN\rINDUS\rCHAS\rNOX\rRM\rAGE\rDIS\rRAD\rTAX\rPTRATIO\rLSTAT\r0\r0.00632\r18.0\r2.31\r0.0\r0.538\r6.575\r65.2\r4.0900\r1.0\r296.0\r15.3\r4.98\r1\r0.0273","date":"2024-08-13","objectID":"/datalab8/:0:1","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Question 1 Let’s model this housing price data! Before we can do this, however, we need to split the data into training and test sets. Remember that the response vector (housing prices) lives in the target attribute. A random seed is set here so that we can deterministically generate the same splitting in the future if we want to test our result again and find potential bugs. Use the train_test_split function to split out 10% of the data for the test set. Call the resulting splits X_train, X_holdout, Y_train, Y_holdout. Here “holdout” refers to the fact that we’re going to hold this data our when training our model. from sklearn.model_selection import train_test_split np.random.seed(45) X = boston Y = pd.Series(boston_data['target']) X_train, X_holdout, Y_train, Y_holdout = train_test_split(X, Y, test_size=0.1) grader.check(\"q1\") q1 passed! 🚀 ","date":"2024-08-13","objectID":"/datalab8/:0:2","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Question 2 As a warmup, fit a linear model to describe the relationship between the housing price and all available covariates. We’ve imported sklearn.linear_model as lm, so you can use that instead of typing out the whole module name. Fill in the cells below to fit a linear regression model to the covariates and create a scatter plot for our predictions vs. the true prices. import sklearn.linear_model as lm linear_model = lm.LinearRegression() # Fit your linear model linear_model.fit(X_train, Y_train) # Predict housing prices on the test set Y_pred = linear_model.predict(X_holdout) # Plot predicted vs true prices plt.scatter(Y_holdout, Y_pred, alpha=0.5) plt.xlabel(\"Prices $(y)$\") plt.ylabel(\"Predicted Prices $(\\hat{y})$\") plt.title(\"Prices vs Predicted Prices\"); \u003c\u003e:14: SyntaxWarning: invalid escape sequence '\\h'\r\u003c\u003e:14: SyntaxWarning: invalid escape sequence '\\h'\rC:\\Users\\86135\\AppData\\Local\\Temp\\ipykernel_6688\\1494534656.py:14: SyntaxWarning: invalid escape sequence '\\h'\rplt.ylabel(\"Predicted Prices $(\\hat{y})$\")\rBriefly analyze the scatter plot above. Do you notice any outliers? Write your answer in the cell below. 理想情况应该是均匀？且较窄分布于y=x直线上 Alternately, we can plot the residuals vs. our model predictions. Ideally they’d all be zero. Given the inevitably of noise, we’d at least like them to be scatter randomly across the line where the residual is zero. By contrast, there appears to be a possible pattern, with our model consistently underestimating prices for both very low and very high values, and possibly consistently overestimating prices towards the middle range. plt.scatter(Y_pred, Y_holdout - Y_pred, alpha=0.5) plt.ylabel(\"Residual $(y - \\hat{y})$\") plt.xlabel(\"Predicted Prices $(\\hat{y})$\") plt.title(\"Residuals vs Predicted Prices\") plt.title(\"Residual of prediction for i'th house\") plt.axhline(y = 0, color='r'); \u003c\u003e:2: SyntaxWarning: invalid escape sequence '\\h'\r\u003c\u003e:3: SyntaxWarning: invalid escape sequence '\\h'\r\u003c\u003e:2: SyntaxWarning: invalid escape sequence '\\h'\r\u003c\u003e:3: SyntaxWarning: invalid escape sequence '\\h'\rC:\\Users\\86135\\AppData\\Local\\Temp\\ipykernel_6688\\2491234216.py:2: SyntaxWarning: invalid escape sequence '\\h'\rplt.ylabel(\"Residual $(y - \\hat{y})$\")\rC:\\Users\\86135\\AppData\\Local\\Temp\\ipykernel_6688\\2491234216.py:3: SyntaxWarning: invalid escape sequence '\\h'\rplt.xlabel(\"Predicted Prices $(\\hat{y})$\")\r","date":"2024-08-13","objectID":"/datalab8/:0:3","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Question 3 As we find from the scatter plot, our model is not perfect. If it were perfect, we would see the identity line (i.e. a line of slope 1). Compute the root mean squared error (RMSE) of the predicted responses: $$ \\textbf{RMSE} = \\sqrt{\\frac{1}{n}\\sum_{i=1}^n \\left( y_i - \\hat{y}_i \\right)^2 } $$ Fill out the function below and compute the RMSE for our predictions on both the training data X_train and the held out set X_holdout. Your implementation should not use for loops. def rmse(actual_y, predicted_y): \"\"\" Args: predicted_y: an array of the prediction from the model actual_y: an array of the groudtruth label Returns: The root mean square error between the prediction and the groudtruth \"\"\" return np.sqrt(np.mean((predicted_y - actual_y)**2)) train_error = rmse(Y_train, linear_model.predict(X_train)) holdout_error = rmse(Y_holdout, Y_pred) print(\"Training RMSE:\", train_error) print(\"Holdout RMSE:\", holdout_error) Training RMSE: 4.633297105625516\rHoldout RMSE: 5.685160866583937\rgrader.check(\"q3\") q3 passed! 🙌 Is your training error lower than the error on the data the model never got to see? If so, why could this be happening? Answer in the cell below. 稍微过拟合？ ","date":"2024-08-13","objectID":"/datalab8/:0:4","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Overfitting Sometimes we can get even higher accuracy by adding more features. For example, the code below adds the square, square root, and hyperbolic tangent of every feature to the design matrix. We’ve chosen these bizarre features specifically to highlight overfitting. boston_with_extra_features = boston.copy() for feature_name in boston.columns: boston_with_extra_features[feature_name + \"^2\"] = boston_with_extra_features[feature_name] ** 2 boston_with_extra_features[\"sqrt\" + feature_name] = np.sqrt(boston_with_extra_features[feature_name]) boston_with_extra_features[\"tanh\" + feature_name] = np.tanh(boston_with_extra_features[feature_name]) boston_with_extra_features.head(5) CRIM\rZN\rINDUS\rCHAS\rNOX\rRM\rAGE\rDIS\rRAD\rTAX\r...\rtanhRAD\rTAX^2\rsqrtTAX\rtanhTAX\rPTRATIO^2\rsqrtPTRATIO\rtanhPTRATIO\rLSTAT^2\rsqrtLSTAT\rtanhLSTAT\r0\r0.00632\r18.0\r2.31\r0.0\r0.538\r6.575\r65.2\r4.0900\r1.0\r296.0\r...\r0.761594\r87616.0\r17.204651\r1.0\r234.09\r3.911521\r1.0\r24.8004\r2.231591\r0.999905\r1\r0.02731\r0.0\r7.07\r0.0\r0.469\r6.421\r78.9\r4.9671\r2.0\r242.0\r...\r0.964028\r58564.0\r15.556349\r1.0\r316.84\r4.219005\r1.0\r83.5396\r3.023243\r1.000000\r2\r0.02729\r0.0\r7.07\r0.0\r0.469\r7.185\r61.1\r4.9671\r2.0\r242.0\r...\r0.964028\r58564.0\r15.556349\r1.0\r316.84\r4.219005\r1.0\r16.2409\r2.007486\r0.999368\r3\r0.03237\r0.0\r2.18\r0.0\r0.458\r6.998\r45.8\r6.0622\r3.0\r222.0\r...\r0.995055\r49284.0\r14.899664\r1.0\r349.69\r4.324350\r1.0\r8.6436\r1.714643\r0.994426\r4\r0.06905\r0.0\r2.18\r0.0\r0.458\r7.147\r54.2\r6.0622\r3.0\r222.0\r...\r0.995055\r49284.0\r14.899664\r1.0\r349.69\r4.324350\r1.0\r28.4089\r2.308679\r0.999953\r5 rows × 48 columns We split up our data again and refit the model. From this cell forward, we append 2 to the variable names X_train, X_holdout, Y_train, Y_holdout, train_error, holdout_error in order to maintain our original data. Make sure you use these variable names from this cell forward, at least until we get to the part where we create version 3 of each of these. np.random.seed(25) X = boston_with_extra_features X_train2, X_holdout2, Y_train2, Y_holdout2 = train_test_split(X, Y, test_size = 0.10) linear_model.fit(X_train2, Y_train2); Looking at our training and test RMSE, we see that they are lower than you computed earlier. This strange model is seemingly better, even though it includes seemingly useless features like the hyperbolic tangent of the average number of rooms per dwelling. train_error2 = rmse(Y_train2, linear_model.predict(X_train2)) holdout_error2 = rmse(Y_holdout2, linear_model.predict(X_holdout2)) print(\"Training RMSE:\", train_error2) print(\"Holdout RMSE:\", holdout_error2) Training RMSE: 3.3514483036916287\rHoldout RMSE: 5.410120414381265\rThe code below generates the training and holdout RMSE for 49 different models stores the results in a DataFrame. The first model uses only the first feature “CRIM”. The second model uses the first two features “CRIM” and “ZN”, and so forth. errors_vs_N = pd.DataFrame(columns = [\"N\", \"Training Error\", \"Holdout Error\"]) range_of_num_features = range(1, X_train2.shape[1] + 1) for N in range_of_num_features: X_train_first_N_features = X_train2.iloc[:, :N] linear_model.fit(X_train_first_N_features, Y_train2) train_error_overfit = rmse(Y_train2, linear_model.predict(X_train_first_N_features)) X_holdout_first_N_features = X_holdout2.iloc[:, :N] holdout_error_overfit = rmse(Y_holdout2, linear_model.predict(X_holdout_first_N_features)) errors_vs_N.loc[len(errors_vs_N)] = [N, train_error_overfit, holdout_error_overfit] errors_vs_N N\rTraining Error\rHoldout Error\r0\r1.0\r8.536340\r7.825177\r1\r2.0\r8.085693\r7.637465\r2\r3.0\r7.776942\r7.213870\r3\r4.0\r7.643897\r6.391482\r4\r5.0\r7.634894\r6.372166\r5\r6.0\r5.698878\r7.635694\r6\r7.0\r5.689554\r7.585860\r7\r8.0\r5.399034\r7.158563\r8\r9.0\r5.379679\r7.281769\r9\r10.0\r5.318218\r7.231629\r10\r11.0\r5.088829\r6.922974\r11\r12.0\r4.680294\r5.437528\r12\r13.0\r4.679671\r5.443388\r13\r14.0\r4.664717\r5.448438\r14\r15.0\r4.627661\r5.479720\r15\r16.0\r4.613226\r5.488425\r16\r17.0\r4.580971\r5.389309\r17\r18.0\r4.580622\r5.391183\r18\r19.0\r4.507301\r5.185114\r19\r20.0\r4.482925\r5.194924\r20\r21.0\r4.482412\r5.188007\r21\r22.0\r4.4824","date":"2024-08-13","objectID":"/datalab8/:1:0","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Regularization As an alternative and more realistic example, instead of using only the first N features, we can use various different regularization strengths. For example, for really low regularization strengths (e.g. $\\alpha = 10^{-3}$), we get a model that is very identical to our linear regression model. from sklearn.linear_model import Ridge regularized_model = Ridge(alpha = 10**-5) regularized_model.fit(X_train2, Y_train2) regularized_model.coef_ d:\\miniconda3\\Lib\\site-packages\\sklearn\\linear_model\\_ridge.py:216: LinAlgWarning:\rIll-conditioned matrix (rcond=6.11696e-19): result may not be accurate.\rarray([ 4.44044277e-01, -3.00268517e-02, 2.03776925e+00, 3.54247206e-01,\r-1.19704083e+02, 1.63780073e+01, -3.10555372e-01, -1.31182539e+01,\r2.87010751e+00, 7.68411439e-01, 2.43201974e+01, 2.09160420e+00,\r-1.17012738e-03, -5.60565882e+00, 6.79680723e+00, 1.02949752e-03,\r-1.31223400e+00, 6.99621340e+00, -3.55165065e-02, -7.66339676e+00,\r-2.53950130e+00, 3.54247186e-01, 3.54247186e-01, 2.69792455e-01,\r1.91778126e+00, 3.11293526e+02, -1.53815298e+02, 8.03364965e-01,\r-1.17792246e+02, 3.25883430e+02, 1.08476149e-03, 2.42998443e+00,\r2.52462516e+02, 3.55080093e-01, 3.78504405e+01, -8.11283072e+01,\r-5.18073808e-02, -8.51699934e+00, 1.14213610e+01, -2.86248788e-04,\r-2.10606164e+01, 0.00000000e+00, -1.85988225e-01, -1.54605184e+02,\r5.73422430e-06, -1.79546600e-02, -1.53342390e+01, -4.25637232e+01])\rlinear_model.fit(X_train2, Y_train2) linear_model.coef_ array([ 3.65647144e-01, 7.96329260e-02, 1.50196461e+00, 3.72759210e-01,\r-1.82281287e+03, 6.19862020e+02, -2.86690023e-01, -1.29491141e+01,\r1.68693762e+00, 7.86841735e-01, 1.62893036e+01, 1.95113824e+00,\r-9.11835586e-04, -5.02513063e+00, 5.90016774e+00, 6.12889765e-04,\r-2.21247181e+00, 8.90275845e+00, -2.73913970e-02, -5.40098561e+00,\r-4.23462112e+00, 3.72978675e-01, 3.72978861e-01, 2.84060205e-01,\r5.41748851e+02, 4.88274463e+02, 1.16998609e+03, -1.36350124e+01,\r-2.23299632e+03, 5.18647024e+04, 1.04162650e-03, 2.14549424e+00,\r4.31003519e+02, 3.51263646e-01, 3.77337190e+01, -8.06896603e+01,\r-2.88295129e-02, -4.52779826e+00, 8.15771554e+00, -2.99443268e-04,\r-2.14061912e+01, 3.63797881e-12, -1.15683673e-01, -1.07968511e+02,\r1.52846060e-03, -2.03166630e-02, -1.38532349e+01, -4.22894414e+01])\rHowever, if we pick a large regularization strength, e.g. $\\alpha = 10^4$, we see that the resulting parameters are much smaller in magnitude. from sklearn.linear_model import Ridge regularized_model = Ridge(alpha = 10**4) regularized_model.fit(X_train2, Y_train2) regularized_model.coef_ array([-2.64236947e-02, -9.32767913e-03, -2.42925745e-02, 5.47079848e-03,\r-2.54276859e-03, 1.92843599e-02, -5.85037883e-02, -2.06397155e-02,\r2.62611572e-02, -4.16712719e-02, -1.95840395e-03, -1.91841765e-01,\r-1.08846586e-03, -4.28805626e-03, 1.70791430e-03, 6.51767238e-04,\r1.71133790e-03, 1.07486010e-03, -1.19407955e-03, -7.15970642e-03,\r-7.29287455e-04, 5.47079848e-03, 5.47079848e-03, 4.16652815e-03,\r-3.60910235e-03, -1.50954020e-03, -1.59681172e-03, 3.35928833e-01,\r3.11186224e-03, -2.79750628e-06, 4.48782500e-04, -5.71759051e-03,\r2.22943575e-06, -6.59740404e-02, -7.01191670e-03, -1.58200606e-03,\r1.32454447e-03, 8.15878522e-03, 1.17645581e-03, 3.59660322e-05,\r-2.54207413e-03, 0.00000000e+00, -2.57499245e-02, -3.15683513e-04,\r-8.10128212e-15, -6.45893053e-03, -4.20286900e-02, -2.29035441e-04])\r","date":"2024-08-13","objectID":"/datalab8/:2:0","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Standard Scaling ","date":"2024-08-13","objectID":"/datalab8/:2:1","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"归一化 Recall from lecture that in order to properly regularize a model, the features should be at the same scale. Otherwise the model has to spend more of its parameter budget to use “small” features (e.g. lengths in inches) compared to “large” features (e.g. lengths in kilometers). To do this we can use a Standard Scaler to create a new version of the DataFrame where every column has zero mean and a standard deviation of 1. from sklearn.preprocessing import StandardScaler ss = StandardScaler() ss.fit(boston_with_extra_features) boston_with_extra_features_scaled = pd.DataFrame(ss.transform(boston_with_extra_features), columns = boston_with_extra_features.columns) boston_with_extra_features_scaled CRIM\rZN\rINDUS\rCHAS\rNOX\rRM\rAGE\rDIS\rRAD\rTAX\r...\rtanhRAD\rTAX^2\rsqrtTAX\rtanhTAX\rPTRATIO^2\rsqrtPTRATIO\rtanhPTRATIO\rLSTAT^2\rsqrtLSTAT\rtanhLSTAT\r0\r-0.419782\r0.284830\r-1.287909\r-0.272599\r-0.144217\r0.413672\r-0.120013\r0.140214\r-0.982843\r-0.666608\r...\r-4.863216\r-0.682024\r-0.644166\r0.0\r-1.458429\r-1.453573\r0.135095\r-0.789529\r-1.202689\r0.103530\r1\r-0.417339\r-0.487722\r-0.593381\r-0.272599\r-0.740262\r0.194274\r0.367166\r0.557160\r-0.867883\r-0.987329\r...\r-0.521299\r-0.866530\r-1.053383\r0.0\r-0.373078\r-0.266921\r0.179012\r-0.540454\r-0.399953\r0.128396\r2\r-0.417342\r-0.487722\r-0.593381\r-0.272599\r-0.740262\r1.282714\r-0.265812\r0.557160\r-0.867883\r-0.987329\r...\r-0.521299\r-0.866530\r-1.053383\r0.0\r-0.373078\r-0.266921\r0.179012\r-0.825825\r-1.429933\r-0.037847\r3\r-0.416750\r-0.487722\r-1.306878\r-0.272599\r-0.835284\r1.016303\r-0.809889\r1.077737\r-0.752922\r-1.106115\r...\r0.144191\r-0.925467\r-1.216415\r0.0\r0.057783\r0.139631\r0.179251\r-0.858040\r-1.726876\r-1.338649\r4\r-0.412482\r-0.487722\r-1.306878\r-0.272599\r-0.835284\r1.228577\r-0.511180\r1.077737\r-0.752922\r-1.106115\r...\r0.144191\r-0.925467\r-1.216415\r0.0\r0.057783\r0.139631\r0.179251\r-0.774228\r-1.124522\r0.116050\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r501\r-0.413229\r-0.487722\r0.115738\r-0.272599\r0.158124\r0.439316\r0.018673\r-0.625796\r-0.982843\r-0.803212\r...\r-4.863216\r-0.765138\r-0.813468\r0.0\r1.255407\r1.136187\r0.179299\r-0.498180\r-0.312324\r0.128400\r502\r-0.415249\r-0.487722\r0.115738\r-0.272599\r0.158124\r-0.234548\r0.288933\r-0.716639\r-0.982843\r-0.803212\r...\r-4.863216\r-0.765138\r-0.813468\r0.0\r1.255407\r1.136187\r0.179299\r-0.545089\r-0.410031\r0.128395\r503\r-0.413447\r-0.487722\r0.115738\r-0.272599\r0.158124\r0.984960\r0.797449\r-0.773684\r-0.982843\r-0.803212\r...\r-4.863216\r-0.765138\r-0.813468\r0.0\r1.255407\r1.136187\r0.179299\r-0.759808\r-1.057406\r0.121757\r504\r-0.407764\r-0.487722\r0.115738\r-0.272599\r0.158124\r0.725672\r0.736996\r-0.668437\r-0.982843\r-0.803212\r...\r-4.863216\r-0.765138\r-0.813468\r0.0\r1.255407\r1.136187\r0.179299\r-0.716638\r-0.884300\r0.127164\r505\r-0.415000\r-0.487722\r0.115738\r-0.272599\r0.158124\r-0.362767\r0.434732\r-0.613246\r-0.982843\r-0.803212\r...\r-4.863216\r-0.765138\r-0.813468\r0.0\r1.255407\r1.136187\r0.179299\r-0.631389\r-0.619088\r0.128327\r506 rows × 48 columns Let’s now regenerate the training and holdout sets using this new rescaled dataset. np.random.seed(25) X = boston_with_extra_features_scaled X_train3, X_holdout3, Y_train3, Y_holdout3 = train_test_split(X, Y, test_size = 0.10) Fitting our regularized model with $\\alpha = 10^4$ on this scaled data, we now see that our coefficients are of about the same magnitude. This is because all of our features are of around the same magnitude, whereas in the unscaled data, some of the features like TAX^2 were much larger than others. from sklearn.linear_model import Ridge regularized_model = Ridge(alpha = 10**2) regularized_model.fit(X_train3, Y_train3) regularized_model.coef_ array([-0.61501301, -0.04142115, -0.13765546, 0.11847529, -0.48559141,\r1.08393358, -0.11193453, -0.6446524 , 0.25956768, -0.41922265,\r-0.48366805, -1.23850023, -0.22227015, -0.51281683, 0.40952134,\r0.2537374 , -0.07390569, 0.06674777, 0.11386252, -0.32684806,\r-0.39658025, 0.11847529, 0.11847529, 0.11847529, -0.67728184,\r-0.385382 , -0.36114118, 1.652695 , 0.78959095, -1.09450355,\r-0.02430294, -0.14153645, 0.11511136, -0.41673","date":"2024-08-13","objectID":"/datalab8/:2:2","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Finding an Optimum Alpha In the cell below, write code that generates a DataFrame with the training and holdout error for the range of alphas given. Make sure you’re using the 3rd training and holdout sets, which have been rescaled! Note: You should use all 48 features for every single model that you fit, i.e. you’re not going to be keeping only the first N features. error_vs_alpha = pd.DataFrame(columns = [\"alpha\", \"Training Error\", \"Holdout Error\"]) range_of_alphas = 10**np.linspace(-5, 4, 40) # for N in range_of_num_features: # X_train_first_N_features = X_train2.iloc[:, :N] # linear_model.fit(X_train_first_N_features, Y_train2) # train_error_overfit = rmse(Y_train2, linear_model.predict(X_train_first_N_features)) # X_holdout_first_N_features = X_holdout2.iloc[:, :N] # holdout_error_overfit = rmse(Y_holdout2, linear_model.predict(X_holdout_first_N_features)) # errors_vs_N.loc[len(errors_vs_N)] = [N, train_error_overfit, holdout_error_overfit] for alpha in range_of_alphas: linear_model = Ridge(alpha=alpha) linear_model.fit(X_train3, Y_train3) training_error = rmse(Y_train3, linear_model.predict(X_train3)) holdout_error = rmse(Y_holdout3, linear_model.predict(X_holdout3)) error_vs_alpha.loc[len(error_vs_alpha)] = [alpha, training_error, holdout_error] error_vs_alpha alpha\rTraining Error\rHoldout Error\r0\r0.000010\r3.344803\r5.389722\r1\r0.000017\r3.344885\r5.362696\r2\r0.000029\r3.345093\r5.318839\r3\r0.000049\r3.345588\r5.249551\r4\r0.000084\r3.346672\r5.144906\r5\r0.000143\r3.348827\r4.997596\r6\r0.000242\r3.352670\r4.810448\r7\r0.000412\r3.358709\r4.603154\r8\r0.000702\r3.366898\r4.408047\r9\r0.001194\r3.376490\r4.252523\r10\r0.002031\r3.386611\r4.144918\r11\r0.003455\r3.396946\r4.077740\r12\r0.005878\r3.407582\r4.038919\r13\r0.010000\r3.418347\r4.018141\r14\r0.017013\r3.428713\r4.007542\r15\r0.028943\r3.438401\r4.001021\r16\r0.049239\r3.447793\r3.994133\r17\r0.083768\r3.457708\r3.984607\r18\r0.142510\r3.468839\r3.972858\r19\r0.242446\r3.481455\r3.962098\r20\r0.412463\r3.495804\r3.958457\r21\r0.701704\r3.512882\r3.971376\r22\r1.193777\r3.534575\r4.011992\r23\r2.030918\r3.562638\r4.086328\r24\r3.455107\r3.597518\r4.187414\r25\r5.878016\r3.638674\r4.296469\r26\r10.000000\r3.686303\r4.392487\r27\r17.012543\r3.742258\r4.458995\r28\r28.942661\r3.809021\r4.486227\r29\r49.238826\r3.889335\r4.478730\r30\r83.767764\r3.989339\r4.470314\r31\r142.510267\r4.121409\r4.524381\r32\r242.446202\r4.300992\r4.693465\r33\r412.462638\r4.541284\r4.968124\r34\r701.703829\r4.854189\r5.289802\r35\r1193.776642\r5.251478\r5.615333\r36\r2030.917621\r5.733147\r5.946439\r37\r3455.107295\r6.275742\r6.304280\r38\r5878.016072\r6.841884\r6.698886\r39\r10000.000000\r7.394722\r7.119279\rBelow we plot your training and holdout set error for the range of alphas given. You should see a figure similar to this one from lecture, where training error goes down as model complexity increases, but the error on the held out set is large for extreme values of alpha, and minimized for some intermediate value. Note that on your plot, the x-axis is in the inverse of complexity! In other words, small alpha models (on the left) are complex, because there is no regularization. That’s why the training error is lowest on the left side of the plot, as this is where overfitting occurs. px.line(error_vs_alpha, x = \"alpha\", y = [\"Training Error\", \"Holdout Error\"], log_x=True) From the plot above, what is the best alpha to use? training error尽可能小，同时hold-out error尽可能小 ==\u003e 0.01~1左右 ","date":"2024-08-13","objectID":"/datalab8/:2:3","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"REMINDER: Test Set vs. Validation Set (a.k.a. Development Set) In the plots above, we trained our models on a training set, and plotted the resulting RMSE on the training set in blue. We also held out a set of data, and plotted the error on this holdout set in red, calling it the “holdout set error”. For the example above, since we used the holdout set to pick a hyperparameter, we’d call the holdout set a “validation set” or “development set”. These terms are exactly synonomous. It would not be accurate to call this line the “test set error”, because we did not use this dataset as a test set. While it is true that your code never supplied X_test3 or Y_test3 to the fit function of the ridge regression models, once you decide to use the holdout set to select between different models, different hyperparameters, or different sets of features, then we are not using that dataset as a “test set”. That is, since we’ve used this holdout set for picking alpha, the resulting errors are no longer unbiased predictors of our performance on unseen models – the true error on an unseen dataset is likely to be somewhat higher than the validation set. After all, we trained 40 models and picked the best one! In many real world contexts, model builders will split their data into three sets: training, validation, and test sets, where the test set is only ever used once. That is, there are two holdout sets: One used as a development set (for model selection), and one used a test set (for providing an unbiased estimate of error). ","date":"2024-08-13","objectID":"/datalab8/:3:0","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"An Alternate Strategy for Hyper Parameter Selection: K-Fold Cross Validation Earlier we used the holdout method for model selection (the holdout method is also sometimes called “simple cross validation”). Another approach is K-fold cross validation. This allows us to use more data for training instead of having to set aside some specifically for hyperparameter selection. However, doing so requires more computation resources as we’ll have to fit K models per hyperparameter choice. In our course Data 100, there’s really no reason not to use cross validation. However, in environments where models are very expensive to train (e.g. deep learning), you’ll typically prefer using a holdout set (simple cross validation) rather than K-fold cross validation. To emphasize what K-fold cross validation actually means, we’re going to manually carry out the procedure. Recall the approach looks something like the figure below for 4-fold cross validation: When we use K-fold cross validation, rather than using a held out set for model selection, we instead use the training set for model selection. To select between various features, various models, or various hyperparameters, we split the training set further into multiple temporary train and validation sets (each split is called a “fold”, hence k-fold cross validation). We will use the average validation error across all k folds to make our optimal feature, model, and hyperparameter choices. In this example, we’ll only use this procedure for hyperparameter selection, specifically to choose the best alpha. ","date":"2024-08-13","objectID":"/datalab8/:4:0","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Question 4 重点在于怎么切分数据集！ Scikit-learn has built-in support for cross validation. However, to better understand how cross validation works complete the following function which cross validates a given model. Use the KFold.split function to get 4 splits on the training data. Note that split returns the indices of the data for that split. For each split: Select out the training and validation rows and columns based on the split indices and features. Compute the RMSE on the validation split. Return the average error across all cross validation splits. from sklearn.model_selection import KFold def compute_CV_error(model, X_train, Y_train): ''' Split the training data into 4 subsets. For each subset, fit a model holding out that subset compute the MSE on that subset (the validation set) You should be fitting 4 models total. Return the average MSE of these 4 folds. Args: model: an sklearn model with fit and predict functions X_train (data_frame): Training data Y_train (data_frame): Label Return: the average validation MSE for the 4 splits. ''' kf = KFold(n_splits=4) validation_errors = [] for train_idx, valid_idx in kf.split(X_train): # split the data split_X_train, split_X_valid = X_train.iloc[train_idx], X_train.iloc[valid_idx] split_Y_train, split_Y_valid = Y_train.iloc[train_idx], Y_train.iloc[valid_idx] # Fit the model on the training split model.fit(split_X_train, split_Y_train) # Compute the RMSE on the validation split error = rmse(model.predict(split_X_valid), split_Y_valid) validation_errors.append(error) return np.mean(validation_errors) grader.check(\"q4\") ","date":"2024-08-13","objectID":"/datalab8/:4:1","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Question 5 Use compute_CV_error to add a new column to error_vs_alpha which gives the 4-fold cross validation error for the given choice of alpha. cv_errors = [] range_of_alphas = 10**np.linspace(-5, 4, 40) for alpha in range_of_alphas: cv_error = compute_CV_error(Ridge(alpha=alpha), X_train3, Y_train3) cv_errors.append(cv_error) error_vs_alpha[\"CV Error\"] = cv_errors error_vs_alpha alpha\rTraining Error\rHoldout Error\rCV Error\r0\r0.000010\r3.344803\r5.389722\r10.763338\r1\r0.000017\r3.344885\r5.362696\r10.578003\r2\r0.000029\r3.345093\r5.318839\r10.254709\r3\r0.000049\r3.345588\r5.249551\r9.756308\r4\r0.000084\r3.346672\r5.144906\r9.054988\r5\r0.000143\r3.348827\r4.997596\r8.147759\r6\r0.000242\r3.352670\r4.810448\r7.069916\r7\r0.000412\r3.358709\r4.603154\r5.905299\r8\r0.000702\r3.366898\r4.408047\r4.810950\r9\r0.001194\r3.376490\r4.252523\r4.104387\r10\r0.002031\r3.386611\r4.144918\r4.080071\r11\r0.003455\r3.396946\r4.077740\r4.240810\r12\r0.005878\r3.407582\r4.038919\r4.224883\r13\r0.010000\r3.418347\r4.018141\r4.086858\r14\r0.017013\r3.428713\r4.007542\r3.956585\r15\r0.028943\r3.438401\r4.001021\r3.889772\r16\r0.049239\r3.447793\r3.994133\r3.867618\r17\r0.083768\r3.457708\r3.984607\r3.858856\r18\r0.142510\r3.468839\r3.972858\r3.850327\r19\r0.242446\r3.481455\r3.962098\r3.842001\r20\r0.412463\r3.495804\r3.958457\r3.837080\r21\r0.701704\r3.512882\r3.971376\r3.838459\r22\r1.193777\r3.534575\r4.011992\r3.848340\r23\r2.030918\r3.562638\r4.086328\r3.867120\r24\r3.455107\r3.597518\r4.187414\r3.893089\r25\r5.878016\r3.638674\r4.296469\r3.924624\r26\r10.000000\r3.686303\r4.392487\r3.962520\r27\r17.012543\r3.742258\r4.458995\r4.009721\r28\r28.942661\r3.809021\r4.486227\r4.070020\r29\r49.238826\r3.889335\r4.478730\r4.149246\r30\r83.767764\r3.989339\r4.470314\r4.257353\r31\r142.510267\r4.121409\r4.524381\r4.406670\r32\r242.446202\r4.300992\r4.693465\r4.607861\r33\r412.462638\r4.541284\r4.968124\r4.870040\r34\r701.703829\r4.854189\r5.289802\r5.203950\r35\r1193.776642\r5.251478\r5.615333\r5.617020\r36\r2030.917621\r5.733147\r5.946439\r6.099994\r37\r3455.107295\r6.275742\r6.304280\r6.625052\r38\r5878.016072\r6.841884\r6.698886\r7.158474\r39\r10000.000000\r7.394722\r7.119279\r7.665518\rThe code below shows the holdout error that we computed in the previous problem as well as the 4-fold cross validation error. Note that the cross validation error shows a similar dependency on alpha relative to the holdout error. This is because they are both doing the same thing, namely trying to estimate the expected error on unseen data drawn from distribution from which the training set was drawn. In other words, this figure compares the holdout method with 4-fold cross validation. Note: I don’t know why the CV error is so much higher for very small (i.e. very complex) models. Let me know if you figure out why. I suspec ti’ts just random noise. px.line(error_vs_alpha, x = \"alpha\", y = [\"Holdout Error\", \"CV Error\"], log_x=True) ","date":"2024-08-13","objectID":"/datalab8/:4:2","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Extra: Using GridSearchCV 自主找到最佳超参数 Above, we manually performed a search of the space of possible hyperparameters. In this section we’ll discuss how to use sklearn to automatically perform such a search. The code below automatically tries out all alpha values in the given range. from sklearn.model_selection import GridSearchCV params = {'alpha': 10**np.linspace(-5, 4, 40)} grid_search = GridSearchCV(Ridge(), params, cv = 4, scoring = \"neg_root_mean_squared_error\") grid_search.fit(X_train3, Y_train3) We can get the average RMSE for the four folds for each of the values of alpha with the code below. In other words, this array is the same as the one you computed earlier when you created the “CV Error” column. grid_search.cv_results_['mean_test_score'] array([-10.7633381 , -10.57800314, -10.25470921, -9.75630755,\r-9.05498816, -8.14775947, -7.06991566, -5.90529929,\r-4.8109505 , -4.10438693, -4.08007128, -4.24080956,\r-4.22488284, -4.08685828, -3.95658497, -3.88977241,\r-3.86761841, -3.85885628, -3.85032722, -3.8420014 ,\r-3.83707965, -3.83845914, -3.84833967, -3.86711956,\r-3.89308871, -3.92462404, -3.96251959, -4.00972106,\r-4.07002011, -4.14924607, -4.25735297, -4.4066697 ,\r-4.60786131, -4.87004045, -5.20394987, -5.61702004,\r-6.09999442, -6.62505185, -7.15847442, -7.66551837])\rWe can specifically see the lowest RMSE with best_score_: grid_search.best_score_ np.float64(-3.8370796510062055)\rAnd we can get the best model with best_estimator_, which you’ll note is a Ridge regression model with alpha = 0.412. grid_search.best_estimator_ We can even add the errors from GridSearchCV to our error_vs_alpha DataFrame and compare the results of our manual 4-fold cross validation with sklearn’s implementation: error_vs_alpha[\"sklearn CV Score\"] = grid_search.cv_results_['mean_test_score'] px.line(error_vs_alpha, x = \"alpha\", y = [\"CV Error\", \"sklearn CV Score\"], log_x=True) You’ll notice they are exactly the same except that the sklearn CV score is the negative of the error. This is because GridSearchCV is conceptualized as a “maximizer”, where the goal is to get the highest possible score, whereas our code was a “minimizer”, where the goal was to get the lowest possible error. In other words, the error is just the negative of the score. 镜像由来 ","date":"2024-08-13","objectID":"/datalab8/:4:3","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Extra: Examining the Residuals of our Optimal Alpha Model The code below plots the residuals of our best model (Ridge with alpha = 0.412) on the test set. Note that they now seem to be better distributed on either size of the line and are generally closer the line, though with a few more extreme outliers. plt.figure(figsize=(10, 6)) predicted_values_on_holdout3 = grid_search.best_estimator_.predict(X_holdout3) plt.scatter(predicted_values_on_holdout3, Y_holdout3 - predicted_values_on_holdout3, alpha = 0.5) plt.ylabel(\"Residual $(y - \\hat{y})$\") plt.xlabel(\"Predicted Prices $(\\hat{y})$\") plt.title(\"Residuals vs Predicted Prices\") plt.title(\"Residual of prediction for i'th house\") plt.axhline(y = 0, color='r'); \u003c\u003e:4: SyntaxWarning:\rinvalid escape sequence '\\h'\r\u003c\u003e:5: SyntaxWarning:\rinvalid escape sequence '\\h'\r\u003c\u003e:4: SyntaxWarning:\rinvalid escape sequence '\\h'\r\u003c\u003e:5: SyntaxWarning:\rinvalid escape sequence '\\h'\rC:\\Users\\86135\\AppData\\Local\\Temp\\ipykernel_6688\\3088448444.py:4: SyntaxWarning:\rinvalid escape sequence '\\h'\rC:\\Users\\86135\\AppData\\Local\\Temp\\ipykernel_6688\\3088448444.py:5: SyntaxWarning:\rinvalid escape sequence '\\h'\rLastly we can compute the RMSE on the test set. This gives the expected squared error on a new unseen data point that may come to us in the future from the same distribution as our training set. test_rmse = rmse(grid_search.best_estimator_.predict(X_holdout3), Y_holdout3) test_rmse np.float64(3.9584573514348387)\r","date":"2024-08-13","objectID":"/datalab8/:4:4","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Extra: LASSO Regression The code below finds an optimal Lasso model. Note that Lasso regression generalize behaves more poorly numerically, so you’ll probably get a bunch of warnings. from sklearn.linear_model import Lasso params = {'alpha': 10**np.linspace(-5, 4, 40)} grid_search_lasso = GridSearchCV(Lasso(), params, cv = 4, scoring = \"neg_root_mean_squared_error\") grid_search_lasso.fit(X_train3, Y_train3) The best lasso model is below: grid_search_lasso.best_estimator_ It’s error on the same test set as our best Ridge model is shown below: test_rmse_lasso = rmse(grid_search_lasso.best_estimator_.predict(X_holdout3), Y_holdout3) test_rmse_lasso np.float64(4.054830916690993)\rNote that if we tried to use this test error to decide between Ridge and LASSO, then our holdout set is now being used as a validation set, not a test set!! In other words, you get to either use the holdout set to decide between models, or to provide an unbiased estimate of error, but not both! If we look at the best estimator’s parameters, we’ll see that many of the parameters are zero, due to the inherent feature selecting nature of a LASSO model. grid_search_lasso.best_estimator_.coef_ array([-0.00000000e+00, -6.85384379e-01, 0.00000000e+00, 0.00000000e+00,\r-0.00000000e+00, -0.00000000e+00, -7.38599400e-02, -5.29374425e-02,\r5.54295757e-01, -0.00000000e+00, -0.00000000e+00, 0.00000000e+00,\r4.37063521e-01, -3.80592597e+00, 1.61080715e+00, 6.37366884e-01,\r-0.00000000e+00, 2.22834586e-01, 6.01812381e-03, -9.40700489e-02,\r-4.02630887e-01, 3.07990173e-01, 3.72360525e-14, 0.00000000e+00,\r-2.51811102e+00, 0.00000000e+00, 0.00000000e+00, 9.85248689e+00,\r-7.21033868e+00, -0.00000000e+00, -0.00000000e+00, -0.00000000e+00,\r1.36076846e-01, -0.00000000e+00, -2.00907909e+00, -1.68923341e+00,\r1.77833261e+00, 2.55936962e-01, 5.04076324e-01, 0.00000000e+00,\r-1.82804827e+00, 0.00000000e+00, -0.00000000e+00, -1.53173793e+00,\r-7.84893470e-03, 1.09000336e+00, -5.21734363e+00, -3.87962203e-01])\rWe can also stick these parameters in a Series showing us both the weights and the names: 可解释性强一点点 lasso_weights = pd.Series(grid_search_lasso.best_estimator_.coef_, index = boston_with_extra_features_scaled.columns) lasso_weights CRIM -0.000000e+00\rZN -6.853844e-01\rINDUS 0.000000e+00\rCHAS 0.000000e+00\rNOX -0.000000e+00\rRM -0.000000e+00\rAGE -7.385994e-02\rDIS -5.293744e-02\rRAD 5.542958e-01\rTAX -0.000000e+00\rPTRATIO -0.000000e+00\rLSTAT 0.000000e+00\rCRIM^2 4.370635e-01\rsqrtCRIM -3.805926e+00\rtanhCRIM 1.610807e+00\rZN^2 6.373669e-01\rsqrtZN -0.000000e+00\rtanhZN 2.228346e-01\rINDUS^2 6.018124e-03\rsqrtINDUS -9.407005e-02\rtanhINDUS -4.026309e-01\rCHAS^2 3.079902e-01\rsqrtCHAS 3.723605e-14\rtanhCHAS 0.000000e+00\rNOX^2 -2.518111e+00\rsqrtNOX 0.000000e+00\rtanhNOX 0.000000e+00\rRM^2 9.852487e+00\rsqrtRM -7.210339e+00\rtanhRM -0.000000e+00\rAGE^2 -0.000000e+00\rsqrtAGE -0.000000e+00\rtanhAGE 1.360768e-01\rDIS^2 -0.000000e+00\rsqrtDIS -2.009079e+00\rtanhDIS -1.689233e+00\rRAD^2 1.778333e+00\rsqrtRAD 2.559370e-01\rtanhRAD 5.040763e-01\rTAX^2 0.000000e+00\rsqrtTAX -1.828048e+00\rtanhTAX 0.000000e+00\rPTRATIO^2 -0.000000e+00\rsqrtPTRATIO -1.531738e+00\rtanhPTRATIO -7.848935e-03\rLSTAT^2 1.090003e+00\rsqrtLSTAT -5.217344e+00\rtanhLSTAT -3.879622e-01\rdtype: float64\rOr sorting by the relative importance of each feature, we see that about a third of the parmaeters didn’t end up getting used at all by the LASSO model. lasso_weights.sort_values(key = abs, ascending = False) RM^2 9.852487e+00\rsqrtRM -7.210339e+00\rsqrtLSTAT -5.217344e+00\rsqrtCRIM -3.805926e+00\rNOX^2 -2.518111e+00\rsqrtDIS -2.009079e+00\rsqrtTAX -1.828048e+00\rRAD^2 1.778333e+00\rtanhDIS -1.689233e+00\rtanhCRIM 1.610807e+00\rsqrtPTRATIO -1.531738e+00\rLSTAT^2 1.090003e+00\rZN -6.853844e-01\rZN^2 6.373669e-01\rRAD 5.542958e-01\rtanhRAD 5.040763e-01\rCRIM^2 4.370635e-01\rtanhINDUS -4.026309e-01\rtanhLSTAT -3.879622e-01\rCHAS^2 3.079902e-01\rsqrtRAD 2.559370e-01\rtanhZN 2.228346e-01\rtanhAGE 1.360768e-01\rsqrtINDUS -9.407005e-02\rAGE -7.385994e-02\rDIS -5.293744e-02\rtanhPTRATIO -7.848935e-03\rIN","date":"2024-08-13","objectID":"/datalab8/:4:5","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":"Submission Congratulations! You are finished with this assignment. ","date":"2024-08-13","objectID":"/datalab8/:5:0","tags":["Scikit-Learn"],"title":"DATA100-lab8: Model Selection, Regularization, and Cross-Validation","uri":"/datalab8/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab05.ipynb\") Lab 5: Modeling, Loss Functions, and Summary Statistics ","date":"2024-08-13","objectID":"/datalab5/:0:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Predicting Restaurant Tips In this lab, you will try to predict restaurant tips from a set of data in several ways: A. Without given any additional information, use a constant model with L2 loss to predict the tip $\\hat{y}$ as a summary statistic, $\\theta$. B. Given one piece of information—the total bill $x$ use a linear model with L2 loss to predict the tip $\\hat{y}$ as a linear function of $x$. C. See if a constant model with L1 loss changes our predictions. First, let’s load in the data. # just run this cell import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt plt.style.use('fivethirtyeight') sns.set() sns.set_context(\"talk\") tips = sns.load_dataset(\"tips\") tips.head(5) total_bill\rtip\rsex\rsmoker\rday\rtime\rsize\r0\r16.99\r1.01\rFemale\rNo\rSun\rDinner\r2\r1\r10.34\r1.66\rMale\rNo\rSun\rDinner\r3\r2\r21.01\r3.50\rMale\rNo\rSun\rDinner\r3\r3\r23.68\r3.31\rMale\rNo\rSun\rDinner\r2\r4\r24.59\r3.61\rFemale\rNo\rSun\rDinner\r4\rQuick EDA: Note that this dataset is likely from the United States. The below plot graphs the distribution of tips in this dataset, both in absolute amounts ($) and as a fraction of the total bill (post-tax, but pre-tip). # just run this cell fig, ax = plt.subplots(ncols=2, figsize=(10, 4)) sns.histplot(tips['tip'], bins=20, stat=\"proportion\", ax=ax[0]) sns.histplot(tips['tip']/tips['total_bill'], bins=20, stat=\"proportion\", ax=ax[1]) ax[0].set_xlabel(\"Amount ($)\") ax[1].set_xlabel(\"Fraction of total bill\") ax[0].set_ylim((0, 0.35)) ax[1].set_ylim((0, 0.35)) ax[1].set_ylabel(\"\") # for cleaner visualization fig.suptitle(\"Restaurant Tips\") plt.show() In this lab we’ll estimate the tip in absolute amounts ($). The above plot is just to confirm your expectations about the tips dataset. ","date":"2024-08-13","objectID":"/datalab5/:1:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Part A: Tips as a Summary Statistic Let’s first predict any restaurant tip using one single number: in other words, let’s try to find the best statistic $\\hat{\\theta}$ to represent (i.e., summarize) the tips from our dataset. Each actual tip in our dataset is $y$, which is what we call the observed value. We want to predict each observed value as $\\hat{y}$. We’ll save the observed tip values in a NumPy array y_tips: # just run this cell y_tips = np.array(tips['tip']) # array of observed tips y_tips.shape (244,)\rRecall the three-step process for modeling as covered in lecture: Define a model. Define a loss function and the associated risk on our training dataset (i.e., average loss). Find the best value of $\\theta$, known as $\\hat{\\theta}$, that minimizes risk. We’ll go through each step of this process next. ","date":"2024-08-13","objectID":"/datalab5/:2:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"A.1: Define the model We will define our model as the constant model: $$\\Large \\hat{y} = \\theta $$ In other words, regardless of any other details (i.e., features) about their meal, we will always predict our tip $\\hat{y}$ as one single value: $\\theta$. $\\theta$ is what we call a parameter. Our modeling goal is to find the value of our parameter(s) that best fit our data. We have choice over which $\\theta$ we pick (using the data at hand), but ultimately we can only pick one to report, so we want to find the optimal parameter(s) $\\hat{\\theta}$. We call the constant model a summary statistic, as we are determining one number that best “summarizes” a set of values. No code to write here! ","date":"2024-08-13","objectID":"/datalab5/:3:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"A.2: Define the loss function and risk Next, in order to pick our $\\theta$, we need to define a loss function, which is a measure of how well a model is able to predict the expected outcome. In other words, it measures the deviation of a predicted value $\\hat{y}$ from the observed value $y$. We will use squared loss (also known as the $L_2$ loss, pronounced “ell-two”). For an observed tip value $y$ (i.e., the real tip), our prediction of the tip $\\hat{y}$ would give an $L_2$ loss of: $$\\Large L_2(y, \\hat{y}) = (y - \\hat{y})^2$$ ","date":"2024-08-13","objectID":"/datalab5/:4:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 1 In our constant model $\\hat{y} = \\theta$, we always predict the tip as $\\theta$. Therefore our $L_2$ loss for some actual, observed value $y$ can be rewritten as: $$\\Large L_2(y, \\theta) = (y - \\theta)^2$$ Use the function description below to implement the squared loss function for this single datapoint, assuming the constant model. Your answer should not use any loops. def squared_loss(y_obs, theta): \"\"\" Calculate the squared loss of the observed data and a summary statistic. Parameters ------------ y_obs: an observed value theta : some constant representing a summary statistic Returns ------------ The squared loss between the observation and the summary statistic. \"\"\" return (y_obs - theta)**2 grader.check(\"q1\") We just defined loss for a single datapoint. Let’s extend the above loss function to our entire dataset by taking the average loss across the dataset. Let the dataset $\\mathcal{D}$ be the set of observations: $\\mathcal{D} = {y_1, \\ldots, y_n}$, where $y_i$ is the $i^{th}$ tip (this is the y_tips array defined at the beginning of Part A). We can define the average loss (aka risk) over the dataset as: $$\\Large R\\left(\\theta\\right) = \\frac{1}{n} \\sum_{i=1}^n L(y_i, \\hat{y_i}) $$ If we use $L_2$ loss per datapoint ($L = L_2$), then the risk is also known as mean squared error (MSE). For the constant model $\\hat{y}=\\theta$: $$\\Large R\\left(\\theta\\right) = \\frac{1}{n} \\sum_{i=1}^n (y_i - \\theta)^2 $$ ","date":"2024-08-13","objectID":"/datalab5/:5:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 2 Define the mse_tips_constant function which computes $R(\\theta)$ as the mean squared error on the tips data for a constant model with parameter $\\theta$. Notes/Hints: This function takes in one parameter, theta; data is defined for you as a NumPy array that contains the observed tips values in the data. Use the squared_loss function you defined in the previous question. def mse_tips_constant(theta): data = y_tips return sum(squared_loss(data, theta)) / len(data) mse_tips_constant(5.3) # arbitrarily pick theta = 5.3 np.float64(7.204529508196728)\rgrader.check(\"q2\") ","date":"2024-08-13","objectID":"/datalab5/:6:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"A.3: Find the $\\theta$ that minimizes risk ","date":"2024-08-13","objectID":"/datalab5/:7:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 3 Now we can go about choosing our “best” value of $\\theta$, which we call $\\hat{\\theta}$, that minimizes our defined risk (which we defined as mean squared error). There are several approaches to computing $\\hat{\\theta}$ that we’ll explore in this problem. ","date":"2024-08-13","objectID":"/datalab5/:8:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 3a: Visual Solution In the cell below we plot the mean squared error for different thetas: # just run this cell theta_values = np.linspace(0, 6, 100) mse = [mse_tips_constant(theta) for theta in theta_values] plt.plot(theta_values, mse) plt.xlabel(r'$\\theta$') plt.ylabel('average L2 loss') plt.title(r'MSE for different values of $\\theta$'); Find the value of theta that minimizes the mean squared error via observation of the plot above. Round your answer to the nearest integer. min_observed_mse = 3 min_observed_mse 3\rgrader.check(\"q3a\") q3a passed! 💯 ","date":"2024-08-13","objectID":"/datalab5/:8:1","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Numerically computing $\\hat{\\theta}$ scipy.optimize.minimize is a powerful method that can determine the optimal value of a variety of different functions. In practice, it is used to minimize functions that have no (or difficult to obtain) analytical solutions (it is a numerical method). It is overkill for our simple example, but nonetheless, we will show you how to use it, as it will become useful in the near future. The cell below plots some arbitrary 4th degree polynomial function. # just run this cell x_values = np.linspace(-4, 2.5, 100) def fx(x): return 0.1 * x**4 + 0.2*x**3 + 0.2 * x **2 + 1 * x + 10 plt.plot(x_values, fx(x_values)); plt.title(\"Arbitrary 4th degree polynomial\"); By looking at the plot, we see that the x that minimizes the function is slightly larger than -2. What if we want the exact value? We will demonstrate how to grab the minimum value and the optimal x in the following cell. The function minimize from scipy.optimize will attempt to minimize any function you throw at it. Try running the cell below, and you will see that minimize seems to get the answer correct. Note: For today, we’ll let minimize work as if by magic. We’ll discuss how minimize works later in the course. # just run this cell from scipy.optimize import minimize minimize(fx, x0 = 1.1) message: Optimization terminated successfully.\rsuccess: True\rstatus: 0\rfun: 8.728505719866614\rx: [-1.747e+00]\rnit: 6\rjac: [ 1.192e-07]\rhess_inv: [[ 5.088e-01]]\rnfev: 16\rnjev: 8\rNotes: [1] fun: the minimum value of the function. [2] x: the x which minimizes the function. We can index into the object returned by minimize to get these values. We have to add the additional [0] at the end because the minimizing x is returned as an array, but this is not necessarily the case for other attributes (i.e. fun), shown in the cell below. Note [2] means that minimize can also minimize multivariable functions, which we’ll see in the second half of this lab. # just run this cell min_result = minimize(fx, x0 = 1.1) # 返回一个字典，包括最优值fun和最优解x min_of_fx = min_result['fun'] x_which_minimizes_fx = min_result['x'][0] min_of_fx, x_which_minimizes_fx (8.728505719866614, np.float64(-1.746827786380178))\rInitial guess: The parameter x0 that we passed to the minimize function is where the minimize function starts looking as it tries to find the minimum. For example, above, minimize started its search at x = 1.1 because that’s where we told it to start. For the function above, it doesn’t really matter what x we start at because the function is nice and has only a single local minimum. More technically, the function is nice because it is convex, a property of functions that we will discuss later in the course. Local minima: minimize isn’t perfect. For example, if we give it a function with many valleys (also known as local minima) it can get stuck. For example, consider the function below: # just run this cell w_values = np.linspace(-2, 10, 100) def fw(w): return 0.1 * w**4 - 1.5*w**3 + 6 * w **2 - 1 * w + 10 plt.plot(w_values, fw(w_values)); plt.title(\"Arbitrary function with local minima\"); If we start the minimization at w = 6.5, we’ll get stuck in the local minimum at w = 7.03. Note that no matter what your actual variable is called in your function (w in this case), the minimize routine still expects a starting point parameter called x0. # just run this cell minimize(fw, x0 = 6.5) # initial w is 6.5 message: Optimization terminated successfully.\rsuccess: True\rstatus: 0\rfun: 22.594302881719713\rx: [ 7.038e+00]\rnit: 4\rjac: [-3.815e-06]\rhess_inv: [[ 1.231e-01]]\rnfev: 12\rnjev: 6\r","date":"2024-08-13","objectID":"/datalab5/:8:2","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 3b: Numerical Solution Using the minimize function, find the value of theta that minimizes the mean squared error for our tips dataset. In other words, you want to find the exact minimum of the plot that you saw in the previous part. Notes: You should use the function you defined earlier: mse_tips_constant. For autograding purposes, assign min_scipy to the value of theta that minimizes the MSE according to the minimize function, called with initial x0=0.0. # call minimize with initial x0 = 0.0 min_scipy = minimize(mse_tips_constant, x0=0.0)['x'][0] min_scipy np.float64(2.9982777037277204)\rgrader.check(\"q3b\") ","date":"2024-08-13","objectID":"/datalab5/:8:3","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 3c: Analytical Solution In lecture, we used calculus to show that the value of theta that minimizes the mean squared error for the constant model is the average (mean) of the data. Assign min_computed to the mean of the observed y_tips data, and compare this to the values you observed in questions 3a and 3b. min_computed = y_tips.mean() min_computed np.float64(2.99827868852459)\rgrader.check(\"q3c\") Reflecting on the lab so far, we used a 3-step approach to find the “best” summary statistic $\\theta$: Define the constant model $\\hat{y}=\\theta$. Define “best”: Define loss per datapoint (L2 loss) and consequently define risk $R(\\theta)$ over a given data array as the mean squared error, or MSE. Find the $\\theta = \\hat{\\theta}$ that minimizes the MSE $R(\\theta)$ in several ways: Visually: Create a plot of $R(\\theta)$ vs. $\\theta$ and eyeball the minimizing $\\hat{\\theta}$. Numerically: Create a function that returns $R(\\theta)$, the MSE for the given data array for a given $\\theta$, and use the scipy minimize function to find the minimizing $\\hat{\\theta}$. Analytically: Simply compute $\\hat{\\theta}$ the mean of the given data array, since this minimizes the defined $R(\\theta)$. (a fourth analytical option) Use calculus to find $\\hat{\\theta}$ that minimizes MSE $R(\\theta)$. At this point, you’ve hopefully convinced yourself that the mean of the data is the summary statistic that minimizes mean squared error. Our prediction for every meal’s tip: # just run this cell def predict_tip_constant(): return min_computed # do not edit below this line bill = 20 print(f\"\"\"No matter what meal you have, Part A's modeling process predicts that you will pay a tip of ${predict_tip_constant():.2f}.\"\"\") No matter what meal you have, Part A's modeling process\rpredicts that you will pay a tip of $3.00.\r","date":"2024-08-13","objectID":"/datalab5/:8:4","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Part B: Tips as a Linear Function of Total Bill In this section, you will follow the exact same modeling process but instead use total bill to predict tip. We’ll save the observed total bill values (post-tax but pre-tip) and the observed tip values in two NumPy arrays, x_total_bills and y_tips: # just run this cell x_total_bills = np.array(tips['total_bill']) # array of total bill amounts y_tips = np.array(tips['tip']) # array of observed tips print(\"total bills\", x_total_bills.shape) print(\"tips\", y_tips.shape) total bills (244,)\rtips (244,)\r","date":"2024-08-13","objectID":"/datalab5/:9:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"B.1 Define the model We will define our model as the linear model that takes a single input feature, total_bill ($x$): $$\\Large \\hat{y} = a + b x $$ Our “parameter” $\\theta$ is actually two parameters: $a$ and $b$. You may see this written as $\\theta = (a, b)$. Our modeling task is then to pick the best values $a = \\hat{a}$ and $b = \\hat{b}$ from our data. Then, given the total bill $x$, we can predict the tip as $\\hat{y} = \\hat{a} + \\hat{b} x$. No code to write here! ","date":"2024-08-13","objectID":"/datalab5/:10:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"B.2: Define the loss function and risk Next, we’ll define our loss function $L(y, \\hat{y})$ and consequently our risk function $R(\\theta) = R(a, b)$. Similar to our approach to Part A, we’ll use L2 Loss and Mean Squared Error. Let the dataset $\\mathcal{D}$ be the set of observations: $\\mathcal{D} = {(x_1, y_1), \\ldots, (x_n, y_n)}$, where $(x_i, y_i)$ are the $i^{th}$ total bill and tip, respectively, in our dataset. Our L2 Loss and Mean Squared Error are therefore: \\begin{align} \\large L_2(y, \\hat{y}) = \\large (y - \\hat{y})^2 \u0026= \\large (y - (a + bx))^2 \\ \\large R(a, b) = \\large \\frac{1}{n} \\sum_{i=1}^n L(y_i, \\hat{y_i}) \u0026= \\large \\frac{1}{n} \\sum_{i = 1}^n(y_i - (a + b x_i))^2 \\end{align} Notice that because our model is now the linear model $\\hat{y} = a + bx$, our final expressions for Loss and MSE are different from Part A. ","date":"2024-08-13","objectID":"/datalab5/:11:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 4 Define the mse_tips_linear function which computes $R(a, b)$ as the mean squared error on the tips data for a linear model with parameters $a$ and $b$. Notes: This function takes in two parameters a and b. You should use the NumPy arrays x_total_bills and y_tips defined at the beginning of Part B. We’ve included some skeleton code, but feel free to write your own as well. def mse_tips_linear(a, b): \"\"\" Returns average L2 loss between predicted y_hat values (using x_total_bills and parameters a, b) and actual y values (y_tips) \"\"\" y_hats = a + b * x_total_bills return ((y_hats - y_tips) ** 2).mean() ... mse_tips_linear(0.9, 0.1) # arbitrarily pick a = 0.9, b = 0.1 np.float64(1.052336405737705)\rgrader.check(\"q4\") ","date":"2024-08-13","objectID":"/datalab5/:12:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"B.3: Find the $\\theta$ that minimizes risk Similar to before, we’d like to try out different approaches to finding the optimal parameters $\\hat{a}$ and $\\hat{b}$ that minimize MSE. ","date":"2024-08-13","objectID":"/datalab5/:13:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 5: Analytical Solution In lecture, we derived the following expression for the line of best fit: $$\\Large \\hat{y_i} = \\bar{y} + r \\frac{SD(y)}{SD(x)} (x_i - \\bar{x})$$ where $\\bar{x}$, $\\bar{y}$, $SD(x)$, $SD(y)$ correspond to the means and standard deviations of $x$ and $y$, respectively, and $r$ is the correlation coefficient. ","date":"2024-08-13","objectID":"/datalab5/:14:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 5a Assign x_bar, y_bar, std_x, std_y, and r, for our dataset. Note: Make sure to use np.std, and not \u003cSeries name\u003e.std(). Hint: Remember, in our case, y is y_tips, and x is x_total_bills. Hint: You may find np.corrcoef (documentation) handy in computing r. Note that the output of np.corrcoef is a matrix, not a number, so you’ll need to collect the correlation coefficient by indexing into the returned matrix. x_bar = x_total_bills.mean() y_bar = y_tips.mean() std_x = np.std(x_total_bills) std_y = np.std(y_tips) r = np.corrcoef(x_total_bills, y_tips)[0, 1] grader.check(\"q5a\") ","date":"2024-08-13","objectID":"/datalab5/:14:1","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 5b Now, set b_hat and a_hat correctly, in terms of the variables you defined above. Hints: Try and match the slope and intercept in $\\hat{y_i} = \\hat{a} + \\hat{b}x_i$ to the slope and intercept in $\\hat{y_i} = \\bar{y} + r \\frac{SD(y)}{SD(x)} (x_i - \\bar{x})$. You may want to define a_hat in terms of b_hat. b_hat = r*std_y/std_x a_hat = y_bar - b_hat*x_bar grader.check(\"q5b\") ","date":"2024-08-13","objectID":"/datalab5/:14:2","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 5c Now, use a_hat and b_hat to implement the predict_tip_linear function, which predicts the tip for a total bill amount of bill. def predict_tip_linear(bill): return a_hat + b_hat * bill # do not edit below this line bill = 20 print(f\"\"\"If you have a ${bill} bill, Part B's modeling process predicts that you will pay a tip of ${predict_tip_linear(bill):.2f}.\"\"\") If you have a $20 bill, Part B's modeling process\rpredicts that you will pay a tip of $3.02.\rgrader.check(\"q5c\") ","date":"2024-08-13","objectID":"/datalab5/:14:3","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Numerically computing $\\hat{\\theta}$ The minimize function we introduced earlier can also minimize functions of multiple variables (useful for numerically computing $\\hat{a}$ and $\\hat{b}$. There’s one quirk, however, which is that the function has to accept its parameters as a single list. For example, consider the multivariate $f(u, v) = u^2 - 2 u v - 3 v + 2 v^2$. It turns out this function’s minimum is at $(1.5, 1.5)$. To minimize this function, we create f. # just run this cell def f(theta): u = theta[0] v = theta[1] return u**2 - 2 * u * v - 3 * v + 2 * v**2 minimize(f, x0 = [0.0, 0.0]) message: Optimization terminated successfully.\rsuccess: True\rstatus: 0\rfun: -2.2499999999999982\rx: [ 1.500e+00 1.500e+00]\rnit: 3\rjac: [-5.960e-08 0.000e+00]\rhess_inv: [[ 1.000e+00 5.000e-01]\r[ 5.000e-01 5.000e-01]]\rnfev: 12\rnjev: 4\r","date":"2024-08-13","objectID":"/datalab5/:15:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 6: Numerical Solution ","date":"2024-08-13","objectID":"/datalab5/:16:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 6a Implement the mse_tips_linear_list function, which is exactly like mse_tips_linear defined in Question 4 except that it takes in a single list of 2 variables rather than two separate variables. For example mse_tips_linear_list([2, 3]) should return the same value as mse_tips_linear(2, 3). def mse_tips_linear_list(theta): \"\"\" Returns average L2 loss between predicted y_hat values (using x_total_bills and linear params theta) and actual y values (y_tips) \"\"\" y_hat = theta[0] + theta[1] * x_total_bills mse = sum((y_hat - y_tips)**2) / len(y_tips) return mse grader.check(\"q6a\") ","date":"2024-08-13","objectID":"/datalab5/:16:1","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 6b Now, set min_scipy_linear to the result of calling minimize to optimize the risk function you just implemented. Hint: Make sure to set x0, say, to [0.0, 0.0]. # call minimize with initial x0 = [0.0, 0.0] min_scipy_linear = minimize(mse_tips_linear_list, x0=[0.0, 0.0]) min_scipy_linear message: Optimization terminated successfully.\rsuccess: True\rstatus: 0\rfun: 1.036019442011604\rx: [ 9.203e-01 1.050e-01]\rnit: 3\rjac: [ 1.490e-08 0.000e+00]\rhess_inv: [[ 2.980e+00 -1.253e-01]\r[-1.253e-01 6.335e-03]]\rnfev: 15\rnjev: 5\rBased on the above output from your call to minimize, running the following cell will set and print the values of a_hat and b_hat. # just run this cell a_hat_scipy = min_scipy_linear['x'][0] b_hat_scipy = min_scipy_linear['x'][1] a_hat_scipy, b_hat_scipy (np.float64(0.9202707061277714), np.float64(0.1050244640398299))\rThe following cell will print out the values of a_hat and b_hat computed from both methods (“manual” refers to the analytical solution in Question 5; “scipy” refers to the numerical solution in Question 6). If you’ve done everything correctly, these should be very close to one another. # just run this cell print('a_hat_scipy: ', a_hat_scipy) print('a_hat_manual: ', a_hat) print('\\n') print('b_hat_scipy: ', b_hat_scipy) print('b_hat_manual: ', b_hat) a_hat_scipy: 0.9202707061277714\ra_hat_manual: 0.9202696135546735\rb_hat_scipy: 0.1050244640398299\rb_hat_manual: 0.10502451738435334\r","date":"2024-08-13","objectID":"/datalab5/:16:2","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"互动可视化 Visual Solution (not graded): Feel free to interact with the below plot and verify that the $\\hat{a}$ and $\\hat{b}$ you computed using either method above minimize the MSE. In the cell below we plot the mean squared error for different parameter values. Note that now that we have two parameters, we have a 3D MSE surface plot. Rotate the data around and zoom in and out using your trackpad or the controls at the top right of the figure. If you get an error that your browser does not support webgl, you may need to restart your kernel and/or browser. # just run this cell import itertools import plotly.graph_objects as go a_values = np.linspace(-1, 1, 80) b_values = np.linspace(-1,1, 80) mse_values = [mse_tips_linear(a, b) \\ for a, b in itertools.product(a_values, b_values)] mse_values = np.reshape(mse_values, (len(a_values), len(b_values)), order='F') fig = go.Figure(data=[go.Surface(x=a_values, y=b_values, z=mse_values)]) fig.update_layout( title=r'MSE for different values of $a, b$', autosize=False, scene = dict( xaxis_title='x=a', yaxis_title='y=b', zaxis_title='z=MSE'), width=500, margin=dict(r=20, b=10, l=10, t=10)) fig.show() ","date":"2024-08-13","objectID":"/datalab5/:17:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Comparing Constant Model vs Linear Model At this point, we can actually compare our two models! Both the linear model and constant model were optimized using the same L2 loss function but predict different values for different tips. Run the cell below: sns.scatterplot(x = x_total_bills, y = y_tips, label='observed'); # the below plot expects you've run all of Question 5 plt.plot(x_total_bills, predict_tip_linear(x_total_bills), label='linear', color='g'); # the below function expects you've run the cell right before part B plt.axhline(y=predict_tip_constant(), label='constant', color='m', ls='--'); plt.legend() plt.xlabel(\"total bill\") plt.ylabel(\"tip\") plt.title(\"Tips: Linear vs Constant Models\"); plt.show() Note that while we plot tip by total bill, the constant model doesn’t use the total bill in its prediction and therefore shows up as a horizontal line. Thought question: For predicting tip on this data, would you rather use the constant model or the linear model, assuming an L2 loss function for both? This might be more fun with a partner. Note, your answer will not be graded, so don’t worry about writing a detailed answer. If you want to see our answer, see the very end of this lab notebook. In the not-so-distant future of this class, you will learn more quantitative metrics to compare model performance. Stay tuned! ","date":"2024-08-13","objectID":"/datalab5/:17:1","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Part C: Using a Different Loss Function In this last (short) section, we’ll consider how the optimal parameters for the constant model would change if we used a different loss function. We will now use absolute loss (also known as the $L_1$ loss, pronounced “ell-one”). For an observed tip value $y$ (i.e., the real tip), our prediction of the tip $\\hat{y}$ would give an $L_1$ loss of: $$\\Large L_1(y, \\hat{y}) = |y - \\hat{y}|$$ While we still define risk as average loss, since we now use $L_1$ loss per datapoint in our datset $\\mathcal{D} = {y_1, \\ldots, y_n}$, our risk is now known as mean absolute error (MAE). For the constant model $\\hat{y} = \\theta$ (i.e., we predict our tip as a summary statistic): \\begin{align} \\Large R\\left(\\theta\\right) \u0026= \\Large \\frac{1}{n} \\sum_{i=1}^n L_1(y_i, \\hat{y_i}) \\ \u0026= \\Large \\frac{1}{n} \\sum_{i=1}^n |y_i - \\theta| \\end{align} Note: the last line results from using the constant model for $\\hat{y}$. If we decided to use the linear model, we would have a different expression. ","date":"2024-08-13","objectID":"/datalab5/:18:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 7 ","date":"2024-08-13","objectID":"/datalab5/:19:0","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 7a Define the mae_tips_constant function which computes $R(\\theta)$ as the mean absolute error (MAE) on the tips data for a constant model with parameter $\\theta$. Hint: You may want to check out your solution from Question 2, which computed mean squared error (MSE). def mae_tips_constant(theta): data = y_tips return np.mean(np.abs(data - theta)) mae_tips_constant(5.3) # arbitrarily pick theta = 5.3 np.float64(2.4527868852459016)\rgrader.check(\"q7\") ","date":"2024-08-13","objectID":"/datalab5/:19:1","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Question 7b In lecture, we saw that the value of theta that minimizes mean absolute error for the constant model is the median of the data. Assign min_computed_mae to the median of the observed y_tips data. min_computed_mae = np.median(y_tips) min_computed_mae np.float64(2.9)\rgrader.check(\"q7b\") ","date":"2024-08-13","objectID":"/datalab5/:19:2","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":"Comparing MAE to MSE Now run the below cell to compare MAE with MSE on the constant model. # just run this cell fig, ax = plt.subplots(nrows=2, figsize=((6, 8))) theta_values = np.linspace(0, 6, 100) mse = [mse_tips_constant(theta) for theta in theta_values] ax[0].plot(theta_values, mse) ax[0].axvline(x=min_computed, linewidth=4, color='k', ls='--', label=r'$\\hat{\\theta}$') ax[0].legend() ax[0].set_ylabel(\"avg L2 loss (MSE)\") mae = [mae_tips_constant(theta) for theta in theta_values] ax[1].plot(theta_values, mae, color='orange') ax[1].axvline(x=min_computed_mae, linewidth=4, color='k', ls='--', label=r'$\\hat{\\theta}$') ax[1].legend() ax[1].set_ylabel(\"avg L1 loss (MAE)\") ax[1].set_xlabel(r'$\\theta$'); fig.suptitle(r\"MAE vs MSE (constant model) for different values of $\\theta$\"); Thought question You should see that the MAE plot (below) looks somewhat similar the MSE plot (above). Try to identify any key differences you observe and write them down below. This might be more fun with a partner. Note, your answer will not be graded, so don’t worry about writing a detailed answer. If you want to see our answer, see the very end of this lab notebook. Write your answer here, replacing this text. Congratulations! You finished the lab! Extra Notes Our Observations on Constant Model vs Linear Model Earlier in this lab, we said we’d describe our observations about whether to use Constant Model or Linear Model (both trained with MSE). Here are some thoughts: Recall that $r$ is the correlation coefficient, where values closer to -1 or 1 imply a very linear relationship: # you computed this in Q5a r np.float64(0.6757341092113641)\rThe relationship between $x$ and $y$ is somewhat linear; you can see this more clearly through the scatter plot, where there are many points that don’t fall close to the linear model line. With this in mind: The linear model seems to work well for most bills. However, as bills get bigger, some datapoints seem to suggest that the constant model works better. In the wild, a tip predictor may use a combination of both the constant and linear models we trained: an average prediction, or a random coin flip to pick the model, or some heuristic decision to choose one model if the total bill exceeds a certain threshold. （集成学习思想？） In the not-so-distant future of this class, you will learn more quantitative metrics to compare model performance. You will have an opportunity to explore your own models in a future assignment! Our Observations on Differences Between MAE vs. MSE Earlier in this lab, we said we’d describe our observations about the differences between the MAE and MSE. There are three key differences that we identified between the plots of the MSE and MAE. The minimizing $\\theta = \\hat{\\theta}$ is different. The plot for MAE increases linearly instead of quadratically as we move far away from the minimizing $\\theta$. The plot for MAE is piecewise linear instead of smooth. Each change in slope happens at the same $\\theta$ value as a data point in our dataset. ","date":"2024-08-13","objectID":"/datalab5/:19:3","tags":["SciPy","Plotly"],"title":"DATA100-lab5: Modeling, Loss Functions, and Summary Statistics","uri":"/datalab5/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab06.ipynb\") Lab 6: Linear Regression ","date":"2024-08-13","objectID":"/datalab6/:0:0","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Objectives In this lab, you will review the details of linear regresison as described in Lectures 10 and 11. In particular: Matrix formulation and solution to Ordinary Least Squares sns.lmplot as a quick visual for simple linear regression scikit-learn, a real world data science tool that is more robust and flexible than analytical/scipy.optimize solutions You will also practice interpreting residual plots (vs. fitted values) and the Multiple $R^2$ metric used in Multiple Linear Regression. For the first part of this lab, you will predict fuel efficiency (mpg) of several models of automobiles using a single feature: engine power (horsepower). For the second part, you will perform feature engineering on multiple features to better predict fuel efficiency. First, let’s load in the data. # Run this cell import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt %matplotlib inline # Here, we load the fuel dataset, and drop any rows that have missing data vehicle_data = sns.load_dataset('mpg').dropna() vehicle_data = vehicle_data.sort_values('horsepower', ascending=True) vehicle_data.head(5) mpg\rcylinders\rdisplacement\rhorsepower\rweight\racceleration\rmodel_year\rorigin\rname\r102\r26.0\r4\r97.0\r46.0\r1950\r21.0\r73\reurope\rvolkswagen super beetle\r19\r26.0\r4\r97.0\r46.0\r1835\r20.5\r70\reurope\rvolkswagen 1131 deluxe sedan\r325\r44.3\r4\r90.0\r48.0\r2085\r21.7\r80\reurope\rvw rabbit c (diesel)\r326\r43.4\r4\r90.0\r48.0\r2335\r23.7\r80\reurope\rvw dasher (diesel)\r244\r43.1\r4\r90.0\r48.0\r1985\r21.5\r78\reurope\rvolkswagen rabbit custom diesel\rWe have 392 datapoints and 8 potential features (plus our observations, mpg). vehicle_data.shape (392, 9)\rLet us try to fit a line to the below plot, which shows mpg vs. horsepower for several models of automobiles. # just run this cell sns.scatterplot(x='horsepower', y='mpg', data=vehicle_data); ","date":"2024-08-13","objectID":"/datalab6/:1:0","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 1: Ordinary Least Squares Instead of using the SLR formulation, in this lab we will practice linear algebra with Ordinary Least Squares. Recall that the Simple Linear Regression model is written as follows: $$\\hat{y} = \\theta_0 + \\theta_1 x$$ We now use $\\theta = (\\theta_0, \\theta_1)$ so that the formulation more closely matches our multiple linear regression model: $$\\hat{y} = \\theta_0 + \\theta_1 x_1 + \\dots + \\theta_p x_p$$ We can rewrite our multiple linear regression model using matrix notation. Let $\\mathbb{Y}$ be a vector of all $n$ observations in our sample. Then our prediction vector $\\hat{\\mathbb{Y}}$ is $$\\Large \\hat{\\mathbb{Y}} = \\mathbb{X} \\theta$$ where $\\mathbb{X}$ is the design matrix representing the $p$ features for all $n$ datapoints in our sample. Note that for our SLR model, $p = 1$ and therefore the matrix notation seems rather silly. Nevertheless it is valuable to start small and build on our intuition. ","date":"2024-08-13","objectID":"/datalab6/:2:0","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 1a: Construct $\\mathbb{X}$ with an intercept term Because we have an intercept term $\\theta_0$ in our parameter vector $\\theta$, our design matrix $\\mathbb{X}$ for $p$ features actually has dimension $$ \\Large \\mathbb{X} \\in \\mathbb{R}^{n \\times (p + 1)}$$ Therefore, the resulting matrix expression $\\hat{\\mathbb{Y}} = \\mathbb{X} \\theta$ represents $n$ linear equations, where equation $i$ is $\\hat{y_i} = \\theta_0 \\cdot 1 + \\theta_1 \\cdot x_1 + \\dots + \\theta_p x_p$. The constant all-ones column of $\\mathbb{X}$ is sometimes called the bias feature; $\\theta_0$ is frequently called the bias or intercept term. Below, implement add_intercept, which computes a design matrix such that the first (left-most) column is all ones. The function has two lines: you are responsible for constructing the all-ones column bias_feature using the np.ones function (NumPy documentation). This is then piped into a call to np.concatenate (documentation), which we’ve implemented for you. Note: bias_feature should be a matrix of dimension (n,1), not a vector of dimension (n,). def add_intercept(X): \"\"\" Return X with a bias feature. Parameters ----------- X: a 2D dataframe of p numeric features (may also be a 2D numpy array) of shape n x p Returns ----------- A 2D matrix of shape n x (p + 1), where the leftmost column is a column vector of 1's \"\"\" bias_feature = np.ones((X.shape[0], 1)) return np.concatenate([bias_feature, X], axis=1) # 矩阵拼接 # Note the [[ ]] brackets below: the argument needs to be # a matrix (DataFrame), as opposed to a single array (Series). X = add_intercept(vehicle_data[['horsepower']]) X.shape (392, 2)\rgrader.check(\"q1a\") ","date":"2024-08-13","objectID":"/datalab6/:2:1","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 1b: Define the OLS Model The predictions for all $n$ points in our data are (note $\\theta = (\\theta_0, \\theta_1, \\dots, \\theta_p)$) : $$ \\Large \\hat{\\mathbb{Y}} = \\mathbb{X}\\theta $$ Below, implement the linear_model function to evaluate this product. Hint: You can use np.dot, pd.DataFrame.dot, or the @ operator to multiply matrices/vectors. However, while the @ operator can be used to multiply numpy arrays, it generally will not work between two pandas objects, so keep that in mind when computing matrix-vector products! def linear_model(thetas, X): \"\"\" Return the linear combination of thetas and features as defined above. Parameters ----------- thetas: a 1D vector representing the parameters of our model ([theta1, theta2, ...]) X: a 2D dataframe of numeric features (may also be a 2D numpy array) Returns ----------- A 1D vector representing the linear combination of thetas and features as defined above. \"\"\" return np.dot(X, thetas) grader.check(\"q1b\") ","date":"2024-08-13","objectID":"/datalab6/:2:2","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 1c: Least Squares Estimate, Analytically, 常见的矩阵操作 Recall from lecture that Ordinary Least Squares is when we fit a linear model with mean squared error, which is equivalent to the following optimization problem: $$\\Large \\min_{\\theta} ||\\Bbb{X}\\theta - \\Bbb{Y}||^2$$ We showed in Lecture that the optimal estimate $\\hat{\\theta}$ when $X^TX$ is invertible is given by the equation: $$ \\Large \\hat{\\theta} = (\\Bbb{X}^T\\Bbb{X})^{-1}\\Bbb{X}^T\\Bbb{Y}$$ Below, implement the analytic solution to $\\hat{\\theta}$ using np.linalg.inv (link) to compute the inverse of $\\Bbb{X}^T\\Bbb{X}$. Reminder: To compute the transpose of a matrix, you can use X.T or X.transpose() (link). Note: You can also consider using np.linalg.solve (link) instead of np.linalg.inv because it is more robust (more on StackOverflow here). def get_analytical_sol(X, y): \"\"\" Computes the analytical solution to our least squares problem Parameters ----------- X: a 2D dataframe (or numpy array) of numeric features y: a 1D vector of tip amounts Returns ----------- The estimate for theta (a 1D vector) computed using the equation mentioned above. \"\"\" return np.linalg.inv(X.T @ X) @ X.T @ y Y = vehicle_data['mpg'] analytical_thetas = get_analytical_sol(X, Y) analytical_thetas array([39.93586102, -0.15784473])\rgrader.check(\"q1c\") Now, let’s analyze our model’s performance. Your task will be to interpret the model’s performance using the two visualizations and one performance metric we’ve implemented below. First, we run sns.lmplot, which will both provide a scatterplot of mpg vs horsepower and display the least-squares line of best fit. (If you’d like to verify the OLS fit you found above is the same line found through Seaborn, change include_OLS to True.) include_OLS = True # change this flag to visualize OLS fit sns.lmplot(x='horsepower', y='mpg', data=vehicle_data); predicted_mpg_hp_only = linear_model(analytical_thetas, X) if include_OLS: # if flag is on, add OLS fit as a dotted red line plt.plot(vehicle_data['horsepower'], predicted_mpg_hp_only, 'r--') Next, we plot the residuals. While in Simple Linear Regression we have the option to plot residuals vs. the single input feature, in Multiple Linear Regression we often plot residuals vs fitted values $\\hat{\\mathbb{Y}}$. In this lab, we opt for the latter. plt.scatter(predicted_mpg_hp_only, Y - predicted_mpg_hp_only) plt.axhline(0, c='black', linewidth=1) plt.xlabel(r'Fitted Values $\\hat{\\mathbb{Y}}$') plt.ylabel(r'Residuals $\\mathbb{Y} - \\hat{\\mathbb{Y}}$'); Finally, we compute the Multiple $R^2$ metric. As described in Lecture 11 (link), $$R^2 = \\frac{\\text{variance of fitted values}}{\\text{variance of true } y} = \\frac{\\sigma_{\\hat{y}}^2}{\\sigma_y^2}$$ $R^2$ can be used in the multiple regression setting, whereas $r$ (the correlation coefficient) is restricted to SLR since it depends on a single input feature. In SLR, $r^{2}$ and Multiple $R^{2}$ are equivalent; the proof is left to you. r2_hp_only = np.var(predicted_mpg_hp_only) / np.var(Y) print('Multiple R^2 using only horsepower: ', r2_hp_only) Multiple R^2 using only horsepower: 0.6059482578894348\r","date":"2024-08-13","objectID":"/datalab6/:2:3","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 1d In the cell below, comment on the above visualization and performance metrics, and whether horsepower and mpg have a good linear fit. poor performance ","date":"2024-08-13","objectID":"/datalab6/:2:4","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 2: Transform a Single Feature The Tukey-Mosteller Bulge Diagram tells us to transform our $\\mathbb{X}$ or $\\mathbb{Y}$ to find a linear fit. Let’s consider the following linear model: $$\\text{predicted mpg} = \\theta_0 + \\theta_1 \\sqrt{\\text{horsepower}}$$ ","date":"2024-08-13","objectID":"/datalab6/:3:0","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 2a In the cell below, explain why we use the term “linear” to describe the model above, even though it incorporates a square-root of horsepower as a feature. 泛化线性模型 ","date":"2024-08-13","objectID":"/datalab6/:3:1","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Introduction to sklearn Yet another way to fit a linear regression model is to use scikit learn, an industry standard package for machine learning applications. Because it is application-specific, sklearn is often faster and more robust than the analytical/scipy-based computation methods we’ve used thus far. To use sklearn: Create an sklearn object fit the object to data Analyze fit or call predict. 1. Create object. We first create a LinearRegression object. Here’s the sklearn documentation. Note that by default, the object will include an intercept term when fitting. Here, model is like a “blank slate” for a linear model. # 1. just run this cell from sklearn.linear_model import LinearRegression model = LinearRegression(fit_intercept=True) 2. fit the object to data. Now, we need to tell model to “fit” itself to the data. Essentially, this is doing exactly what you did in the previous part of this lab (creating a risk function and finding the parameters that minimize that risk). Note: X needs to be a matrix (or DataFrame), as opposed to a single array (or Series). This is because sklearn.linear_model is robust enough to be used for multiple regression, which we will look at later this lab. # 2. run this cell to add sqrt(hp) column for each car in the dataset vehicle_data['sqrt(hp)'] = np.sqrt(vehicle_data['horsepower']) vehicle_data.head() mpg\rcylinders\rdisplacement\rhorsepower\rweight\racceleration\rmodel_year\rorigin\rname\rsqrt(hp)\r102\r26.0\r4\r97.0\r46.0\r1950\r21.0\r73\reurope\rvolkswagen super beetle\r6.782330\r19\r26.0\r4\r97.0\r46.0\r1835\r20.5\r70\reurope\rvolkswagen 1131 deluxe sedan\r6.782330\r325\r44.3\r4\r90.0\r48.0\r2085\r21.7\r80\reurope\rvw rabbit c (diesel)\r6.928203\r326\r43.4\r4\r90.0\r48.0\r2335\r23.7\r80\reurope\rvw dasher (diesel)\r6.928203\r244\r43.1\r4\r90.0\r48.0\r1985\r21.5\r78\reurope\rvolkswagen rabbit custom diesel\r6.928203\r# 2. run this cell model.fit(X = vehicle_data[['sqrt(hp)']], y= vehicle_data['mpg']) 3. Analyze fit. Now that the model exists, we can look at the $\\hat{\\theta_0}$ and $\\hat{\\theta_1}$ values it found, which are given in the attributes intercept and coef, respectively. model.intercept_ np.float64(58.705172037217466)\rmodel.coef_ array([-3.50352375])\r3 (continued). Call predict. To use the scikit-learn linear regression model to make predictions, you can use the model.predict method. Below, we find the estimated mpg for a single datapoint with a sqrt(hp) of 6.78 (i.e., horsepower 46). Note that unlike the linear algebra approach, we do not need to manually add an intercept term, because our model (which was created with fit_intercept=True) will auto-add one. single_datapoint = [[6.78]] # needs to be a 2D array since the X in step 2 was a 2D array. [[ ]] trick model.predict(single_datapoint) d:\\miniconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\rwarnings.warn(\rarray([34.95128104])\r","date":"2024-08-13","objectID":"/datalab6/:3:2","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 2b Using the model defined above, set predicted_mpg to the predicted mpg for the data below. Running the cell will then compute the multiple $R^2$ value and create a linear regression plot for this new square root feature, overlaid on the original least squares estimate (used in Question 1c). predicted_mpg_hp_sqrt = model.predict(vehicle_data[['sqrt(hp)']]) # do not modify below this line r2_hp_sqrt = np.var(predicted_mpg_hp_sqrt) / np.var(vehicle_data['mpg']) print('Multiple R^2 using sqrt(hp): ', r2_hp_sqrt) sns.lmplot(x='horsepower', y='mpg', data=vehicle_data) plt.plot(vehicle_data['horsepower'], predicted_mpg_hp_sqrt, color = 'r', linestyle='--', label='sqrt(hp) fit'); plt.legend(); Multiple R^2 using sqrt(hp): 0.6437035832706468\rThe visualization shows a slight improvement, but note that the underlying pattern is parabolic–suggesting that perhaps we should try a quadratic feature. Next, we use the power of multiple linear regression to add an additional feature. ","date":"2024-08-13","objectID":"/datalab6/:3:3","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Add an Additional Feature For the second part of this lab, we move from SLR to multiple linear regression. Until now, we have established relationships between one independent explanatory variable and one response variable. However, with real-world problems you will often want to use multiple features to model and predict a response variable. Multiple linear regression attempts to model the relationship between two or more explanatory variables and a response variable by fitting a linear equation to the observed data. We can consider including functions of existing features as new features to help improve the predictive power of our model. (This is something we will discuss in further detail in the Feature Engineering lecture.) The cell below adds a column which contains the square of the horsepower for each car in the dataset. # just run this cell vehicle_data['hp^2'] = vehicle_data['horsepower'] ** 2 vehicle_data.head() mpg\rcylinders\rdisplacement\rhorsepower\rweight\racceleration\rmodel_year\rorigin\rname\rsqrt(hp)\rhp^2\r102\r26.0\r4\r97.0\r46.0\r1950\r21.0\r73\reurope\rvolkswagen super beetle\r6.782330\r2116.0\r19\r26.0\r4\r97.0\r46.0\r1835\r20.5\r70\reurope\rvolkswagen 1131 deluxe sedan\r6.782330\r2116.0\r325\r44.3\r4\r90.0\r48.0\r2085\r21.7\r80\reurope\rvw rabbit c (diesel)\r6.928203\r2304.0\r326\r43.4\r4\r90.0\r48.0\r2335\r23.7\r80\reurope\rvw dasher (diesel)\r6.928203\r2304.0\r244\r43.1\r4\r90.0\r48.0\r1985\r21.5\r78\reurope\rvolkswagen rabbit custom diesel\r6.928203\r2304.0\r","date":"2024-08-13","objectID":"/datalab6/:4:0","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 3 ","date":"2024-08-13","objectID":"/datalab6/:5:0","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 3a Using scikit learn’s LinearRegression, create and fit a model that tries to predict mpg from horsepower AND hp^2 using the DataFrame vehicle_data. Name your model model_multi. Hint: We did something very similar in Question 2. model_multi = LinearRegression() # by default, fit_intercept=True model_multi.fit(X = vehicle_data[['horsepower', 'hp^2']], y= vehicle_data['mpg']) grader.check(\"q3a\") After fitting, we can see the coefficients and intercept. Note, there are now two elements in model_multi.coef_, since there are two features. model_multi.intercept_ np.float64(56.90009970211301)\rmodel_multi.coef_ array([-0.46618963, 0.00123054])\r","date":"2024-08-13","objectID":"/datalab6/:5:1","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 3b Using the above values, in LaTeX, write out the function that the model is using to predict mpg from horsepower and hp^2. $$ mpg_{predicted} = 56.90 - 0.47 \\times horsepower + 0.001 \\times hp^2 $$ The plot below shows the prediction of our model. It’s much better! # just run this cell predicted_mpg_multi = model_multi.predict(vehicle_data[['horsepower', 'hp^2']]) r2_multi = np.var(predicted_mpg_multi) / np.var(vehicle_data['mpg']) print('Multiple R^2 using both horsepower and horsepower squared: ', r2_multi) sns.scatterplot(x='horsepower', y='mpg', data=vehicle_data) plt.plot(vehicle_data['horsepower'], predicted_mpg_hp_only, label='hp only'); plt.plot(vehicle_data['horsepower'], predicted_mpg_hp_sqrt, color = 'r', linestyle='--', label='sqrt(hp) fit'); plt.plot(vehicle_data['horsepower'], predicted_mpg_multi, color = 'gold', linewidth=2, label='hp and hp^2'); plt.legend(); Multiple R^2 using both horsepower and horsepower squared: 0.6875590305127548\r","date":"2024-08-13","objectID":"/datalab6/:5:2","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 3c In the cell below, we assign the mean of the mpg column of the vehicle data dataframe to mean_mpg. Given this information, what is the mean of the mean_predicted_mpg_hp_only, predicted_mpg_hp_sqrt, and predicted_mpg_multi arrays? Hint: You should not have to call np.mean in your code. mean_mpg = np.mean(vehicle_data['mpg']) mean_predicted_mpg_hp_only = mean_mpg # 最小二乘性质决定!y_bar = a + b * x_bar mean_predicted_mpg_hp_sqrt = mean_mpg mean_predicted_mpg_multi = mean_mpg # print(np.mean(predicted_mpg_hp_sqrt)) # print(mean_mpg) # print(np.mean(predicted_mpg_multi)) 23.445918367346934\r23.445918367346938\r23.445918367346938\rgrader.check(\"q3c\") ","date":"2024-08-13","objectID":"/datalab6/:5:3","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Faulty Feature Engineering: Redundant Features Suppose we used the following linear model: \\begin{align} \\text{mpg} \u0026= \\theta_0 + \\theta_1 \\cdot \\text{horsepower} + \\ \u0026\\theta_2 \\cdot \\text{horsepower}^2 + \\theta_3 \\cdot \\text{horsepower} \\end{align} Notice that horsepower appears twice in our model!! We will explore how this redundant feature affects our modeling. ","date":"2024-08-13","objectID":"/datalab6/:6:0","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 4 ","date":"2024-08-13","objectID":"/datalab6/:7:0","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 4a: Linear Algebra Construct a matrix X_redundant that uses the vehicle data DataFrame to encode the “three” features above, as well as a bias feature. Hint: Use the add_intercept term you implemented in Question 1a. X_redundant = add_intercept(vehicle_data[['horsepower', 'hp^2', 'horsepower']]) X_redundant.shape (392, 4)\rgrader.check(\"q4a\") q4a passed! 🚀 Now, run the cell below to find the analytical OLS Estimate using the get_analytical_sol function you wrote in Question 1c. Depending on the machine that you run your code on, you should either see a singular matrix error or end up with thetas that are nonsensical (magnitudes greater than 10^15). This is not good! # just run this cell # the try-except block suppresses errors during submission import traceback try: analytical_thetas = get_analytical_sol(X_redundant, vehicle_data['mpg']) analytical_thetas except Exception as e: print(traceback.format_exc()) ","date":"2024-08-13","objectID":"/datalab6/:7:1","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 4b In the cell below, explain why we got the error above when trying to calculate the analytical solution to predict mpg. 解析方法不一定正确，比较理想但不现实（但是上面并没有error诶） Note: While we encountered errors when using the linear algebra approach, a model fitted with `sklearn` will not encounter matrix singularity errors since it uses numerical methods to find optimums (to be covered in Gradient Descent lecture).\r# just run this cell # sklearn finds optimal parameters despite redundant features model_redundant = LinearRegression(fit_intercept=False) # X_redundant already has an intercept column model_redundant.fit(X = X_redundant, y = vehicle_data['mpg']) model_redundant.coef_ array([ 5.69000997e+01, -2.33094815e-01, 1.23053610e-03, -2.33094815e-01])\r","date":"2024-08-13","objectID":"/datalab6/:7:2","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Overfitting with Too Many Features Let’s take what we’ve learned so far and go one step further: introduce even more features. Again, using scikit learn’s LinearRegression, we fit a model that tries to predict mpg using each of the following as features: horsepower hp^2 model_year acceleration # just run this cell desired_columns = ['horsepower', 'hp^2', 'model_year', 'acceleration'] model_overfit = LinearRegression() model_overfit.fit(X = vehicle_data[desired_columns], y= vehicle_data['mpg']) predicted_mpg_overfit = model_overfit.predict(vehicle_data[['horsepower', 'hp^2', 'model_year', 'acceleration']]) The plot below shows the prediction of our more sophisticated model. Note we arbitrarily plot against horsepower for the ease of keeping our plots 2-dimensional.\r# just run this cell sns.scatterplot(x='horsepower', y='mpg', data=vehicle_data) plt.plot(vehicle_data['horsepower'], predicted_mpg_overfit, color = 'r'); Think about what you see in the above plot. Why is the shape of our prediction curve so jagged? Do you think this is a good model to predict the mpg of some car we don’t already have information on? This idea –the bias-variance tradeoff is an idea we will explore in the coming weeks. ","date":"2024-08-13","objectID":"/datalab6/:8:0","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":"Question 5: Comparing $R^2$ Lastly, set r2_overfit to be the multiple $R^2$ coefficient obtained by using model_overfit. Hint: This is very similar to several pre-computed cells in Questions 1c, 2b, and 3b. r2_overfit = np.var(predicted_mpg_overfit) / np.var(vehicle_data['mpg']) r2_overfit np.float64(0.8163086433998654)\rgrader.check(\"q5\") Comparing this model with previous models: # just run this cell # compares q1, q2, q3, and overfit models (ignores redundant model) print('Multiple R^2 using only horsepower: ', r2_hp_only) print('Multiple R^2 using sqrt(hp): ', r2_hp_sqrt) print('Multiple R^2 using both hp and hp^2: ', r2_multi) print('Multiple R^2 using hp, hp^2, model year, and acceleration: ', r2_overfit) Multiple R^2 using only horsepower: 0.6059482578894348\rMultiple R^2 using sqrt(hp): 0.6437035832706468\rMultiple R^2 using both hp and hp^2: 0.6875590305127548\rMultiple R^2 using hp, hp^2, model year, and acceleration: 0.8163086433998654\rIf everything was done correctly, the multiple $R^2$ of our latest model should be substantially higher than that of the previous models. This is because multiple $R^2$ increases with the number of covariates (i.e., features) we add to our model. A Word on Overfitting: We might not always want to use models with large multiple $R^2$ values because these models could be overfitting to our specific sample data, and won’t generalize well to unseen data from the population. Again, this is an idea we will explore in future lectures and assignments. Congratulations! You finished the lab! ","date":"2024-08-13","objectID":"/datalab6/:9:0","tags":["Scikit-learn","Seaborn"],"title":"DATA100-lab6: Linear Regression","uri":"/datalab6/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab03.ipynb\") Lab 3: Data Cleaning and EDA In this lab you will be working on visualizing a dataset from the City of Berkeley containing data on calls to the Berkeley Police Department. Information about the dataset can be found at this link. ","date":"2024-08-13","objectID":"/datalab3/:0:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Content Warning This lab includes an analysis of crime in Berkeley. If you feel uncomfortable with this topic, please contact your GSI or the instructors. ","date":"2024-08-13","objectID":"/datalab3/:0:1","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Setup In this lab, we’ll perform Exploratory Data Analysis and learn some preliminary tips for working with matplotlib (a Python plotting library). Note that we configure a custom default figure size. Virtually every default aspect of matplotlib can be customized. Collaborators: list names here import pandas as pd import numpy as np import zipfile import matplotlib import matplotlib.pyplot as plt plt.rcParams['figure.figsize'] = (12, 9) fig = plt.figure() plt.show(fig) \u003cFigure size 1200x900 with 0 Axes\u003e\rPart 1: Acquire the Data 1. Obtain data To retrieve the dataset, we will use the ds100_utils.fetch_and_cache utility. # just run this cell import ds100_utils data_dir = 'data' data_url = 'http://www.ds100.org/sp22/resources/assets/datasets/lab03_data_sp22.zip' file_name = 'lab03_data_sp22.zip' dest_path = ds100_utils.fetch_and_cache(data_url=data_url, file=file_name, data_dir=data_dir) print(f'Located at {dest_path}') Using cached version that was downloaded (UTC): Sun Jul 28 01:04:24 2024\rLocated at data\\lab03_data_sp22.zip\r2. Unzip file We will now directly unzip the ZIP archive and start working with the uncompressed files. # just run this cell my_zip = zipfile.ZipFile(dest_path, 'r') my_zip.extractall(data_dir) Note: There is no single right answer regarding whether to work with compressed files in their compressed state or to uncompress them on disk permanently. For example, if you need to work with multiple tools on the same files, or write many notebooks to analyze them—and they are not too large—it may be more convenient to uncompress them once. But you may also have situations where you find it preferable to work with the compressed data directly. Python gives you tools for both approaches, and you should know how to perform both tasks in order to choose the one that best suits the problem at hand. 3. View files Now, we’ll use the os package to list all files in the data directory. os.walk() recursively traverses the directory, and os.path.join() creates the full pathname of each file. If you’re interested in learning more, check out the Python3 documentation pages for os.walk (link) and os.path (link). We use Python 3 format strings to nicely format the printed variables dpath and fpath. # just run this cell # two for loop in the same time... ? not that funny yet? import os for root, directories, filenames in os.walk(data_dir): # first, print out all directories ---\u003e \"secret\" for directory in directories: dpath = os.path.join(root, directory) print(f\"d {dpath}\") # next, print out all files for filename in filenames: fpath = os.path.join(root,filename) print(f\" {fpath}\") d data\\secret\rdata\\ben_kurtovic.py\rdata\\Berkeley_PD_-_Calls_for_Service.csv\rdata\\dummy.txt\rdata\\hello_world.py\rdata\\lab03_data_sp22.zip\rdata\\secret\\do_not_readme.md\rIn this Lab, we’ll be working with the Berkeley_PD_-_Calls_for_Service.csv file. Feel free to check out the other files, though. Part 2: Clean and Explore the Data Let’s now load the CSV file we have into a pandas.DataFrame object and start exploring the data. # just run this cell calls = pd.read_csv(\"data/Berkeley_PD_-_Calls_for_Service.csv\") calls.head() CASENO\rOFFENSE\rEVENTDT\rEVENTTM\rCVLEGEND\rCVDOW\rInDbDate\rBlock_Location\rBLKADDR\rCity\rState\r0\r21014296\rTHEFT MISD. (UNDER $950)\r04/01/2021 12:00:00 AM\r10:58\rLARCENY\r4\r06/15/2021 12:00:00 AM\rBerkeley, CA\\n(37.869058, -122.270455)\rNaN\rBerkeley\rCA\r1\r21014391\rTHEFT MISD. (UNDER $950)\r04/01/2021 12:00:00 AM\r10:38\rLARCENY\r4\r06/15/2021 12:00:00 AM\rBerkeley, CA\\n(37.869058, -122.270455)\rNaN\rBerkeley\rCA\r2\r21090494\rTHEFT MISD. (UNDER $950)\r04/19/2021 12:00:00 AM\r12:15\rLARCENY\r1\r06/15/2021 12:00:00 AM\r2100 BLOCK HASTE ST\\nBerkeley, CA\\n(37.864908,...\r2100 BLOCK HASTE ST\rBerkeley\rCA\r3\r21090204\rTHEFT FELONY (OVER $950)\r02/13/2021 12:00:00 AM\r17:00\rLARCENY\r6\r06/15/2021 12:00:00 AM\r2600 BLOCK WARRING ST\\nBerkeley, CA\\n(37.86393...\r2600 BLOCK WARRING ST\rBerkeley\rCA\r4\r21090179\rBURGLARY AUTO\r02/08/2021 12:00:00 AM\r6:20\rBURGLARY - VEHICLE\r1\r06/15/2021 12:00:00","date":"2024-08-13","objectID":"/datalab3/:1:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Question 1 In the cell below, set answer1 equal to a list of strings corresponding to the possible values (which means unique 🤔 ) for OFFENSE when CVLEGEND is “LARCENY”. You can type the answer manually, or you can create an expression that automatically extracts the names. answer1 = list(calls[calls['CVLEGEND'] == 'LARCENY']['OFFENSE'].unique()) answer1 ['THEFT MISD. (UNDER $950)', 'THEFT FELONY (OVER $950)', 'THEFT FROM PERSON']\rgrader.check(\"q1\") q1 passed! 🌟 Part 3: Visualize the Data ","date":"2024-08-13","objectID":"/datalab3/:2:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Matplotlib demo You’ve seen some matplotlib in this class already, but now we will explain how to work with the object-oriented plotting API mentioned in this matplotlib.pyplot tutorial useful. In matplotlib, plotting occurs on a set of Axes which are associated with a Figure. An analogy is that on a blank canvas (Figure), you choose a location to plot (Axes) and then fill it in (plot). There are two approaches to labeling and manipulating figure contents, which we’ll discuss below. Approach 1 is closest to the plotting paradigm of MATLAB, the namesake of matplotlib; Approach 2 is also common because many matplotlib-based packages (such as Seaborn) explicitly return the current set of axes after plotting data. Both are essentially equivalent, and at the end of this class you’ll be comfortable with both. Approach 1: matplotlib (or Seaborn) will auto-plot onto the current set of Axes or (if none exists) create a new figure/set of default axes. You can plot data using methods from plt, which is shorthand for the matplotlib.pyplot package. Then subsequent plt calls all edit the same set of default-created axes. Approach 2: After creating the initial plot, you can also use plt.gca() to explicitly get the current set of axes, and then edit those specific axes using axes methods. Note the method naming is slightly different! As an example of the built-in plotting functionality of pandas, the following example uses plot method of the Series class to generate a barh plot type to visually display the value counts for CVLEGEND. There are also many other plots that we will explore throughout the lab. Side note: Pandas also offers basic functionality for plotting. For example, the DataFrame and Series classes both have a plot method, which uses matplotlib under the hood. For now we’ll focus on matplotlib itself so you get used to the syntax, but just know that convenient Pandas plotting methods exist for your own future data science exploration. Below, we show both approaches by generating a horizontal bar plot to visually display the value counts for CVLEGEND. See the barhdocumentation for more details. # DEMO CELL: assign demo to 1 or 2. demo = 1 calls_cvlegend = calls['CVLEGEND'].value_counts() if demo == 1: plt.barh(calls_cvlegend.index, calls_cvlegend) # creates figure and axes (y,x) not (x,y)! print(f\"Demo {demo}: Using plt methods to update plot\") plt.ylabel(\"Crime Category\") # uses most recently plotted axes plt.xlabel(\"Number of Calls\") plt.title(\"Number of Calls by Crime Type\") elif demo == 2: print(f\"Demo {demo}: Using axes methods to update plot\") plt.barh(calls_cvlegend.index, calls_cvlegend) # creates figure and axes ax = plt.gca() ax.set_ylabel(\"Crime Category\") ax.set_xlabel(\"Number of Calls\") ax.set_title(\"Axes methods: Number of Calls by Crime Type\") else: print(\"Error: Please assign the demo variable to 1 or 2.\") plt.show() Demo 1: Using plt methods to update plot\r","date":"2024-08-13","objectID":"/datalab3/:2:1","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"An Additional Note on Plotting in Jupyter Notebooks You may have noticed that many of our plotting code cells end with a semicolon ; or plt.show(). The former prevents any extra output from the last line of the cell; the latter explicitly returns (and outputs) the figure. Try adding this to your own code in the following questions! ","date":"2024-08-13","objectID":"/datalab3/:2:2","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Question 2 Now it is your turn to make a plot using matplotlib. Let’s start by transforming the data so that it is easier to work with. The CVDOW field isn’t named helpfully and it is hard to see the meaning from the data alone. According to the website linked at the top of this notebook, CVDOW is actually indicating the day that events happened. 0-\u003eSunday, 1-\u003eMonday … 6-\u003eSaturday. ","date":"2024-08-13","objectID":"/datalab3/:3:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Question 2a Add a new column Day into the calls dataframe that has the string weekday (eg. ‘Sunday’) for the corresponding value in CVDOW. For example, if the first 3 values of CVDOW are [3, 6, 0], then the first 3 values of the Day column should be [\"Wednesday\", \"Saturday\", \"Sunday\"]. Hint: Try using the Series.map function on calls[\"CVDOW\"]. Can you assign this to the new column calls[\"Day\"]? days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"] day_indices = range(7) indices_to_days_dict = dict(zip(day_indices, days)) # Should look like {0:\"Sunday\", 1:\"Monday\", ..., 6:\"Saturday\"} calls[\"Day\"] = calls[\"CVDOW\"].map(indices_to_days_dict) grader.check(\"q2a\") q2a passed! 🌟 # just run this example cell ax = calls['CVLEGEND'].value_counts().plot(kind='barh') ax.set_ylabel(\"Crime Category\") ax.set_xlabel(\"Number of Calls\") ax.set_title(\"Number of Calls By Crime Type\"); Challenge (OPTIONAL): You could also accomplish this part as a table left join with pd.merge (documentation), instead of using Series.map. You would need to merge calls with a new dataframe that just contains the days of the week. If you have time, try it out in the below cell! merge操作在接下来的lab有详细介绍！😉 # scratch space for optional challenge dow_df = pd.DataFrame(days, columns=[\"Day\"]) ... Ellipsis\r","date":"2024-08-13","objectID":"/datalab3/:4:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Question 2b Now let’s look at the EVENTTM column which indicates the time for events. Since it contains hour and minute information, let’s extract the hour info and create a new column named Hour in the calls dataframe. You should save the hour as an int. Hint: Your code should only require one line. Hint 2: The vectorized Series.str[ind] performs integer indexing on an array entry. calls[\"Hour\"] = calls[\"EVENTTM\"].str.split(\" \").str[0].str.split(\":\").str[0].astype(int) calls[\"Hour\"] 0 10\r1 10\r2 12\r3 17\r4 6\r..\r2627 12\r2628 15\r2629 0\r2630 18\r2631 2\rName: Hour, Length: 2632, dtype: int64\rgrader.check(\"q2b\") ","date":"2024-08-13","objectID":"/datalab3/:5:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Question 2c Using matplotlib, construct a line plot with the count of the number of calls (entries in the table) for each hour of the day ordered by the time (eg. 12:00 AM, 1:00 AM, …). Please use the provided variable hours in your answer. Be sure that your axes are labeled and that your plot is titled. Hint: Check out the plt.plot method in the matplotlib tutorial, as well as our demo above. hours = list(range(24)) calls_index = calls['Hour'].value_counts().sort_index() # calls_index plt.plot(hours, calls_index) plt.xlabel(\"Hour\") plt.ylabel(\"Number of Calls\") plt.title(\"Number of Calls per Hour\") # Leave this for grading purposes ax_3d = plt.gca() grader.check(\"q2c\") q2c passed! 🌟 To better understand the time of day a report occurs we could stratify the analysis by the day of the week. To do this we will use violin plots (a variation of a box plot), which you will learn in more detail next week. For now, just know that a violin plot shows an estimated distribution of quantitative data (e.g., distribution of calls by hour) over a categorical variable (day of the week). More calls occur in hours corresponding to the fatter part of each violin; the median hour of all calls in a particular day is marked by the white dot in the corresponding violin. # for now, just run this cell. # we will learn the seaborn visualization library next week. import seaborn as sns ax = sns.violinplot(data=calls.sort_values(\"CVDOW\"), x=\"Day\", y=\"Hour\", saturation=0.5, palette=\"Set2\") ax.set_title(\"Stratified Analysis of Phone Calls by Day\"); C:\\Users\\86135\\AppData\\Local\\Temp\\ipykernel_19968\\4044437892.py:5: FutureWarning: Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\rax = sns.violinplot(data=calls.sort_values(\"CVDOW\"),\r","date":"2024-08-13","objectID":"/datalab3/:6:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Question 2d Based on your line plot and our violin plot above, what observations can you make about the patterns of calls? Here are some dimensions to consider: Are there more calls in the day or at night? What are the most and least popular times? Do call patterns vary by day of the week? ","date":"2024-08-13","objectID":"/datalab3/:7:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Question 3 In this last part of the lab, let’s extract the GPS coordinates (latitude, longitude) from the Block_Location of each record. # an example block location entry calls.loc[4, 'Block_Location'] '2700 BLOCK GARBER ST\\nBerkeley, CA\\n(37.86066, -122.253407)'\r","date":"2024-08-13","objectID":"/datalab3/:8:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Question 3a: Regular Expressions Use regular expressions to create a dataframe calls_lat_lon that has two columns titled Lat and Lon, containing the respective latitude and longitude of each record in calls. You should use the Block_Location column to extract the latitude and longitude coordinates. Hint: Check out the Series.str.extract documentation. calls_lat_lon = calls['Block_Location'].str.extract(r'(\\d+\\.\\d+),\\s([-]*\\d+\\.\\d+)') # 注意捕获组涵盖范围！ calls_lat_lon.columns = ['Lat', 'Lon'] calls_lat_lon.head(10) len(calls_lat_lon) 2632\rgrader.check(\"q3a\") q3a passed! 🚀 ","date":"2024-08-13","objectID":"/datalab3/:9:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Question 3b: Join Tables Let’s include the GPS data into our calls data. In the below cell, use calls_lat_lon to add two new columns called Lat and Lon to the calls dataframe. Hint: pd.merge (documentation) could be useful here. Note that the order of records in calls and calls_lat_lon are the same. import pandas as pd # 创建两个长度相同的DataFrame df1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]}) df2 = pd.DataFrame({'C': [7, 8, 9], 'D': [10, 11, 12]}) # 基于索引合并 # 使用'Key'列合! merged_df = pd.merge(df1, df2, left_index=True, right_index=True) # 根据你的需要选择合并类型 print(merged_df) A B C D\r0 1 4 7 10\r1 2 5 8 11\r2 3 6 9 12\r# # 用merge合并两个dataframe，注意此时没有共同列！只能索引拼接！ # print(calls.shape) # print(calls_lat_lon.shape) calls = pd.merge(calls, calls_lat_lon, left_index=True, right_index=True) # print(calls.shape) calls.sample(5) # random rows CASENO\rOFFENSE\rEVENTDT\rEVENTTM\rCVLEGEND\rCVDOW\rInDbDate\rBlock_Location\rBLKADDR\rCity\rState\rDay\rHour\rLat\rLon\r1173\r21024375\rDISTURBANCE\r06/02/2021 12:00:00 AM\r9:00\rDISORDERLY CONDUCT\r3\r06/15/2021 12:00:00 AM\r2020 KITTREDGE ST\\nBerkeley, CA\\n(37.868356, -...\r2020 KITTREDGE ST\rBerkeley\rCA\rWednesday\r9\r37.868356\r-122.268904\r2573\r21005894\rDISTURBANCE\r02/11/2021 12:00:00 AM\r14:12\rDISORDERLY CONDUCT\r4\r06/15/2021 12:00:00 AM\r2400 BLOCK DWIGHT WAY\\nBerkeley, CA\\n(37.86482...\r2400 BLOCK DWIGHT WAY\rBerkeley\rCA\rThursday\r14\r37.864826\r-122.260719\r990\r21022043\rROBBERY\r05/18/2021 12:00:00 AM\r20:15\rROBBERY\r2\r06/15/2021 12:00:00 AM\r2521 TELEGRAPH AVE\\nBerkeley, CA\\n(37.864705, ...\r2521 TELEGRAPH AVE\rBerkeley\rCA\rTuesday\r20\r37.864705\r-122.258463\r908\r21017272\rTHEFT MISD. (UNDER $950)\r04/19/2021 12:00:00 AM\r20:20\rLARCENY\r1\r06/15/2021 12:00:00 AM\r2800 BLOCK ADELINE ST\\nBerkeley, CA\\n(37.85811...\r2800 BLOCK ADELINE ST\rBerkeley\rCA\rMonday\r20\r37.858116\r-122.268002\r597\r21090359\rBURGLARY AUTO\r03/26/2021 12:00:00 AM\r0:00\rBURGLARY - VEHICLE\r5\r06/15/2021 12:00:00 AM\r2100 BLOCK 5TH ST\\nBerkeley, CA\\n(37.86626, -1...\r2100 BLOCK 5TH ST\rBerkeley\rCA\rFriday\r0\r37.86626\r-122.298335\rgrader.check(\"q3b\") q3b passed! 🚀 ","date":"2024-08-13","objectID":"/datalab3/:10:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Question 3c: Check for Missing Values It seems like every record has valid GPS coordinates: # just run this cell # fraction of valid lat/lon entries (~calls[[\"Lat\", \"Lon\"]].isna()).mean() Lat 1.0\rLon 1.0\rdtype: float64\rHowever, a closer examination of the data reveals something else. Here’s the first few records of our data again: calls.head(5) CASENO\rOFFENSE\rEVENTDT\rEVENTTM\rCVLEGEND\rCVDOW\rInDbDate\rBlock_Location\rBLKADDR\rCity\rState\rDay\rHour\rLat\rLon\r0\r21014296\rTHEFT MISD. (UNDER $950)\r04/01/2021 12:00:00 AM\r10:58\rLARCENY\r4\r06/15/2021 12:00:00 AM\rBerkeley, CA\\n(37.869058, -122.270455)\rNaN\rBerkeley\rCA\rThursday\r10\r37.869058\r-122.270455\r1\r21014391\rTHEFT MISD. (UNDER $950)\r04/01/2021 12:00:00 AM\r10:38\rLARCENY\r4\r06/15/2021 12:00:00 AM\rBerkeley, CA\\n(37.869058, -122.270455)\rNaN\rBerkeley\rCA\rThursday\r10\r37.869058\r-122.270455\r2\r21090494\rTHEFT MISD. (UNDER $950)\r04/19/2021 12:00:00 AM\r12:15\rLARCENY\r1\r06/15/2021 12:00:00 AM\r2100 BLOCK HASTE ST\\nBerkeley, CA\\n(37.864908,...\r2100 BLOCK HASTE ST\rBerkeley\rCA\rMonday\r12\r37.864908\r-122.267289\r3\r21090204\rTHEFT FELONY (OVER $950)\r02/13/2021 12:00:00 AM\r17:00\rLARCENY\r6\r06/15/2021 12:00:00 AM\r2600 BLOCK WARRING ST\\nBerkeley, CA\\n(37.86393...\r2600 BLOCK WARRING ST\rBerkeley\rCA\rSaturday\r17\r37.863934\r-122.250262\r4\r21090179\rBURGLARY AUTO\r02/08/2021 12:00:00 AM\r6:20\rBURGLARY - VEHICLE\r1\r06/15/2021 12:00:00 AM\r2700 BLOCK GARBER ST\\nBerkeley, CA\\n(37.86066,...\r2700 BLOCK GARBER ST\rBerkeley\rCA\rMonday\r6\r37.86066\r-122.253407\rThere is another field that tells us whether we have a valid Block_Location entry per record—i.e., with GPS coordinates (latitude, longitude) that match the listed block location. What is it? In the below cell, use the field you found to create a new dataframe, missing_lat_lon, that contains only the rows of calls that have invalid latitude and longitude data. Your new dataframe should have all the same columns of calls. missing_lat_lon = calls[calls['Lat'] == '37.869058'] # 理论上应该是lat和lon，但是这里只取了lat，然后注意类型隐式转换！ missing_lat_lon.head() # print(missing_lat_lon.shape) CASENO\rOFFENSE\rEVENTDT\rEVENTTM\rCVLEGEND\rCVDOW\rInDbDate\rBlock_Location\rBLKADDR\rCity\rState\rDay\rHour\rLat\rLon\r0\r21014296\rTHEFT MISD. (UNDER $950)\r04/01/2021 12:00:00 AM\r10:58\rLARCENY\r4\r06/15/2021 12:00:00 AM\rBerkeley, CA\\n(37.869058, -122.270455)\rNaN\rBerkeley\rCA\rThursday\r10\r37.869058\r-122.270455\r1\r21014391\rTHEFT MISD. (UNDER $950)\r04/01/2021 12:00:00 AM\r10:38\rLARCENY\r4\r06/15/2021 12:00:00 AM\rBerkeley, CA\\n(37.869058, -122.270455)\rNaN\rBerkeley\rCA\rThursday\r10\r37.869058\r-122.270455\r215\r21019124\rBURGLARY RESIDENTIAL\r04/30/2021 12:00:00 AM\r10:00\rBURGLARY - RESIDENTIAL\r5\r06/15/2021 12:00:00 AM\rBerkeley, CA\\n(37.869058, -122.270455)\rNaN\rBerkeley\rCA\rFriday\r10\r37.869058\r-122.270455\r260\r21000289\rVEHICLE STOLEN\r01/01/2021 12:00:00 AM\r12:00\rMOTOR VEHICLE THEFT\r5\r06/15/2021 12:00:00 AM\rBerkeley, CA\\n(37.869058, -122.270455)\rNaN\rBerkeley\rCA\rFriday\r12\r37.869058\r-122.270455\r633\r21013362\rBURGLARY AUTO\r03/27/2021 12:00:00 AM\r4:20\rBURGLARY - VEHICLE\r6\r06/15/2021 12:00:00 AM\rBerkeley, CA\\n(37.869058, -122.270455)\rNaN\rBerkeley\rCA\rSaturday\r4\r37.869058\r-122.270455\rgrader.check(\"q3c\") ","date":"2024-08-13","objectID":"/datalab3/:11:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Question 3d: Check Missing Values Now let us explore if there is a pattern to which types of records have missing latitude and longitude entries. We’ve implemented the plotting code for you below, but read through it and verify you understand what we’re doing (we’ve thrown in a bonus plt.subplots() call, documentation here). # just run this cell missing_by_time = (pd.to_datetime(missing_lat_lon['EVENTDT']) .value_counts() .sort_index() ) missing_by_crime = (missing_lat_lon['CVLEGEND'] .value_counts() / calls['CVLEGEND'].value_counts() ).dropna().sort_values(ascending=False) fig, ax = plt.subplots(2) ax[0].bar(missing_by_time.index, missing_by_time) ax[0].set_ylabel(\"Calls with Missing Data\") ax[1].barh(missing_by_crime.index, missing_by_crime) ax[1].set_xlabel(\"Fraction of Missing Data per Event Type\") fig.suptitle(\"Characteristics of Missing Lat/Lon Data\") plt.show() C:\\Users\\86135\\AppData\\Local\\Temp\\ipykernel_19968\\1218153592.py:2: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\rmissing_by_time = (pd.to_datetime(missing_lat_lon['EVENTDT'])\rBased on the plots above, are there any patterns among entries that are missing latitude/longitude data? The dataset information linked at the top of this notebook may also give more context. Type your answer here, replacing this text. ","date":"2024-08-13","objectID":"/datalab3/:12:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Question 3d: Explore The below cell plots a map of phonecalls by GPS coordinates (latitude, longitude); we drop missing location data. # just run this cell import folium import folium.plugins SF_COORDINATES = (37.87, -122.28) sf_map = folium.Map(location=SF_COORDINATES, zoom_start=13) locs = calls.drop(missing_lat_lon.index)[['Lat', 'Lon']].astype('float').values heatmap = folium.plugins.HeatMap(locs.tolist(), radius=10) sf_map.add_child(heatmap) Make this Notebook Trusted to load map: File -\u003e Trust Notebook","date":"2024-08-13","objectID":"/datalab3/:13:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Congratulations! Congrats! You are finished with this lab. To double-check your work, the cell below will rerun all of the autograder tests. grader.check_all() ","date":"2024-08-13","objectID":"/datalab3/:14:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":"Submission Make sure you have run all cells in your notebook in order before running the cell below, so that all images/graphs appear in the output. The cell below will generate a zip file for you to submit. Please save before exporting! # Save your notebook first, then run this cell to export your submission. grader.export(pdf=False) ","date":"2024-08-13","objectID":"/datalab3/:15:0","tags":["Pandas","Seaborn","Matplotlib"],"title":"DATA100-lab3: Data Cleaning and EDA","uri":"/datalab3/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab04.ipynb\") Lab 4: Visualization, Transformations, and KDEs ","date":"2024-08-13","objectID":"/datalab4/:0:0","tags":["Seaborn","Plotly"],"title":"DATA100-lab4: Visualization, Transformations, and KDEs","uri":"/datalab4/"},{"categories":["DATA100"],"content":"Objective In this lab you will get some practice plotting, applying data transformations, and working with kernel density estimators (KDEs). We will be working with data from the World Bank containing various statistics for countries and territories around the world. import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt import ds100_utils plt.style.use('fivethirtyeight') # Use plt.style.available to see more styles sns.set() sns.set_context(\"talk\") %matplotlib inline ","date":"2024-08-13","objectID":"/datalab4/:0:1","tags":["Seaborn","Plotly"],"title":"DATA100-lab4: Visualization, Transformations, and KDEs","uri":"/datalab4/"},{"categories":["DATA100"],"content":"Loading Data Let us load some World Bank data into a pd.DataFrame object named wb. wb = pd.read_csv(\"data/world_bank_misc.csv\", index_col=0) wb.head() Primary completion rate: Male: % of relevant age group: 2015\rPrimary completion rate: Female: % of relevant age group: 2015\rLower secondary completion rate: Male: % of relevant age group: 2015\rLower secondary completion rate: Female: % of relevant age group: 2015\rYouth literacy rate: Male: % of ages 15-24: 2005-14\rYouth literacy rate: Female: % of ages 15-24: 2005-14\rAdult literacy rate: Male: % ages 15 and older: 2005-14\rAdult literacy rate: Female: % ages 15 and older: 2005-14\rStudents at lowest proficiency on PISA: Mathematics: % of 15 year-olds: 2015\rStudents at lowest proficiency on PISA: Reading: % of 15 year-olds: 2015\r...\rAccess to improved sanitation facilities: % of population: 1990\rAccess to improved sanitation facilities: % of population: 2015\rChild immunization rate: Measles: % of children ages 12-23 months: 2015\rChild immunization rate: DTP3: % of children ages 12-23 months: 2015\rChildren with acute respiratory infection taken to health provider: % of children under age 5 with ARI: 2009-2016\rChildren with diarrhea who received oral rehydration and continuous feeding: % of children under age 5 with diarrhea: 2009-2016\rChildren sleeping under treated bed nets: % of children under age 5: 2009-2016\rChildren with fever receiving antimalarial drugs: % of children under age 5 with fever: 2009-2016\rTuberculosis: Treatment success rate: % of new cases: 2014\rTuberculosis: Cases detection rate: % of new estimated cases: 2015\rAfghanistan\rNaN\rNaN\rNaN\rNaN\r62.0\r32.0\r45.0\r18.0\rNaN\rNaN\r...\r21.0\r32.0\r68.0\r78.0\r62.0\r41.0\r4.6\r11.8\r87.0\r58.0\rAlbania\r108.0\r105.0\r97.0\r97.0\r99.0\r99.0\r98.0\r96.0\r26.0\r7.0\r...\r78.0\r93.0\r98.0\r98.0\r70.0\r63.0\rNaN\rNaN\r88.0\r76.0\rAlgeria\r106.0\r105.0\r68.0\r85.0\r96.0\r92.0\r83.0\r68.0\r51.0\r11.0\r...\r80.0\r88.0\r95.0\r95.0\r66.0\r42.0\rNaN\rNaN\r88.0\r80.0\rAmerican Samoa\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\r...\r61.0\r63.0\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\r87.0\rAndorra\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\rNaN\r...\r100.0\r100.0\r96.0\r97.0\rNaN\rNaN\rNaN\rNaN\r83.0\r87.0\r5 rows × 45 columns This table contains some interesting columns. Take a look: list(wb.columns) ['Primary completion rate: Male: % of relevant age group: 2015',\r'Primary completion rate: Female: % of relevant age group: 2015',\r'Lower secondary completion rate: Male: % of relevant age group: 2015',\r'Lower secondary completion rate: Female: % of relevant age group: 2015',\r'Youth literacy rate: Male: % of ages 15-24: 2005-14',\r'Youth literacy rate: Female: % of ages 15-24: 2005-14',\r'Adult literacy rate: Male: % ages 15 and older: 2005-14',\r'Adult literacy rate: Female: % ages 15 and older: 2005-14',\r'Students at lowest proficiency on PISA: Mathematics: % of 15 year-olds: 2015',\r'Students at lowest proficiency on PISA: Reading: % of 15 year-olds: 2015',\r'Students at lowest proficiency on PISA: Science: % of 15 year-olds: 2015',\r'Population: millions: 2016',\r'Surface area: sq. km thousands: 2016',\r'Population density: people per sq. km: 2016',\r'Gross national income, Atlas method: $ billions: 2016',\r'Gross national income per capita, Atlas method: $: 2016',\r'Purchasing power parity gross national income: $ billions: 2016',\r'per capita: $: 2016',\r'Gross domestic product: % growth : 2016',\r'per capita: % growth: 2016',\r'Prevalence of smoking: Male: % of adults: 2015',\r'Prevalence of smoking: Female: % of adults: 2015',\r'Incidence of tuberculosis: per 100,000 people: 2015',\r'Prevalence of diabetes: % of population ages 20 to 79: 2015',\r'Incidence of HIV: Total: % of uninfected population ages 15-49: 2015',\r'Prevalence of HIV: Total: % of population ages 15-49: 2015',\r\"Prevalence of HIV: Women's share of population ages 15+ living with HIV: %: 2015\",\r'Prevalence of HIV: Youth, Male: % of population ages 15-24: 2015',\r'Prevalence of HIV: Youth, Female: % of population ages 15-24: 2015',\r'Antiretroviral therapy coverage: % of people living w","date":"2024-08-13","objectID":"/datalab4/:1:0","tags":["Seaborn","Plotly"],"title":"DATA100-lab4: Visualization, Transformations, and KDEs","uri":"/datalab4/"},{"categories":["DATA100"],"content":"Question 1a Suppose we wanted to build a histogram of our data to understand the distribution of literacy rates and income per capita individually. We can use countplot in seaborn to create bar charts from categorical data. sns.countplot(x = \"lit\", data = df) plt.xlabel(\"Combined literacy rate: % ages 15 and older: 2005-14\") plt.title('World Bank Combined Adult Literacy Rate') Text(0.5, 1.0, 'World Bank Combined Adult Literacy Rate')\rsns.countplot(x = \"inc\", data = df) plt.xlabel('Gross national income per capita, Atlas method: $: 2016') plt.title('World Bank Gross National Income Per Capita') Text(0.5, 1.0, 'World Bank Gross National Income Per Capita')\rIn the cell below, explain why countplot is NOT the right tool for visualizing the distribution of our data. It is so overwhelming! And ugly! ","date":"2024-08-13","objectID":"/datalab4/:2:0","tags":["Seaborn","Plotly"],"title":"DATA100-lab4: Visualization, Transformations, and KDEs","uri":"/datalab4/"},{"categories":["DATA100"],"content":"Question 1b In the cell below, create a plot of income per capita (the second plot above) using the histplot function. As above, you should have two subplots, where the left subplot is literacy, and the right subplot is income. Don’t forget to title the plot and label axes! Hint: Copy and paste from above to start. sns.histplot(x = \"inc\", data = df) plt.xlabel('Gross national income per capita, Atlas method: $: 2016') plt.title('World Bank Gross National Income Per Capita'); You should see histograms that show the counts of how many data points appear in each bin. distplot uses a heuristic called the Freedman-Diaconis rule to automatically identify the best bin sizes, though it is possible to set the bins yourself (we won’t). In the cell below, we explore overlaying a rug plot on top of a histogram using rugplot. Note that the rug plot is hard to see. sns.histplot(x=\"inc\", data = df) sns.rugplot(x=\"inc\", data = df) plt.xlabel('Gross national income per capita, Atlas method: $: 2016') plt.title('World Bank Gross National Income Per Capita') Text(0.5, 1.0, 'World Bank Gross National Income Per Capita')\rOne way to make it easier to see the difference between the rug plot and the bars is to set a different color, for example: sns.histplot(x=\"inc\", data = df, color = \"lightsteelblue\") sns.rugplot(x=\"inc\", data = df) plt.xlabel('Gross national income per capita, Atlas method: $: 2016') plt.title('World Bank Gross National Income Per Capita') Text(0.5, 1.0, 'World Bank Gross National Income Per Capita')\rThere is also another function called kdeplot which plots a Kernel Density Estimate as described in class, and covered in more detail later in this lab. Rather than manually calling histplot, rugplot, and kdeplot to plot histograms, rug plots, and KDE plots, respectively, we can instead use displot, which can simultaneously plot histogram bars, a rug plot, and a KDE plot, and adjust all the colors automatically for visbility. Using the documentation for displot (Link), make a plot of the income data that includes a histogram, rug plot, and KDE plot. Hint: You’ll need to set two parameters to True. sns.displot(x='inc', data=df, kde=True, rug=True) plt.xlabel('Gross national income per capita, Atlas method: $: 2016') # 太长了，显示不全 plt.title('World Bank Gross National Income Per Capita') Text(0.5, 1.0, 'World Bank Gross National Income Per Capita')\rYou should see roughly the same histogram as before. However, now you should see an overlaid smooth line. This is the kernel density estimate discussed in class. Above, the y-axis is labeled by the counts. We can also label the y-axis by the density. An example is given below, this time using the literacy data from the beginning of this lab. sns.displot(x=\"lit\", data = df, rug = True, kde = True, stat = \"density\") plt.xlabel(\"Adult literacy rate: Combined: % ages 15 and older: 2005-14\") plt.title('World Bank Combined Adult Literacy Rate') Text(0.5, 1.0, 'World Bank Combined Adult Literacy Rate')\rObservations: You’ll also see that the y-axis value is no longer the count. Instead it is a value such that the total area in the histogram is 1. For example, the area of the last bar is approximately 22.22 * 0.028 = 0.62 The KDE is a smooth estimate of the distribution of the given variable. The area under the KDE is also 1. While it is not obvious from the figure, some of the area under the KDE is beyond the 100% literacy. In other words, the KDE is non-zero for values greater than 100%. This, of course, makes no physical sense. Nonetheless, it is a mathematical feature of the KDE. We’ll talk more about KDEs later in this lab. ","date":"2024-08-13","objectID":"/datalab4/:3:0","tags":["Seaborn","Plotly"],"title":"DATA100-lab4: Visualization, Transformations, and KDEs","uri":"/datalab4/"},{"categories":["DATA100"],"content":"Question 1c Looking at the income data, it is difficult to see the distribution among low income countries because they are all scrunched up at the left side of the plot. The KDE also has a problem where the density function has a lot of area below 0. Transforming the inc data logarithmically gives us a more symmetric distribution of values. This can make it easier to see patterns. In addition, summary statistics like the mean and standard deviation (square-root of the variance) are more stable with symmetric distributions. In the cell below, make a distribution plot of inc with the data transformed using np.log10 and kde=True. If you want to see the exact counts, just set kde=False. If you don’t specify the kde parameter, it is by default set to True. Hint: Unlike the examples above, you can pass a series to the displot function, i.e. rather than passing an entire DataFrame as data and a column as x, you can instead pass a series. ax = sns.displot(data=np.log10(df['inc']), kde=True, color='blue') plt.title('World Bank Gross National Income Per Capita') plt.ylabel('Density') plt.xlabel('Log Gross national income per capita, Atlas method: $: 2016'); When a distribution has a long right tail, a log-transformation often does a good job of symmetrizing the distribution, as it did here. Long right tails are common with variables that have a lower limit on the values. On the other hand, long left tails are common with distributions of variables that have an upper limit, such as percentages (can’t be higher than 100%) and GPAs (can’t be higher than 4). That is the case for the literacy rate. Typically taking a power-transformation such as squaring or cubing the values can help symmetrize the left skew distribution. In the cell below, we will make a distribution plot of lit with the data transformed using a power, i.e., raise lit to the 2nd, 3rd, and 4th power. We plot the transformation with the 4th power below. ax = sns.displot((df['lit']**4), kde = True) # 经典向量化numpy plt.ylabel('Density') plt.xlabel(\"Adult literacy rate: Combined: % ages 15 and older: 2005-14\") plt.title('World Bank Combined Adult Literacy Rate (4th power)', pad=30); ","date":"2024-08-13","objectID":"/datalab4/:4:0","tags":["Seaborn","Plotly"],"title":"DATA100-lab4: Visualization, Transformations, and KDEs","uri":"/datalab4/"},{"categories":["DATA100"],"content":"Question 1d If we want to examine the relationship between the female adult literacy rate and the gross national income per capita, we need to make a scatter plot. In the cell below, create a scatter plot of untransformed income per capita and literacy rate using the sns.scatterplot function. Make sure to label both axes using plt.xlabel and plt.ylabel. sns.scatterplot(x=df['lit'], y=df['inc']) plt.xlabel(\"Adult literacy rate: Combined: % ages 15 and older\") plt.ylabel('Gross national income per capita (non-log scale)') plt.title('World Bank: Gross National Income Per Capita vs\\n Combined Adult Literacy Rate'); We can better assess the relationship between two variables when they have been straightened because it is easier for us to recognize linearity. In the cell below, we see a scatter plot of log-transformed income per capita against literacy rate. sns.scatterplot(x = df['lit'], y = np.log10(df['inc'])) plt.xlabel(\"Adult literacy rate: Combined: % ages 15 and older\") plt.ylabel('Gross national income per capita (log scale)') plt.title('World Bank: Gross National Income Per Capita vs\\n Combined Adult Literacy Rate'); ","date":"2024-08-13","objectID":"/datalab4/:5:0","tags":["Seaborn","Plotly"],"title":"DATA100-lab4: Visualization, Transformations, and KDEs","uri":"/datalab4/"},{"categories":["DATA100"],"content":"双变换，思路打开 This scatter plot looks better. The relationship is closer to linear. We can think of the log-linear relationship between x and y, as follows: a constant change in x corresponds to a percent (scaled) change in y. We can also see that the long left tail of literacy is represented in this plot by a lot of the points being bunched up near 100. Try squaring literacy and taking the log of income. Does the plot look better? plt.figure(figsize=(10,5)) sns.scatterplot(x = (df['lit']**2), y = np.log10(df['inc'])) plt.xlabel(\"Adult literacy rate: Combined: % ages 15 and older\") plt.ylabel('Gross national income per capita (log vs. ^2)') plt.title('World Bank: Gross National Income Per Capita vs\\n Combined Adult Literacy Rate'); Choosing the best transformation for a relationship is often a balance between keeping the model simple and straightening the scatter plot. Part 2: Kernel Density Estimation In this part of the lab you will develop a deeper understanding of how kernel density estimation works. Explain KDE briefly within the lab ","date":"2024-08-13","objectID":"/datalab4/:6:0","tags":["Seaborn","Plotly"],"title":"DATA100-lab4: Visualization, Transformations, and KDEs","uri":"/datalab4/"},{"categories":["DATA100"],"content":"Overview Kernel density estimation is used to estimate a probability density function (i.e. a density curve) from a set of data. Just like a histogram, a density function’s total area must sum to 1. KDE centrally revolves around this idea of a “kernel”. A kernel is a function whose area sums to 1. The three steps involved in building a kernel density estimate are: Placing a kernel at each observation Normalizing kernels so that the sum of their areas is 1 Summing all kernels together 😋 The end result is a function, that takes in some value x and returns a density estimate at the point x. When constructing a KDE, there are several choices to make regarding the kernel. Specifically, we need to choose the function we want to use as our kernel, as well as a bandwidth parameter, which tells us how wide or narrow each kernel should be. We will explore these ideas now. Suppose we have 3 data points with values 2, 4, and 9. We can compute the (useless) histogram with a KDE as shown below. data3pts = np.array([2, 4, 9]) sns.displot(data3pts, kde = True, stat = \"density\"); To understand how KDEs are computed, we need to see the KDE outside the given range. The easiest way to do this is to use an old function called distplot. During the Spring 2022 offering of this course, distplot was still a working function in Seaborn, but it will be removed at a future date. If you get an error that says that distplot is not a valid function, sorry, you are too far in the future to do this lab exercise. sns.distplot(data3pts, kde = True); C:\\Users\\86135\\AppData\\Local\\Temp\\ipykernel_9696\\4279347623.py:1: UserWarning: `distplot` is a deprecated function and will be removed in seaborn v0.14.0.\rPlease adapt your code to use either `displot` (a figure-level function with\rsimilar flexibility) or `histplot` (an axes-level function for histograms).\rFor a guide to updating your code to use the new functions, please see\rhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\rsns.distplot(data3pts, kde = True);\r调整bandwidth One question you might be wondering is how the kernel density estimator decides how “wide” each point should be. It turns out this is a parameter you can set called bw, which stands for bandwith. For example, the code below gives a bandwith value of 0.5 to each data point. You’ll see the resulting KDE is quite different. Try experimenting with different values of bandwidth and see what happens. sns.distplot(data3pts, kde = True, kde_kws = {\"bw\": 0.5}); C:\\Users\\86135\\AppData\\Local\\Temp\\ipykernel_9696\\942060009.py:1: UserWarning: `distplot` is a deprecated function and will be removed in seaborn v0.14.0.\rPlease adapt your code to use either `displot` (a figure-level function with\rsimilar flexibility) or `histplot` (an axes-level function for histograms).\rFor a guide to updating your code to use the new functions, please see\rhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\rsns.distplot(data3pts, kde = True, kde_kws = {\"bw\": 0.5});\rd:\\miniconda3\\envs\\ds100\\Lib\\site-packages\\seaborn\\distributions.py:2496: UserWarning: The `bw` parameter is deprecated in favor of `bw_method` and `bw_adjust`.\rSetting `bw_method=0.5`, but please see the docs for the new parameters\rand update your code. This will become an error in seaborn v0.14.0.\rkdeplot(**{axis: a}, ax=ax, color=kde_color, **kde_kws)\r","date":"2024-08-13","objectID":"/datalab4/:6:1","tags":["Seaborn","Plotly"],"title":"DATA100-lab4: Visualization, Transformations, and KDEs","uri":"/datalab4/"},{"categories":["DATA100"],"content":"Question 2a As mentioned above, the kernel density estimate (KDE) is just the sum of a bunch of copies of the kernel, each centered on our data points. The default kernel used by the distplot function (as well as kdeplot) is the Gaussian kernel, given by: $$\\Large K_\\alpha(x, z) = \\frac{1}{\\sqrt{2 \\pi \\alpha^2}} \\exp\\left(-\\frac{(x - z)^2}{2 \\alpha ^2} \\right) $$ We’ve implemented the Gaussian kernel for you in Python below. Here, alpha is the smoothing or bandwidth parameter $\\alpha$ for the KDE, z is the center of the Gaussian (i.e. a data point or an array of data points), and x is an array of values of the variable whose distribution we are plotting. def gaussian_kernel(alpha, x, z): return 1.0/np.sqrt(2. * np.pi * alpha**2) * np.exp(-(x - z) ** 2 / (2.0 * alpha**2)) For example, we can plot the Gaussian kernel centered at 9 with $\\alpha$ = 0.5 as below: xs = np.linspace(-2, 12, 200) alpha=0.5 kde_curve = [gaussian_kernel(alpha, x, 9) for x in xs] plt.plot(xs, kde_curve); In the cell below, plot the 3 kernel density functions corresponding to our 3 data points on the same axis. Use an alpha value of 0.5. Recall that our three data points are 2, 4, and 9. Note: Make sure to normalize your kernels! This means that the area under each of your kernels should be $\\frac{1}{3}$ since there are three data points. You don’t have to use the following hints, but they might be helpful in simplifying your code. Hint: The gaussian_kernel function can also take a numpy array as an argument for z. Hint: To plot multiple plots at once, you can use plt.plot(xs, y) with a two dimensional array as y. xs = np.linspace(-2, 12, 200) alpha=0.5 kde_curve = [1/3*gaussian_kernel(alpha, x, data3pts) for x in xs] # 注意“正则化”！ plt.plot(xs, kde_curve); In the cell below, we see a plot that shows the sum of all three of the kernels above. The plot resembles the kde shown when you called distplot function with bandwidth 0.5 earlier. The area under the final curve will be 1 since the area under each of the three normalized kernels is $\\frac{1}{3}$. xs = np.linspace(-2, 12, 200) alpha=0.5 kde_curve = np.array([1/3 * gaussian_kernel(alpha, x, data3pts) for x in xs]) plt.plot(xs, np.sum(kde_curve, axis = 1)); # 叠加曲线! Recall that earlier we plotted the kernel density estimation for the logarithm of the income data, as shown again below. ax = sns.displot(np.log10(df['inc']), kind = \"kde\", rug = True) plt.title('World Bank Gross National Income Per Capita') plt.xlabel('Log Gross national income per capita, Atlas method: $: 2016'); In the cell below, a similar plot is shown using what was done in 2a. Try out different values of alpha in {0.1, 0.2, 0.3, 0.4, 0.5}. You will see that when alpha=0.2, the graph matches the previous graph well, except that the displot function hides the KDE values outside the range of the available data. xs = np.linspace(1, 6, 200) alpha=0.2 kde_curve = np.array([1/len(df['inc']) * gaussian_kernel(alpha, x, np.log10(df['inc'])) for x in xs]) plt.title('World Bank Gross National Income Per Capita') plt.xlabel('Log Gross national income per capita, Atlas method: $: 2016') plt.plot(xs, np.sum(kde_curve, axis = 1)); ","date":"2024-08-13","objectID":"/datalab4/:7:0","tags":["Seaborn","Plotly"],"title":"DATA100-lab4: Visualization, Transformations, and KDEs","uri":"/datalab4/"},{"categories":["DATA100"],"content":"Question 2b In your answers above, you hard-coded a lot of your work. In this problem, you’ll build a more general kernel density estimator function. Implement the KDE function which computes: $$\\Large f_\\alpha(x) = \\frac{1}{n} \\sum_{i=1}^n K_\\alpha(x, z_i) $$ Where $z_i$ are the data, $\\alpha$ is a parameter to control the smoothness, and $K_\\alpha$ is the kernel density function passed as kernel. def kde(kernel, alpha, x, data): \"\"\" Compute the kernel density estimate for the single query point x. Args: kernel: a kernel function with 3 parameters: alpha, x, data alpha: the smoothing parameter to pass to the kernel x: a single query point (in one dimension) data: a numpy array of data points Returns: The smoothed estimate at the query point x \"\"\" return sum(kernel(alpha, x, zi) for zi in data) / len(data) grader.check(\"q2b\") Assuming you implemented kde correctly, the code below should generate the kde of the log of the income data as before. df['trans_inc'] = np.log10(df['inc']) xs = np.linspace(df['trans_inc'].min(), df['trans_inc'].max(), 1000) curve = [kde(gaussian_kernel, alpha, x, df['trans_inc']) for x in xs] plt.hist(df['trans_inc'], density=True, color='orange') plt.title('World Bank Gross National Income Per Capita') plt.xlabel('Log Gross national income per capita, Atlas method: $: 2016'); plt.plot(xs, curve, 'k-'); And the code below should show a 3 x 3 set of plots showing the output of the kde for different alpha values. small to large plt.figure(figsize=(15,15)) alphas = np.arange(0.2, 2.0, 0.2) for i, alpha in enumerate(alphas): plt.subplot(3, 3, i+1) xs = np.linspace(df['trans_inc'].min(), df['trans_inc'].max(), 1000) curve = [kde(gaussian_kernel, alpha, x, df['trans_inc']) for x in xs] plt.hist(df['trans_inc'], density=True, color='orange') plt.plot(xs, curve, 'k-') plt.show() Let’s take a look at another kernel, the Boxcar kernel. def boxcar_kernel(alpha, x, z): return (((x-z)\u003e=-alpha/2)\u0026((x-z)\u003c=alpha/2))/alpha Run the cell below to enable interactive plots. It should give you a green ‘OK’ when it’s finished. from ipywidgets import interact !jupyter nbextension enable --py widgetsnbextension # 这个是要notebook降级处理的命令 Enabling notebook extension jupyter-js-widgets/extension...\r- Validating: ok\rNow, we can plot the Boxcar and Gaussian kernel functions to see what they look like. x = np.linspace(-10,10,1000) def f(alpha): plt.plot(x, boxcar_kernel(alpha,x,0), label='Boxcar') plt.plot(x, gaussian_kernel(alpha,x,0), label='Gaussian') plt.legend(title='Kernel Function') plt.show() interact(f, alpha=(1,10,0.1)); Using the interactive plot below compare the the two kernel techniques: (Generating the KDE plot is slow, so you may expect some latency after you move the slider) xs = np.linspace(df['trans_inc'].min(), df['trans_inc'].max(), 1000) def f(alpha_g, alpha_b): plt.hist(df['trans_inc'], density=True, color='orange') g_curve = [kde(gaussian_kernel, alpha_g, x, df['trans_inc']) for x in xs] plt.plot(xs, g_curve, 'k-', label='Gaussian') b_curve = [kde(boxcar_kernel, alpha_b, x, df['trans_inc']) for x in xs] plt.plot(xs, b_curve, 'r-', label='Boxcar') plt.legend(title='Kernel Function') plt.show() interact(f, alpha_g=(0.01,.5,0.01), alpha_b=(0.01,3,0.1)); interactive(children=(FloatSlider(value=0.25, description='alpha_g', max=0.5, min=0.01, step=0.01), FloatSlide\rBriefly compare and contrast the Gaussian and Boxcar kernels in the cell below. How do the two kernels relate with each other for the same alpha value? 圆滑问题 Congrats! You are finished with this assignment. ","date":"2024-08-13","objectID":"/datalab4/:8:0","tags":["Seaborn","Plotly"],"title":"DATA100-lab4: Visualization, Transformations, and KDEs","uri":"/datalab4/"},{"categories":["DATA100"],"content":"Optional–px用法讲解 Below are some examples using plotly. Recall that this is Josh’s preferred plotting library, though it is not officially covered nor required in this class. This is purely for your future reference if you decide to use plotly on your own. import plotly.express as px px.histogram(df, x = \"lit\") In my opinion, distribution plots are the one place where plotly falls short of seaborn. For example, if we want a rug, KDE, and histogram, the code below does this in plotly. I’m not personally a fan. import plotly.figure_factory as ff ff.create_distplot([df[\"lit\"]], [\"lit\"]) By contrast, I think many of plotly’s other features are far superior to seaborn. For example, consider the interactive scatterplot below, where one can mouseover each datapoint in order to see the identity of each country. px.scatter(df, x = \"lit\", y = \"inc\", hover_name = df.index, labels={ \"lit\": \"Adult literacy rate: Combined: % ages 15 and older\", \"inc\": \"Gross national income per capita\" }, title=\"World Bank: Gross National Income Per Capita vs\\n Combined Adult Literacy Rate\" ) Naturally there are ways to adjust figure size, text size, marker, etc, but they are not covered here. I just wanted to give you a small taste of plotly. ","date":"2024-08-13","objectID":"/datalab4/:9:0","tags":["Seaborn","Plotly"],"title":"DATA100-lab4: Visualization, Transformations, and KDEs","uri":"/datalab4/"},{"categories":["CS186"],"content":"Index 竟然是一种数据结构？ ","date":"2024-08-11","objectID":"/databasel5/:1:0","tags":null,"title":"CS186-L5: B+ Trees","uri":"/databasel5/"},{"categories":["CS186"],"content":"search and insertion in ISAM indexed sequential access method 注意建立了许多索引，沿用BST的思想，但是insert的时候会出现overflow pages （IBM in 1960s） ","date":"2024-08-11","objectID":"/databasel5/:2:0","tags":null,"title":"CS186-L5: B+ Trees","uri":"/databasel5/"},{"categories":["CS186"],"content":"B+ Tree 和B Tree的区别在于：B+只有叶子存放数据，而B Tree的中间节点也存放数据。 几乎和上面一样，但是多了 dynamic tree index always balanced support efficient insertions and deletions grows at root not leaves 注意: 占有率：几乎半满，除了root 底部DLL $max\\ fan\\ out = 2d + 1$ 工业实际情况 🤔 ","date":"2024-08-11","objectID":"/databasel5/:3:0","tags":null,"title":"CS186-L5: B+ Trees","uri":"/databasel5/"},{"categories":["CS186"],"content":"B+ Tree Operations ","date":"2024-08-11","objectID":"/databasel5/:4:0","tags":null,"title":"CS186-L5: B+ Trees","uri":"/databasel5/"},{"categories":["CS186"],"content":"search, 同上 ","date":"2024-08-11","objectID":"/databasel5/:4:1","tags":null,"title":"CS186-L5: B+ Trees","uri":"/databasel5/"},{"categories":["CS186"],"content":"insert 没有overflow，直接插入 满了，分裂成两个节点，中间节点存放 中间key（过程中可能是右边最小的那个key），左右节点存放左右key 递归向上分裂，直到根节点 叶子 $\\xrightarrow{copy}$ 父节点 ，父节点 $\\xrightarrow{push}$ 新父节点 ","date":"2024-08-11","objectID":"/databasel5/:4:2","tags":null,"title":"CS186-L5: B+ Trees","uri":"/databasel5/"},{"categories":["CS186"],"content":"delete 😉 ","date":"2024-08-11","objectID":"/databasel5/:4:3","tags":null,"title":"CS186-L5: B+ Trees","uri":"/databasel5/"},{"categories":["CS186"],"content":"bulk loading 批量加载 精髓在于先排序，后构建 time-stamp: 01h09min02s ","date":"2024-08-11","objectID":"/databasel5/:4:4","tags":null,"title":"CS186-L5: B+ Trees","uri":"/databasel5/"},{"categories":["CS186"],"content":"cost model and analysis 基本量化指标定义 基本假设 single record insert and delete equality selection - exactly one match for heap files: insert always appends for sorted files: packed: files compacted after deletions sorted according to search key 以下是计算时间，类似渐进记法，但是有细节 😎 side note: $\\times D$ 是简化了每次“操作”的时间，“操作”指的是“读”与“写” 考虑随机变量 操作次数 $N$ 及其 $\\mathbb{E}(N)$ Equality Search对于sorted files: $$ \\begin{equation} \\begin{aligned} \\mathbb{E}(N) \u0026= \\sum_{i=1}^{log_2B} i \\times \\frac{2^{i-1}}{B} \\notag\\ \u0026= log_2B - \\frac{B-1}{B}\\ \u0026\\approx log_2B \\end{aligned} \\end{equation} $$ Range Search借鉴Equality Search的思想，对于heap files，always go through to find all；对于sorted files，二分查找下界然后 scan right Insert对于heap files: 假设知道free space，一个读，一个写；对于sorted files: 假设中间插入，读写各占 $B/2$ Delete同样借鉴Equality Search的思想，对于heap files， $+1$ 是删除（“写”）；对于sorted files， 过程和Insert一样 time-stamp: 01h13min26s ","date":"2024-08-11","objectID":"/databasel4/:1:0","tags":null,"title":"CS186-L4: Disks, Buffers, Files II","uri":"/databasel4/"},{"categories":["CS186"],"content":"big picture sql client -\u003e DBMS -\u003e database 🤓 ","date":"2024-08-11","objectID":"/databasel3/:1:0","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"DBMS parsing \u0026 optimization 执行SQL语句时，DBMS需要解析SQL语句，并将其转换为执行计划。优化器会根据统计信息、查询模式、索引等因素，选择最优的执行计划。 relational operators 处理数据流 or 关系运算符？ files and index management buffer management disk space management 事实上纵向还有两个模块：concurrency control和recovery。 省流：从RAM \u0026 DISK获取数据非常慢， 相对于CPU ","date":"2024-08-11","objectID":"/databasel3/:1:1","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"Disk 注意sector, disk head， 其中后者似乎只能单次读写 ","date":"2024-08-11","objectID":"/databasel3/:1:2","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"access time ","date":"2024-08-11","objectID":"/databasel3/:1:3","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"flash SSD 注意： read很快，随着数据变大，可以预测 write很慢，slower for random，写入放大 ","date":"2024-08-11","objectID":"/databasel3/:2:0","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"disk space management ","date":"2024-08-11","objectID":"/databasel3/:3:0","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"block level storage block: unit of transfer for disk read/write (64~128KB in 2018) page: a common synonym for block, in some contexts, it means in RAM ","date":"2024-08-11","objectID":"/databasel3/:3:1","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"implementation talk to hardware directly 🤔 use file system (FS) 😀 always remember: next is fast ","date":"2024-08-11","objectID":"/databasel3/:3:2","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"files and representation important! 😎 tables stored in files consist of pages pages contain a collection of records ","date":"2024-08-11","objectID":"/databasel3/:4:0","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"DB files unordered heap files DLL是一种简单的实现heap file的方案，但是insert效率不高 😞 better: a page directory 注意header page is SLL ","date":"2024-08-11","objectID":"/databasel3/:4:1","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"layout of a page page header nums of records free space maybe a next/last pointer bitmaps, slot table (what is that? 🤔) 注意，是否records定长以及是否有free space决定了page layout ","date":"2024-08-11","objectID":"/databasel3/:5:0","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"fixed-length packed records now take a look at a fixed length records, packed page: ","date":"2024-08-11","objectID":"/databasel3/:5:1","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"fixed-length unpacked records same as before, but with unpacked records: ","date":"2024-08-11","objectID":"/databasel3/:5:2","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"variable-length records records can have different lengths 🤯 header -\u003e footer footer has a slot directory (read from right to left, has a pointer to the start of the free space) slot directory save slot, each slot has a pointer to the start of the record and the length of the record growing slot directory, 前后夹击 ","date":"2024-08-11","objectID":"/databasel3/:5:3","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"layout of records each record has a fixed type system catalog stores the SCHEMA no need to store the type of records catalog just a table 注意，以下讨论在字段（field）级别，不是record级别。 ","date":"2024-08-11","objectID":"/databasel3/:6:0","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"fixed-length records 类比数组，注意null存在就是空着，不是很compact ","date":"2024-08-11","objectID":"/databasel3/:6:1","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["CS186"],"content":"variable-length records 冗余配置按照定长处理 （padding） 类比CSV，每行记录不同长度，用分隔符分隔 a record header way ","date":"2024-08-11","objectID":"/databasel3/:6:2","tags":null,"title":"CS186-L3: Disk, Buffers, Files I","uri":"/databasel3/"},{"categories":["TOOLS"],"content":"原作者帖子？ COSTAR提示词框架是一个用于提升大语言模型（如GPT-3/4）生成结果质量的工具。这个框架的目标是通过提供详细和具体的提示，指导大语言模型生成更准确和有用的内容。以下是对CoSTAR提示词框架的详细介绍： COSTAR提示词框架是一种用于优化和提升大语言模型（如GPT-4）生成效果的方法。通过应用这个框架，可以更好地指导模型生成更加相关、准确和有用的内容。COSTAR 是一个首字母缩略词，每个字母代表了提示框架中的一个重要方面： Context（上下文）： 提供详细的背景信息和具体情境，帮助模型理解问题的具体需求。 示例：提供更多的上下文信息，使生成的内容更加符合预期。 Objective（目标）： 明确生成内容的目标和预期结果，帮助模型聚焦于特定任务。 示例：清晰地陈述希望模型生成何种类型的内容（如解释、总结、创建故事等）。 Style（风格）： 设定生成内容的语气、风格和格式，确保输出符合预期的风格。 示例：指定正式、非正式、幽默、学术等不同的风格。 Tone（语气）： 指定生成内容的情感基调，如友好、鼓励、警告等，以符合预期的交流效果。 示例：确定需要温和、严肃、轻松等不同的语气。 Audience（受众）： 明确生成内容的目标读者或观众，帮助模型调适内容的复杂度和适用性。 示例：区分是面向专业人士还是普通读者，使内容更具针对性。 Relevance（相关性）： 强调生成内容与主题的相关性，避免不必要的偏离和无关内容。 示例：确保模型生成的内容直接回答问题，避免偏题。 ","date":"2024-07-24","objectID":"/tools/costar/:0:0","tags":null,"title":"COSTAR提示词框架笔记","uri":"/tools/costar/"},{"categories":["TOOLS"],"content":"如何应用COSTAR提示词框架 上下文（Context）： 提供足够的背景信息。例如，如果需要生成关于特定历史事件的内容，可以先提供一些相关的历史背景。 请提供关于1969年阿波罗11号登月任务的详细描述。阿波罗11号是美国宇航局的一次任务，目的是将人类首次送上月球。 目标（Objective）： 明确生成内容的目标。例如，如果需要模型生成一篇介绍文章，可以明确说明这一点。 请写一篇关于可持续发展的介绍文章，重点介绍其重要性和主要策略。 风格（Style）： 指定生成内容的风格。例如，如果需要生成学术风格的文章，可以这样提示。 请以学术风格写一篇关于人工智能在医疗领域应用的论文。 语气（Tone）： 指定内容的语气。例如，如果希望内容具有激励性，可以明确说明。 请用鼓励的语气写一篇关于如何克服困难的文章。 受众（Audience）： 明确内容的受众。例如，如果内容是面向学生的，可以这样提示。 请为高中生写一篇关于气候变化的介绍文章。 相关性（Relevance）： 强调内容的相关性。例如，如果需要内容聚焦在某个主题，可以这样提示。 请写一篇关于电动车优势的文章，特别关注其对环境的积极影响。 ","date":"2024-07-24","objectID":"/tools/costar/:0:1","tags":null,"title":"COSTAR提示词框架笔记","uri":"/tools/costar/"},{"categories":["CS186"],"content":"怎么读懂SQL语句？ FROM WHERE, to eliminate rows SELECT GROUP BY HAVING, to eliminate groups DISTINCT ORDER BY, LIMIT, OFFSET等等格式化输出 Join Queries ","date":"2024-07-22","objectID":"/databasel2/:0:0","tags":null,"title":"CS186-L2: SQLⅡ","uri":"/databasel2/"},{"categories":["CS186"],"content":"cross product 生成所有的组合，然后过滤掉不符合条件的组合，但是低效 考虑以下sql，更加简洁 SELECT S.sid, sname, bid FROM Sailors AS S, Reserves AS R WHERE S.sid = R.sid ","date":"2024-07-22","objectID":"/databasel2/:1:0","tags":null,"title":"CS186-L2: SQLⅡ","uri":"/databasel2/"},{"categories":["CS186"],"content":"self join and more aliases SELECT x.sname, x.age, y.sname AS sname2, y.age AS age2 FROM Sailors AS x, Sailors AS y WHERE x.age \u003e y.age ","date":"2024-07-22","objectID":"/databasel2/:2:0","tags":null,"title":"CS186-L2: SQLⅡ","uri":"/databasel2/"},{"categories":["CS186"],"content":"inner/natural join where clause 🆙 🤓 看下面 select s.*, r.bid from sailors as s inner join reserves as r on s.sid = r.sid ","date":"2024-07-22","objectID":"/databasel2/:3:0","tags":null,"title":"CS186-L2: SQLⅡ","uri":"/databasel2/"},{"categories":["CS186"],"content":"left outer join returns all matched rows, and preserves all unmatched rows from the left table of the join clause NULL出现 FULL OUTER JOIN等等同理 select r.sid, r.bid, b.bname from reserves as r full outer join boats as b on r.bid = b.bid Arithmetic Expressions 注意SELECT和WHERE SELECT salary * 1.1 AS new_salary FROM Employees WHERE 2*salary \u003e 10000 use sql as calculator 🤓 SELECT log(1000) as three, exp(ln(2)) as two, cos(pi()) as zero, ln(2*3) = ln(2) + ln(3) as sanity; string functions old way 🤨 SELECT s.sname FROM Sailors AS s WHERE s.sname LIKE 'a_%' new way 😎 use regular expressions! SELECT s.sname FROM Sailors AS s WHERE s.sname ~ 'a.*' bool and combining SELECT r.sid FROM boats as b, reserves as r WHERE b.bid = r.bid AND (b.color = 'blue' OR b.color = 'green') 以上两者等价 看下面两个 SELECT r.sid FROM boats as b, reserves as r WHERE b.bid = r.bid AND (b.color = 'blue' AND b.color = 'green') return nothing 🤯 返回即预定了红船又预定了绿船的人 🤓 Set Operations ","date":"2024-07-22","objectID":"/databasel2/:4:0","tags":null,"title":"CS186-L2: SQLⅡ","uri":"/databasel2/"},{"categories":["CS186"],"content":"only set union, intersect, except, 返回的都是集合，没有重复 ","date":"2024-07-22","objectID":"/databasel2/:5:0","tags":null,"title":"CS186-L2: SQLⅡ","uri":"/databasel2/"},{"categories":["CS186"],"content":"multiset UNION ALL: 返回所有元素，包括重复元素 sum INTERSECT ALL: 返回交集，包括重复元素 min EXCEPT ALL: 返回差集，包括重复元素 minus Nested Queries subquery 😀 select s.sname from sailors as s where s.sid in (select r.sid from reserves as r where r.bid = 6767) NOT IN 同理即可 考虑EXISTS， 非空即可返回 另一个例子 select s.sname from sailors as s where exists (select * from reserves as r where r.sid = s.sid and r.bid = 6767) 具体来说，查询中包含了一个EXISTS条件，这个条件中的子查询是与主查询相关的。每当主查询处理Sailors表中的一行时，都会将该行中的sid值带入子查询中进行计算，以确定这行数据是否满足条件（即是否存在一条对应的Reserves记录）。这样，子查询的计算会随着Sailors表中行的不同而变化，因此需要为每一行重新计算。 这意味着，如果Sailors表中有很多行，子查询也会被执行很多次，这可能会影响查询的性能。 考虑ANY， ALL SELECT s.sname FROM sailors AS s WHERE s.age \u003e ANY (SELECT AVG(age) FROM sailors) 关系除法 这个PPT展示了一个关于“关系除法”（Relational Division）的SQL查询的例子，目的是寻找那些已经预订了所有船只的水手。通过这种查询，我们可以找到那些没有漏掉任何一艘船只预订的水手。 ","date":"2024-07-22","objectID":"/databasel2/:6:0","tags":null,"title":"CS186-L2: SQLⅡ","uri":"/databasel2/"},{"categories":["CS186"],"content":"理解步骤： 关系除法的定义： 关系除法是一种复杂的SQL查询操作，用于找到那些在一个集合中对所有元素都满足某个条件的记录。 在这个例子中，我们想找到那些预订了所有船只的水手。 查询的逻辑： 外层查询：SELECT S.sname FROM Sailors S：选择所有水手的名字。 NOT EXISTS子查询：这个部分是关键： WHERE NOT EXISTS ( SELECT B.bid FROM Boats B WHERE NOT EXISTS ( SELECT R.bid FROM Reserves R WHERE R.bid = B.bid AND R.sid = S.sid ) ) 逻辑解释： 首先，查询了所有的船只 (Boats B)。 对于每艘船，只要存在一艘船 (B.bid)，当前水手 (S.sid) 没有预订 (R.sid = S.sid AND R.bid = B.bid)，那么这个水手就会被排除。 如果对于某个水手，不存在这样一艘他没有预订的船（即NOT EXISTS的结果为真），那么这个水手就满足预订了所有船的条件。 结论： 最终的查询将会返回那些名字是水手并且预订了每一艘船的人。 ARGMAX find the sailor with the highest rating select * from sailors as s where s.rating \u003e= ALL (SELECT sailors.rating FROM sailors) select * from sailors as s where s.rating = (SELECT MAX(sailors.rating) FROM sailors) 注意下面这个 ☕ select * from sailors as s order by s.rating desc limit 1 ","date":"2024-07-22","objectID":"/databasel2/:6:1","tags":null,"title":"CS186-L2: SQLⅡ","uri":"/databasel2/"},{"categories":["CS186"],"content":"ARGMAX GROUP BY 提示：借助视图筛选 Creating Views 有时候不需要建立显式的views select b, c from boats as b, (select b.bid, count(*) from reserves as r, boats as b where r.bid = b.bid and b.color = 'blue' group by b.bid) as Reds(bid, c) where b.bid = Reds.bid 有时候CTE（common table expression）表示法更加简洁 注意WITH从句后面能建立多个视图，记得加上逗号！ NULL ","date":"2024-07-22","objectID":"/databasel2/:7:0","tags":null,"title":"CS186-L2: SQLⅡ","uri":"/databasel2/"},{"categories":["CS186"],"content":"NULL的比较 不要使用=，而是使用IS NULL或IS NOT NULL IS NULL : 左边是NULL IS NOT NULL : 左边不是NULL ","date":"2024-07-22","objectID":"/databasel2/:8:0","tags":null,"title":"CS186-L2: SQLⅡ","uri":"/databasel2/"},{"categories":["CS186"],"content":"NULL in boolean expressions 首先， 形如WHERE NULL是不合法的！ 三值逻辑表如下 ","date":"2024-07-22","objectID":"/databasel2/:9:0","tags":null,"title":"CS186-L2: SQLⅡ","uri":"/databasel2/"},{"categories":["CS186"],"content":"NULL in aggregation functions 接下来就是implement! 😀 ","date":"2024-07-22","objectID":"/databasel2/:10:0","tags":null,"title":"CS186-L2: SQLⅡ","uri":"/databasel2/"},{"categories":["CS186"],"content":"大纲进程： sheet SQL I ","date":"2024-07-22","objectID":"/databasel1/:0:0","tags":null,"title":"CS186-L1: Introduction + SQL I","uri":"/databasel1/"},{"categories":["CS186"],"content":"pros and cons ","date":"2024-07-22","objectID":"/databasel1/:1:0","tags":null,"title":"CS186-L1: Introduction + SQL I","uri":"/databasel1/"},{"categories":["CS186"],"content":"relational Terminology and concepts database: set of name relations relation(table): schema: descriptions “metadata” fixed, unique attribute names, atomic types instance: set of data 符合description often changed, can duplicate multiset of tuples or “rows” attribute (column,field) tuple (row,record),怀疑一些python概念也来自于此 ","date":"2024-07-22","objectID":"/databasel1/:2:0","tags":null,"title":"CS186-L1: Introduction + SQL I","uri":"/databasel1/"},{"categories":["CS186"],"content":"DDL (Data Definition Language) CREATE TABLE myTable ( ID INTEGER, myName CHAR(50), Age INTEGER, Salary FLOAT, PRIMARY KEY (ID, myName), FOREIGN KEY (ID) REFERENCES myOtherTable(ID), FOREIGN KEY (myName) REFERENCES myOtherTable(myName) ); SELECT [DISTINCT] \u003ccolumn expression list\u003e FROM \u003csingle_table\u003e [WHERE \u003cpredicate\u003e] ORDER BY Lexicographic order by default 字典序 LIMIT Aggregation functions AVG: average COUNT: count the number of rows MAX: maximum value MIN: minimum value SUM: sum of values SELECT AVG(Salary) FROM myTable; GROUP BY HAVING SELECT AVG(Salary) FROM myTable GROUP BY Age HAVING AVG(Salary) \u003e 50000; 不同的DISTINCT位置效果不同, 其中第二个压根没用 ","date":"2024-07-22","objectID":"/databasel1/:3:0","tags":null,"title":"CS186-L1: Introduction + SQL I","uri":"/databasel1/"},{"categories":["DATA100"],"content":"mapreduce MapReduce是一种编程模型,用于大规模数据集的并行运算[1][2][3]。它将复杂的并行计算过程抽象为两个函数:Map和Reduce[4]。 Map函数将输入数据集拆分成独立的块,并对每个块应用映射操作,生成一组中间键值对[1][2][3]。Reduce函数会对所有Map的输出进行合并操作,生成最终结果[1][2][3]。 MapReduce的主要特点包括[4][5]: 易于编程:程序员只需描述做什么,具体怎么做由系统的执行框架处理 良好的扩展性:可通过添加节点扩展集群能力 高容错性:通过计算迁移或数据迁移等策略提高集群的可用性与容错性 MapReduce采用\"分而治之\"策略,将大规模数据集切分成多个独立的分片,这些分片可以被多个Map任务并行处理[4]。它设计的一个理念是\"计算向数据靠拢\",移动数据需要大量的网络传输开销[4]。 总之,MapReduce是一种简单、可扩展的并行计算模型,通过抽象Map和Reduce函数,使得程序员可以轻松编写大规模并行应用程序,而无需关注底层的分布式细节[1][2][3][4][5]。 Citations: [1] https://baike.baidu.com/item/MapReduce/133425 [2] https://zh.wikipedia.org/zh-hans/MapReduce [3] https://www.ibm.com/cn-zh/topics/mapreduce [4] https://cshihong.github.io/2018/05/11/MapReduce%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86/ [5] https://cloud.tencent.com/developer/article/1778549 apache spark lazy strategy: 延迟计算策略,Spark默认采用这种策略,即只有当数据真正被使用时才会计算。 编译优化语句执行顺序！ Conclusion 工具链 What is next? 有用的data science链接 http://kaggle.com https://github.com/awesomedata/awesome-public-datasets http://toolbox.google.com/datasetsearch https://towardsdatascience.com https://www.reddit.com/r/dataisbeautiful/ https://fivethirtyeight.com ","date":"2024-07-19","objectID":"/datal26/:0:0","tags":null,"title":"DATA100-L26: Parallel Data Analytics; Conclusion","uri":"/datal26/"},{"categories":["DATA100"],"content":"introduction to clustering no label at all 😢 K-means clustering 算法动画演示 K-Means vs KNN minimizing inertia convex?? 损失函数不一定凸，梯度下降难顶 how to see which one is better ❓ 但是找到全局最优解非常困难 agglomerative clustering 演示见上面链接以及lec code！ 和CS61B的minimum spanning tree类似，每次合并两个最近的点，直到终止条件 outlier 有时忽略处理或者自成一类 picking K Smax？ can s be negative? ","date":"2024-07-19","objectID":"/datal24/:0:0","tags":null,"title":"DATA100-L24: Clustering","uri":"/datal24/"},{"categories":["DATA100"],"content":"summary ","date":"2024-07-19","objectID":"/datal24/:1:0","tags":null,"title":"DATA100-L24: Clustering","uri":"/datal24/"},{"categories":["DATA100"],"content":"impetus for regulation why “you” should care Because you are gonna to be a data scientist and product owner! regulations: Privacy laws GDPR (General Data Protection Regulation) CCPA (California Consumer Privacy Act) Cyber Security Law in China deletion can be more difficult than you think 😏 传输也要监管 fully take advantage of the “regulations” take care of gray areas 🤔 work with dear NGO and GO other regulations/ regulatory bodies ","date":"2024-07-19","objectID":"/datal25/:0:0","tags":null,"title":"DATA100-L25: Data Regulations","uri":"/datal25/"},{"categories":["DATA100"],"content":"Multiclass Classification 多分类问题 但是没有softmax 😢 Decision Trees (conceptually) Decision Tree Demo ","date":"2024-07-19","objectID":"/datal23/:0:0","tags":null,"title":"DATA100-L23: Decision Trees","uri":"/datal23/"},{"categories":["DATA100"],"content":"Creating Decision Trees in sklearn 可视化代码见lecture code ","date":"2024-07-19","objectID":"/datal23/:1:0","tags":null,"title":"DATA100-L23: Decision Trees","uri":"/datal23/"},{"categories":["DATA100"],"content":"Evaluating Tree Accuracy ","date":"2024-07-19","objectID":"/datal23/:2:0","tags":null,"title":"DATA100-L23: Decision Trees","uri":"/datal23/"},{"categories":["DATA100"],"content":"Overfit Decision Tree Example tree is too complex to generalize well to new data too tall and narrow 有用的特征越多，树的结构可能比较简单🤔 The Decision Tree Generation Algorithm ","date":"2024-07-19","objectID":"/datal23/:3:0","tags":null,"title":"DATA100-L23: Decision Trees","uri":"/datal23/"},{"categories":["DATA100"],"content":"Intuitively Evaluating Split Quality 分割怎么样“更明显”？ ","date":"2024-07-19","objectID":"/datal23/:4:0","tags":null,"title":"DATA100-L23: Decision Trees","uri":"/datal23/"},{"categories":["DATA100"],"content":"Entropy 沿着树向下，信息熵越小？可能变大！ ","date":"2024-07-19","objectID":"/datal23/:5:0","tags":null,"title":"DATA100-L23: Decision Trees","uri":"/datal23/"},{"categories":["DATA100"],"content":"Generating Trees Using Entropy Weighted entropy can decrease! Traditional decision tree generation algorithm: All of the data starts in the root node. Repeat until every node is either pure or unsplittable: Pick the best feature x and split value β such that the ΔWS is maximized, e.g. x = petal_width, β = 0.8 has ΔWS = 0.91. Split data into two nodes, one where x \u003c β, and one where x ≥ β. Notes: A node that has only one samples from one class is called a “pure” node. A node that has overlapping data points from different classes and thus that cannot be split is called “unsplittable”. Avoiding Overfitting 正则化在这里不起作用？ ","date":"2024-07-19","objectID":"/datal23/:6:0","tags":null,"title":"DATA100-L23: Decision Trees","uri":"/datal23/"},{"categories":["DATA100"],"content":"Heuristically Restricting Decision Tree Complexity（启发式算法） Approach2: allow full growth of the tree, but Prune the tree. ","date":"2024-07-19","objectID":"/datal23/:7:0","tags":null,"title":"DATA100-L23: Decision Trees","uri":"/datal23/"},{"categories":["DATA100"],"content":"Embracing Decision Tree Complexity with Random Forests 🪵 😋 Bagging: Short for Bootstrap AGGregatING. Generate bootstrap resamples of training data. Fit one model for each resample. Final model = average predictions of each small model. Invented by Leo Breiman in 1994 (Berkeley Statistics!). ","date":"2024-07-19","objectID":"/datal23/:8:0","tags":null,"title":"DATA100-L23: Decision Trees","uri":"/datal23/"},{"categories":["DATA100"],"content":"启发式的特点 These ideas are generally “heuristic” Not provably best or mathematically optimal. Instead, they are just ideas that somebody thought sounded good, implemented, then found to work in practice acceptably well. Summary and Context Decision trees provide an alternate non-linear framework for classification and regression. The underlying principle is fundamentally different. Decision boundaries can be more complex. Danger of overfitting is high. Small decision trees are very easy to interpret. Doing regression with a tree is straightforward. See statquest video. Keeping complexity under control is not nearly as mathematically elegant and relies on heuristic rules. Hard constraints. Pruning rules. Random forests: Generate multiple trees using bootstrap. Have the trees vote on the outcome. ","date":"2024-07-19","objectID":"/datal23/:8:1","tags":null,"title":"DATA100-L23: Decision Trees","uri":"/datal23/"},{"categories":["DATA100"],"content":"Regression vs. Classification 全攻略😋 intuition: the coin flip 重新定义概率，只需要满足一些性质即可。参考 概率论与数理统计 deriving the logistic regression model knn一瞥 这说明可以从某些变化转换为线性性质 考虑 probability $p$ 考虑 odds $\\frac{p}{1-p}$ 考虑 log odds 广义线性由此可见 ","date":"2024-07-19","objectID":"/datal21/:0:0","tags":null,"title":"DATA100-L21: Classification and Logistic Regression I","uri":"/datal21/"},{"categories":["DATA100"],"content":"Graph of Averages ","date":"2024-07-19","objectID":"/datal21/:1:0","tags":null,"title":"DATA100-L21: Classification and Logistic Regression I","uri":"/datal21/"},{"categories":["DATA100"],"content":"the sigmoid function $$ \\sigma(t)=\\frac{1}{1+e^{-t}} $$ the logistic regression model ","date":"2024-07-19","objectID":"/datal21/:2:0","tags":null,"title":"DATA100-L21: Classification and Logistic Regression I","uri":"/datal21/"},{"categories":["DATA100"],"content":"comparison to linear regression parameter estimation ","date":"2024-07-19","objectID":"/datal21/:3:0","tags":null,"title":"DATA100-L21: Classification and Logistic Regression I","uri":"/datal21/"},{"categories":["DATA100"],"content":"pitfalls of squared loss non-convex bounded, MSE ∈[0，1] conceptually questionable, not matching the “Probability and 0/1 labels” ","date":"2024-07-19","objectID":"/datal21/:4:0","tags":null,"title":"DATA100-L21: Classification and Logistic Regression I","uri":"/datal21/"},{"categories":["DATA100"],"content":"cross-entropy loss $$ -\\frac{1}{N}\\sum_{i=1}^N[y_i\\log(p_i)+(1-y_i)\\log(1-p_i)] $$ Loss function should penalize well! ","date":"2024-07-19","objectID":"/datal21/:5:0","tags":null,"title":"DATA100-L21: Classification and Logistic Regression I","uri":"/datal21/"},{"categories":["DATA100"],"content":"maximum likelihood estimation see extra in L22! ","date":"2024-07-19","objectID":"/datal21/:6:0","tags":null,"title":"DATA100-L21: Classification and Logistic Regression I","uri":"/datal21/"},{"categories":["DATA100"],"content":"logistic regression model continued ","date":"2024-07-19","objectID":"/datal22/:0:0","tags":null,"title":"DATA100-L22: Logistic Regression II","uri":"/datal22/"},{"categories":["DATA100"],"content":"sklearn demo go to see lec code! ","date":"2024-07-19","objectID":"/datal22/:1:0","tags":null,"title":"DATA100-L22: Logistic Regression II","uri":"/datal22/"},{"categories":["DATA100"],"content":"MLE: high-level, detailed (recorded) linear separability and regularization 线性可分性：如果存在一个 超平面（hyperplane） 可以将数据集分割成两部分，那么这就是线性可分的。 超平面的维度和数据集的维度相同 $$ C $$ 注意对“push”的理解！ 另一种理解正则化的角度 这里是避免loss出现无限大的情况（梯度爆炸？），避免出现使前面情况发生的参数（infinite theta）出现，所以在loss里面预先加入正则化项。 performance metrics ","date":"2024-07-19","objectID":"/datal22/:2:0","tags":null,"title":"DATA100-L22: Logistic Regression II","uri":"/datal22/"},{"categories":["DATA100"],"content":"accuracy # using sklearn model.score(X_test, y_test) ","date":"2024-07-19","objectID":"/datal22/:3:0","tags":null,"title":"DATA100-L22: Logistic Regression II","uri":"/datal22/"},{"categories":["DATA100"],"content":"imbalanced data, precision, recall Acc is not a good metric for imbalanced data, use precision and recall instead!!! $$ acc= \\frac{TP+TN}{n}\\ precision(精确率)=\\frac{TP}{TP+FP}\\ recall(召回率)=\\frac{TP}{TP+FN} $$ adjusting the classification threshold(阈值界限) ","date":"2024-07-19","objectID":"/datal22/:4:0","tags":null,"title":"DATA100-L22: Logistic Regression II","uri":"/datal22/"},{"categories":["DATA100"],"content":"a case study 变界限可能是因为imbalanced data导致的 ","date":"2024-07-19","objectID":"/datal22/:5:0","tags":null,"title":"DATA100-L22: Logistic Regression II","uri":"/datal22/"},{"categories":["DATA100"],"content":"ROC curves and AUC 怎么选择阈值？ [extra] detailed MLE, gradient descent, PR curves ","date":"2024-07-19","objectID":"/datal22/:6:0","tags":null,"title":"DATA100-L22: Logistic Regression II","uri":"/datal22/"},{"categories":["DATA100"],"content":"Why cross-entropy? KL散度: https://www.textbook.ds100.org/ch/24/classification_cost_justification.html?highlight=divergence MLE 以下讨论MLE，二分类的话以 伯努利 举例 ","date":"2024-07-19","objectID":"/datal22/:7:0","tags":null,"title":"DATA100-L22: Logistic Regression II","uri":"/datal22/"},{"categories":["DATA100"],"content":"PR curves false positive在T变大的时候增加得更快，所以可能slightly decrease 考虑PR ","date":"2024-07-19","objectID":"/datal22/:8:0","tags":null,"title":"DATA100-L22: Logistic Regression II","uri":"/datal22/"},{"categories":["DATA100"],"content":"插曲 似乎自然科学所有学科都可以被解构为 “观测到的知识点（context）” + 信息数理化（math \u0026 computer science） ？ 换言之只需要一方面不断扩充数据/知识点，另一方面提出高明的信息数理化分析方法，就可以推动科学的进步？🤔 🤔 ❓ https://docs.google.com/presentation/d/1YsxPERhul760_0TrLhawljbWWqDbtIp5tUm05irfkmw/edit#slide=id.g12444cd4007_0_537 ","date":"2024-07-19","objectID":"/datal22/:9:0","tags":null,"title":"DATA100-L22: Logistic Regression II","uri":"/datal22/"},{"categories":["DATA100"],"content":"SQL II ","date":"2024-07-19","objectID":"/datal19/:0:0","tags":null,"title":"DATA100-L19: SQL II and PCA I","uri":"/datal19/"},{"categories":["DATA100"],"content":"sql and pandas how to connect sql to python import pandas as pd import sqlalchmey engine = sqlalchemy.create_engine('sqlite:///mydatabase.db') connection = engine.connect() pd.read_sql(\"\"\" SELECT * FROM mytable GROUP BY column1, column2 \"\"\", connection) ","date":"2024-07-19","objectID":"/datal19/:1:0","tags":null,"title":"DATA100-L19: SQL II and PCA I","uri":"/datal19/"},{"categories":["DATA100"],"content":"LIKE and CAST LIKE: search for a pattern in a column SELECT * FROM mytable WHERE column1 LIKE '%value%' CAST: convert data type ","date":"2024-07-19","objectID":"/datal19/:2:0","tags":null,"title":"DATA100-L19: SQL II and PCA I","uri":"/datal19/"},{"categories":["DATA100"],"content":"SQL Joins ","date":"2024-07-19","objectID":"/datal19/:3:0","tags":null,"title":"DATA100-L19: SQL II and PCA I","uri":"/datal19/"},{"categories":["DATA100"],"content":"Cross Join SELECT * FROM table1 CROSS JOIN table2 ","date":"2024-07-19","objectID":"/datal19/:3:1","tags":null,"title":"DATA100-L19: SQL II and PCA I","uri":"/datal19/"},{"categories":["DATA100"],"content":"Inner Join SELECT * FROM table1 INNER JOIN table2 ON table1.column1 = table2.column1 SELECT * FROM t1, t2 WHERE t1.id = t2.id ","date":"2024-07-19","objectID":"/datal19/:3:2","tags":null,"title":"DATA100-L19: SQL II and PCA I","uri":"/datal19/"},{"categories":["DATA100"],"content":"left/right/full outer join ","date":"2024-07-19","objectID":"/datal19/:3:3","tags":null,"title":"DATA100-L19: SQL II and PCA I","uri":"/datal19/"},{"categories":["DATA100"],"content":"other join conditions PCA ","date":"2024-07-19","objectID":"/datal19/:3:4","tags":null,"title":"DATA100-L19: SQL II and PCA I","uri":"/datal19/"},{"categories":["DATA100"],"content":"dimensionality and rank of data dimensionality \u003c===\u003e rank ","date":"2024-07-19","objectID":"/datal19/:4:0","tags":null,"title":"DATA100-L19: SQL II and PCA I","uri":"/datal19/"},{"categories":["DATA100"],"content":"two interpretations of matrix multiplication matrices as linear operations ~coordinate transformation ","date":"2024-07-19","objectID":"/datal19/:5:0","tags":null,"title":"DATA100-L19: SQL II and PCA I","uri":"/datal19/"},{"categories":["DATA100"],"content":"matrix decomposition and rank 尽可能的保留主成分，而舍弃无关的成分 ===\u003e rank ","date":"2024-07-19","objectID":"/datal19/:6:0","tags":null,"title":"DATA100-L19: SQL II and PCA I","uri":"/datal19/"},{"categories":["DATA100"],"content":"manual matrix decomposition exercise lin alg有的时候不能分析出真正的“rank\",需要 ","date":"2024-07-19","objectID":"/datal19/:7:0","tags":null,"title":"DATA100-L19: SQL II and PCA I","uri":"/datal19/"},{"categories":["DATA100"],"content":"singular value decomposition (high level look) ","date":"2024-07-19","objectID":"/datal19/:8:0","tags":null,"title":"DATA100-L19: SQL II and PCA I","uri":"/datal19/"},{"categories":["DATA100"],"content":"recap and Goals ","date":"2024-07-19","objectID":"/datal20/:0:0","tags":null,"title":"DATA100-L20: PCA II","uri":"/datal20/"},{"categories":["DATA100"],"content":"approximate factorization $W\\ L\\rightarrow (W+L)/ 2$ rank 下降使得信息缺失了 所以 $M_{100 \\times 4} = N_{100 \\times P} \\times Q_{P \\times 4}$ P的值尽量不要小于原来的\"秩\" singular value decomposition (SVD) low rank approximation no bad! seem good! SVD theory 验证orthonormal set V@V.T = I 当相乘的时候本质上是旋转，不会拉伸 Principal Components 零中心化再来看PCA Principal Components and Variance PCA example Why is useful? 🤔 ","date":"2024-07-19","objectID":"/datal20/:1:0","tags":null,"title":"DATA100-L20: PCA II","uri":"/datal20/"},{"categories":["DATA100"],"content":"sample statistics (from last time) 参考 概率论与数理统计 prediction vs. inference ","date":"2024-07-19","objectID":"/datal17/:0:0","tags":null,"title":"DATA100-L17: Estimators, Bias, and Variance","uri":"/datal17/"},{"categories":["DATA100"],"content":"modeling: assumptions of randomness the bias-variance tradeoff $$ model\\ risk = observation\\ variance + (model\\ bias)^2+model\\ variance $$ $$ \\mathbb{E}[(Y-\\hat{Y}(x))^2] = \\sigma^2+(\\mathbb{E}[\\hat{Y}(x)]-g(x))^2+Var(\\hat{Y}(x)) $$ interpreting slopes slope == 0? 假设检验证明是否无关 [Extra]review of the Bootstrap [Extra]derivation of Bias-Variance decomposition https://docs.google.com/presentation/d/1gzgxGO_nbCDajYs7qIpjzjQfJqKadliBOat7Es10Ll8/edit#slide=id.g11df3da7bd7_0_467 ","date":"2024-07-19","objectID":"/datal17/:1:0","tags":null,"title":"DATA100-L17: Estimators, Bias, and Variance","uri":"/datal17/"},{"categories":["DATA100"],"content":"why databases structured query language (SQL) 😋 DBMS: database management system sql example type INT for integer REAL for decimal TEXT for string BLOB for ARBITRARY data DATETIME for date and time different implementations of sql support different types sql table use singular, CamelCase for SQL tables! basic sql queries 通配 SELECT * FROM table_name; 选定子集 SELECT column1, column2 FROM table_name; AS rename columns SELECT cute AS cuteness, smart AS intelligence FROM table_name; WHERE filter rows SELECT * FROM table_name WHERE column1 = 'value1' AND column2 = 'value2'; ORDER BY sort rows DESC for descending order, ASC for ascending order SELECT * FROM table_name ORDER BY column1 DESC; LIMIT restrict number of rows returned SELECT * FROM table_name LIMIT 10; OFFSET 5; basic GROUP BY Operations SELECT column1 FROM table_name GROUP BY column1; SELECT column1, SUM(column2), MAX(column3), MIN(column4) FROM table_name GROUP BY column1; SUM, AVG, COUNT, MAX, MIN, etc. SELECT column1, COUNT(*) FROM table_name GROUP BY column1; COUNT(*) counts the number of rows in each group.(even null values) SELECT column1, column2 FROM table_name GROUP BY column1, column2; HAVING COUNT(*) \u003e 5; Generate a group for each unique combination of column1 and column2 values, but only include groups with more than 5 rows. To filter groups, HAVING, to filter rows, WHERE (before HAVING). trickier GROUP BY Operations DISTINCT see in lecture 18 SELECT type, AVG(DISTINCT cost) FROM Dish GROUP BY type; SELECT DISTINCT type, cost FROM Dish WHERE cost \u003c 9; ","date":"2024-07-19","objectID":"/datal18/:0:0","tags":null,"title":"DATA100-L18: SQL I","uri":"/datal18/"},{"categories":["DATA100"],"content":"Cross Validation ","date":"2024-07-19","objectID":"/datal15/:0:0","tags":null,"title":"DATA100-L15: Cross Validation, Regularization","uri":"/datal15/"},{"categories":["DATA100"],"content":"the holdout method from sklearn.utils import shuffle training_set, dev_set = np.split(shuffle(data), [int(.8*len(data))]) 比较validation error和training error，选择最优的模型。 ","date":"2024-07-19","objectID":"/datal15/:1:0","tags":null,"title":"DATA100-L15: Cross Validation, Regularization","uri":"/datal15/"},{"categories":["DATA100"],"content":"K-fold cross validation K=1 is equivalent to holdout method. ","date":"2024-07-19","objectID":"/datal15/:2:0","tags":null,"title":"DATA100-L15: Cross Validation, Regularization","uri":"/datal15/"},{"categories":["DATA100"],"content":"Test sets provide an unbiased estimate of the model’s performance on new, unseen data. Regularization ","date":"2024-07-19","objectID":"/datal15/:3:0","tags":null,"title":"DATA100-L15: Cross Validation, Regularization","uri":"/datal15/"},{"categories":["DATA100"],"content":"L2 regularization (Ridge) the small the ball, the simpler the model 拉格朗日思想，$\\alpha$ 越大，约束越强，模型越简单。 岭回归 ","date":"2024-07-19","objectID":"/datal15/:4:0","tags":null,"title":"DATA100-L15: Cross Validation, Regularization","uri":"/datal15/"},{"categories":["DATA100"],"content":"scaling data for regularization 标准化数据，be on the same scale ","date":"2024-07-19","objectID":"/datal15/:5:0","tags":null,"title":"DATA100-L15: Cross Validation, Regularization","uri":"/datal15/"},{"categories":["DATA100"],"content":"L1 regularization (Lasso) ","date":"2024-07-19","objectID":"/datal15/:6:0","tags":null,"title":"DATA100-L15: Cross Validation, Regularization","uri":"/datal15/"},{"categories":["DATA100"],"content":"summary ","date":"2024-07-19","objectID":"/datal15/:6:1","tags":null,"title":"DATA100-L15: Cross Validation, Regularization","uri":"/datal15/"},{"categories":["DATA100"],"content":"随机变量及其分布 参考 概率论与数理统计 课程即可 期望与方差 $$ \\mathbb{E}[X] 和 Var(X) $$ 参考 概率论与数理统计 课程即可 随机变量的和 ","date":"2024-07-19","objectID":"/datal16/:0:0","tags":null,"title":"DATA100-L16: Probability I: Random Variables","uri":"/datal16/"},{"categories":["DATA100"],"content":"equality vs Identically distributed vs IID 有意思的分析 😏 ","date":"2024-07-19","objectID":"/datal16/:1:0","tags":null,"title":"DATA100-L16: Probability I: Random Variables","uri":"/datal16/"},{"categories":["DATA100"],"content":"期望和方差的性质 ","date":"2024-07-19","objectID":"/datal16/:2:0","tags":null,"title":"DATA100-L16: Probability I: Random Variables","uri":"/datal16/"},{"categories":["DATA100"],"content":"协方差与相关系数 伯努利（0-1）和Binomial分布 Sample Statistics ","date":"2024-07-19","objectID":"/datal16/:3:0","tags":null,"title":"DATA100-L16: Probability I: Random Variables","uri":"/datal16/"},{"categories":["DATA100"],"content":"sample mean ","date":"2024-07-19","objectID":"/datal16/:4:0","tags":null,"title":"DATA100-L16: Probability I: Random Variables","uri":"/datal16/"},{"categories":["DATA100"],"content":"central limit theorem ","date":"2024-07-19","objectID":"/datal16/:5:0","tags":null,"title":"DATA100-L16: Probability I: Random Variables","uri":"/datal16/"},{"categories":["DATA100"],"content":" $\\downarrow{shuffle}$ SGD: Stochastic Gradient Descent(but size == 1) ","date":"2024-07-19","objectID":"/datal13/:0:0","tags":null,"title":"DATA100-L13: Gradient Descent, Feature Engineering","uri":"/datal13/"},{"categories":["DATA100"],"content":"convexity (凹凸性) feature engineering 在于怎么使用transforming ","date":"2024-07-19","objectID":"/datal13/:1:0","tags":null,"title":"DATA100-L13: Gradient Descent, Feature Engineering","uri":"/datal13/"},{"categories":["DATA100"],"content":"feature function see website code ","date":"2024-07-19","objectID":"/datal13/:2:0","tags":null,"title":"DATA100-L13: Gradient Descent, Feature Engineering","uri":"/datal13/"},{"categories":["DATA100"],"content":"non-numeric features one-hot encoding ","date":"2024-07-19","objectID":"/datal13/:2:1","tags":null,"title":"DATA100-L13: Gradient Descent, Feature Engineering","uri":"/datal13/"},{"categories":["DATA100"],"content":"concat ","date":"2024-07-19","objectID":"/datal13/:2:2","tags":null,"title":"DATA100-L13: Gradient Descent, Feature Engineering","uri":"/datal13/"},{"categories":["DATA100"],"content":"high order polynomials ","date":"2024-07-19","objectID":"/datal13/:3:0","tags":null,"title":"DATA100-L13: Gradient Descent, Feature Engineering","uri":"/datal13/"},{"categories":["DATA100"],"content":"detect overfitting collect more data more see next lecture ","date":"2024-07-19","objectID":"/datal13/:4:0","tags":null,"title":"DATA100-L13: Gradient Descent, Feature Engineering","uri":"/datal13/"},{"categories":["DATA100"],"content":" Accuracy is a necessary, but not sufficient, condition for fair system. Fairness and transparency are context-dependent. Learn to work with contexts, and consider how your data analysis will reshape them. Keep in mind the power, and limits, of data analysis. ","date":"2024-07-19","objectID":"/datal14/:0:0","tags":null,"title":"DATA100-L14: Case Study (HCE): Fairness in Housing Appraisal","uri":"/datal14/"},{"categories":["DATA100"],"content":"开始调包！😏 from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(df[[\"total_bill\"]], df[\"tip\"]) df[\"predicted_tip\"] = model.predict(df[[\"total_bill\"]]) 所有的机器学习似乎都在最小化loss function，而梯度下降就是一种优化算法，它通过迭代的方式不断更新模型参数，使得loss function的值不断减小。 详情见NNDL栏目 ","date":"2024-07-19","objectID":"/datal12/:0:0","tags":null,"title":"DATA100-L12: Gradient Descent, sklearn","uri":"/datal12/"},{"categories":["DATA100"],"content":"linear in theta linear combination of parameters $\\theta$ ","date":"2024-07-19","objectID":"/datal11/:1:0","tags":null,"title":"DATA100-L11: Ordinary Least Squares","uri":"/datal11/"},{"categories":["DATA100"],"content":"define multiple linear regression OLS problem formulation ordinary least squares (OLS) 用线性代数重写之 $$ \\mathbb{\\hat{Y}} = \\mathbb{X}\\theta $$ ","date":"2024-07-19","objectID":"/datal11/:2:0","tags":null,"title":"DATA100-L11: Ordinary Least Squares","uri":"/datal11/"},{"categories":["DATA100"],"content":"multiple linear regression model ","date":"2024-07-19","objectID":"/datal11/:3:0","tags":null,"title":"DATA100-L11: Ordinary Least Squares","uri":"/datal11/"},{"categories":["DATA100"],"content":"MSE $$ R(\\theta) = \\frac{1}{n}||\\mathbb{Y}-\\hat{\\mathbb{Y}}||_2^2 $$ geometric derivation ","date":"2024-07-19","objectID":"/datal11/:4:0","tags":null,"title":"DATA100-L11: Ordinary Least Squares","uri":"/datal11/"},{"categories":["DATA100"],"content":"lin alg review: orthogonality, span $$ span(\\mathbb{A})是一个由列向量组成的space $$ 正交 ","date":"2024-07-19","objectID":"/datal11/:5:0","tags":null,"title":"DATA100-L11: Ordinary Least Squares","uri":"/datal11/"},{"categories":["DATA100"],"content":"least squares estimate proof performance: residuals, multiple R-squared lec11.ipynb $$ R^2∈[0,1] $$ 越大拟合效果越好 OLS properties ","date":"2024-07-19","objectID":"/datal11/:6:0","tags":null,"title":"DATA100-L11: Ordinary Least Squares","uri":"/datal11/"},{"categories":["DATA100"],"content":"residuals ","date":"2024-07-19","objectID":"/datal11/:7:0","tags":null,"title":"DATA100-L11: Ordinary Least Squares","uri":"/datal11/"},{"categories":["DATA100"],"content":"the bias/intercept term ","date":"2024-07-19","objectID":"/datal11/:8:0","tags":null,"title":"DATA100-L11: Ordinary Least Squares","uri":"/datal11/"},{"categories":["DATA100"],"content":"existence of a unique solution ","date":"2024-07-19","objectID":"/datal11/:9:0","tags":null,"title":"DATA100-L11: Ordinary Least Squares","uri":"/datal11/"},{"categories":["DATA100"],"content":"constant model + MSE 微积分是求最优化的一种方法 两种记法 constant model + MAE 绝对值求导新视角 $$ \\sum_{\\theta \u003cy_i} 1=\\sum_{\\theta \u003ey_i} 1 $$ 是计数！==\u003e中位数 loss的敏感性问题 revisiting SLR evaluation 画图before modeling！！！ transformations to fit linear model 经验之谈 introducing notation for multiple linear regression ","date":"2024-07-18","objectID":"/datal10/:0:0","tags":null,"title":"DATA100-L10: Constant Model, Loss, and Transformations","uri":"/datal10/"},{"categories":["DATA100"],"content":"regression line, correlation 高中最小二乘法(least squares regression)，线性回归 model $“all\\ models\\ are\\ wrong,\\ but\\ some\\ are\\ useful”$ trade between interpretability and accuracy 物理or统计模型 the modeling process: definitions SLR: Simple Linear Regression 明确input和parameter的区别 有些统计模型可以没有参数！ loss functions metric for good or bad minimizing average loss (Empirical Risk 期望风险？) 最优化！ interpreting SLR: slope, Anscombe’s quartet 解释参数意义 预测未知数据 evaluating the model: RMSE, Residual Plot ","date":"2024-07-18","objectID":"/datal9/:0:0","tags":null,"title":"DATA100-L9: Introduction to Modeling, Simple Linear Regression","uri":"/datal9/"},{"categories":["NNDL"],"content":"点云的数据格式 一个点云是一个无序的向量集，每个点用三维坐标构成向量，其他信息可以扩展 有.xyz等格式 本质上是一个矩阵 $Num \\times Dim$ PointNet和++的算法具体操作 ","date":"2024-07-18","objectID":"/papers/pointnet/:0:0","tags":null,"title":"Pointnet","uri":"/papers/pointnet/"},{"categories":["NNDL"],"content":"PointNet算法的具体操作 必须考虑的几个特点 旋转不变性，在仿射变换下点的排列不变 置换不变性(无序的)：应该是对称函数，不考虑顺序 局部结构需要考虑(分割时)，平衡global和local 输入：点云数据 MLP升维，抽取特征 Max对称函数操作，降维，得到全局特征 $N \\times 1$ 后续分类or分割 输入：点云数据 T-Net仿射变换（旋转）来保证旋转不变性 MLP升维，抽取特征 maxpooling操作，降维，得到global特征 $N \\times 1$ 后续分类走mlp（fcnn）+softmax 走分割的话拼接到feature $N\\times 64$ 得到 $N\\times 1088$，然后mlp给每个点属于哪几个类别打分 不足之处 maxpooling这一步直接把所有点池化为以一个全局特征，局部点与点的联系没有察觉 ","date":"2024-07-18","objectID":"/papers/pointnet/:1:0","tags":null,"title":"Pointnet","uri":"/papers/pointnet/"},{"categories":["NNDL"],"content":"PointNet++算法的具体操作 借鉴了卷积神经网络的思想，对空间化整为零，分而治之 进行多次set abstraction = sampling + grouping + PointNet 走分类，同上PointNet处理 走分割，interpolate插值，然后skip link concatenation拼接到低层次点特征后面，unit pointnet处理,重复几次，回到原始点云，得到分割结果（每个点的评分） 以下逐步分析 set abstraction sampling FPS取点 grouping 聚类ball query， ball query采用metric distance和CNN曼哈顿距离不同，使得前者能泛化能力更好 然后采用pointnet对每个group进行特征提取 提出针对 点 密度分布不均匀的 density adaptive PointNet MSG，对不同大小的区域进行特征抽取并且拼在一起 random input dropout MRG, “堆叠”多个PointNet高维抽取，改进：一个向量是抽取低一层的特征，另一个向量直接抽取底层特征，然后由点密度分布来决定按权重拼接 interpolate \u0026 skip link concatenation （特征传播feature propagation） 在低一层的坐标插入临近几个点的特征加权和，权重采用距离倒数 和skip link 的点特征进行拼接 过一层类似1 $\\times$ 1的卷积unit pointnet 两篇的区别 作用域：pointnet关注全局，++侧重关注局部然后才是全局 点密度：pointnet关注点微小扰动、异常值的影响，++侧重点密度分布不均匀的影响 层次：++提供的是一个架构，直觉上来讲比pointnet层次高一级，pointnet可以嵌入pointnet++，但也有其他编码方案可以嵌入++？ $By\\ HZ$ ","date":"2024-07-18","objectID":"/papers/pointnet/:2:0","tags":null,"title":"Pointnet","uri":"/papers/pointnet/"},{"categories":["DATA100"],"content":"Kernel Density Functions ","date":"2024-07-16","objectID":"/datal8/:0:0","tags":null,"title":"DATA100-L8: Visualizations Ⅱ","uri":"/datal8/"},{"categories":["DATA100"],"content":"KDE Mechanics ","date":"2024-07-16","objectID":"/datal8/:1:0","tags":null,"title":"DATA100-L8: Visualizations Ⅱ","uri":"/datal8/"},{"categories":["DATA100"],"content":"smoothing in 1D（histograms） rug —\u003e histogram ","date":"2024-07-16","objectID":"/datal8/:1:1","tags":null,"title":"DATA100-L8: Visualizations Ⅱ","uri":"/datal8/"},{"categories":["DATA100"],"content":"smoothing in 2D（heatmaps/Hex Plot） ","date":"2024-07-16","objectID":"/datal8/:1:2","tags":null,"title":"DATA100-L8: Visualizations Ⅱ","uri":"/datal8/"},{"categories":["DATA100"],"content":"KDEs 代码实现： sns.distplot(data, kde=True) ","date":"2024-07-16","objectID":"/datal8/:1:3","tags":null,"title":"DATA100-L8: Visualizations Ⅱ","uri":"/datal8/"},{"categories":["DATA100"],"content":"Kernel Functions and Bandwidth $\\alpha$ 越大，曲线越平滑 当然也有其他的kernel函数，比如： triangular kernel epanechnikov kernel boxcar kernel Visualization Theory 注意可视化的目的！ 仅仅靠统计方法不够直观并且不够准确！ ","date":"2024-07-16","objectID":"/datal8/:2:0","tags":null,"title":"DATA100-L8: Visualizations Ⅱ","uri":"/datal8/"},{"categories":["DATA100"],"content":"Information Channels color, shape, size, position (coordinate), and orientation ","date":"2024-07-16","objectID":"/datal8/:3:0","tags":null,"title":"DATA100-L8: Visualizations Ⅱ","uri":"/datal8/"},{"categories":["DATA100"],"content":"Harnessing X/Y do not use different scales for x and y in the same visualization! 比例适中 ","date":"2024-07-16","objectID":"/datal8/:4:0","tags":null,"title":"DATA100-L8: Visualizations Ⅱ","uri":"/datal8/"},{"categories":["DATA100"],"content":"Harnessing Color 选颜色，jet, viridis主题等等 最好选择perceptually uniform的颜色！而jet不是！Inferno， Turbo可以 ","date":"2024-07-16","objectID":"/datal8/:5:0","tags":null,"title":"DATA100-L8: Visualizations Ⅱ","uri":"/datal8/"},{"categories":["DATA100"],"content":"Harnessing Markings 人更倾向于比较整齐的直方图（一维长度） 避免移动调整基线！ 取决于讲什么故事 ","date":"2024-07-16","objectID":"/datal8/:6:0","tags":null,"title":"DATA100-L8: Visualizations Ⅱ","uri":"/datal8/"},{"categories":["DATA100"],"content":"Harnessing Conditioning ","date":"2024-07-16","objectID":"/datal8/:7:0","tags":null,"title":"DATA100-L8: Visualizations Ⅱ","uri":"/datal8/"},{"categories":["DATA100"],"content":"Harnessing Context Transformations linearize线性化处理 log transform对数变换 更多的代码参考jupyter notebook ","date":"2024-07-16","objectID":"/datal8/:8:0","tags":null,"title":"DATA100-L8: Visualizations Ⅱ","uri":"/datal8/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab02.ipynb\") Pandas is one of the most widely used Python libraries in data science. In this lab, you will review commonly used data wrangling operations/tools in Pandas. We aim to give you familiarity with: Creating DataFrames Slicing DataFrames (i.e. selecting rows and columns) Filtering data (using boolean arrays and groupby.filter) Aggregating (using groupby.agg) In this lab you are going to use several pandas methods. Reminder from lecture that you may press shift+tab on method parameters to see the documentation for that method. For example, if you were using the drop method in pandas, you couold press shift+tab to see what drop is expecting. Pandas is very similar to the datascience library that you saw in Data 8. This conversion notebook may serve as a useful guide! This lab expects that you have watched the pandas lectures. If you have not, this lab will probably take a very long time. Note: The Pandas interface is notoriously confusing for beginners, and the documentation is not consistently great. Throughout the semester, you will have to search through Pandas documentation and experiment, but remember it is part of the learning experience and will help shape you as a data scientist! import numpy as np import matplotlib.pyplot as plt import pandas as pd import plotly.express as px %matplotlib inline ","date":"2024-07-15","objectID":"/datalab2/:0:0","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Creating DataFrames \u0026 Basic Manipulations Recall that a DataFrame is a table in which each column has a specific data type; there is an index over the columns (typically string labels) and an index over the rows (typically ordinal numbers). Usually you’ll create DataFrames by using a function like pd.read_csv. However, in this section, we’ll discuss how to create them from scratch. The documentation for the pandas DataFrame class provides several constructors for the DataFrame class. Syntax 1: You can create a DataFrame by specifying the columns and values using a dictionary as shown below. The keys of the dictionary are the column names, and the values of the dictionary are lists containing the row entries. fruit_info = pd.DataFrame( data = {'fruit': ['apple', 'orange', 'banana', 'raspberry'], 'color': ['red', 'orange', 'yellow', 'pink'], 'price': [1.0, 0.75, 0.35, 0.05] }) fruit_info fruit\rcolor\rprice\r0\rapple\rred\r1.00\r1\rorange\rorange\r0.75\r2\rbanana\ryellow\r0.35\r3\rraspberry\rpink\r0.05\rSyntax 2: You can also define a DataFrame by specifying the rows as shown below. Each row corresponds to a distinct tuple, and the columns are specified separately. 这里可以看出columns是个参数 fruit_info2 = pd.DataFrame( [(\"red\", \"apple\", 1.0), (\"orange\", \"orange\", 0.75), (\"yellow\", \"banana\", 0.35), (\"pink\", \"raspberry\", 0.05)], columns = [\"color\", \"fruit\", \"price\"]) fruit_info2 color\rfruit\rprice\r0\rred\rapple\r1.00\r1\rorange\rorange\r0.75\r2\ryellow\rbanana\r0.35\r3\rpink\rraspberry\r0.05\rYou can obtain the dimensions of a DataFrame by using the shape attribute DataFrame.shape. fruit_info.shape (4, 3)\rYou can also convert the entire DataFrame into a two-dimensional NumPy array. fruit_info.values array([['apple', 'red', 1.0],\r['orange', 'orange', 0.75],\r['banana', 'yellow', 0.35],\r['raspberry', 'pink', 0.05]], dtype=object)\rThere are other constructors but we do not discuss them here. ","date":"2024-07-15","objectID":"/datalab2/:1:0","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"REVIEW: Selecting Rows and Columns in Pandas As you’ve seen in lecture and discussion, there are two verbose operators in Python for selecting rows: loc and iloc. Let’s review them briefly. Approach 1: loc The first of the two verbose operators is loc, which takes two arguments. The first is one or more row labels, the second is one or more column labels. The desired rows or columns can be provided individually, in slice notation, or as a list. Some examples are given below. Note that slicing in loc is inclusive on the provided labels. #get rows 0 through 2 and columns fruit through price fruit_info.loc[0:2, 'fruit':'price'] # 闭区间 fruit\rcolor\rprice\r0\rapple\rred\r1.00\r1\rorange\rorange\r0.75\r2\rbanana\ryellow\r0.35\r# get rows 0 through 2 and columns fruit and price. # Note the difference in notation and result from the previous example. fruit_info.loc[0:2, ['fruit', 'price']] # 离散 fruit\rprice\r0\rapple\r1.00\r1\rorange\r0.75\r2\rbanana\r0.35\r# get rows 0 and 2 and columns fruit and price. fruit_info.loc[[0, 2], ['fruit', 'price']] # 更加离散 fruit\rprice\r0\rapple\r1.00\r2\rbanana\r0.35\r# get rows 0 and 2 and column fruit fruit_info.loc[[0, 2], ['fruit']] fruit\r0\rapple\r2\rbanana\rNote that if we request a single column but don’t enclose it in a list, the return type of the loc operator is a Series rather than a DataFrame. 注意[ ]包裹问题 # get rows 0 and 2 and column fruit, returning the result as a Series fruit_info.loc[[0, 2], 'fruit'] 0 apple\r2 banana\rName: fruit, dtype: object\rIf we provide only one argument to loc, it uses the provided argument to select rows, and returns all columns.可以只给行， 不可以只给列 fruit_info.loc[0:1] fruit\rcolor\rprice\r0\rapple\rred\r1.00\r1\rorange\rorange\r0.75\rNote that if you try to access columns without providing rows, loc will crash. # uncomment, this code will crash # fruit_info.loc[[\"fruit\", \"price\"]] # uncomment, this code works fine: fruit_info.loc[:, [\"fruit\", \"price\"]] fruit\rprice\r0\rapple\r1.00\r1\rorange\r0.75\r2\rbanana\r0.35\r3\rraspberry\r0.05\rApproach 2: iloc iloc is very similar to loc except that its arguments are row numbers and column numbers, rather than row labels and labels names. A usueful mnemonic is that the i stands for “integer”. In addition, slicing for iloc is exclusive on the provided integer indices. Some examples are given below: 考虑此时变成python经典索引 # get rows 0 through 3 (exclusive) and columns 0 through 2 (exclusive) fruit_info.iloc[0:3, 0:3] fruit\rcolor\rprice\r0\rapple\rred\r1.00\r1\rorange\rorange\r0.75\r2\rbanana\ryellow\r0.35\r# get rows 0 through 3 (exclusive) and columns 0 and 2. fruit_info.iloc[0:3, [0, 2]] fruit\rprice\r0\rapple\r1.00\r1\rorange\r0.75\r2\rbanana\r0.35\r# get rows 0 and 2 and columns 0 and 2. fruit_info.iloc[[0, 2], [0, 2]] fruit\rprice\r0\rapple\r1.00\r2\rbanana\r0.35\r#get rows 0 and 2 and column fruit fruit_info.iloc[[0, 2], [0]] fruit\r0\rapple\r2\rbanana\r# get rows 0 and 2 and column fruit fruit_info.iloc[[0, 2], 0] # return a Series! 0 apple\r2 banana\rName: fruit, dtype: object\rNote that in these loc and iloc examples above, the row label and row number were always the same. Let’s see an example where they are different. If we sort our fruits by price, we get: fruit_info_sorted = fruit_info.sort_values(\"price\") fruit_info_sorted fruit\rcolor\rprice\r3\rraspberry\rpink\r0.05\r2\rbanana\ryellow\r0.35\r1\rorange\rorange\r0.75\r0\rapple\rred\r1.00\rObserve that the row number 0 now has index 3, row number 1 now has index 2, etc. These indices are the arbitrary numerical index generated when we created the DataFrame. For example, banana was originally in row 2, and so it has row label 2. If we request the rows in positions 0 and 2 using iloc, we’re indexing using the row NUMBERS, not labels. 这里似乎并不是按照lab所说的那样? fruit_info_sorted.iloc[[0, 2], 0] # 别和数学表达混淆! 3 raspberry\r1 orange\rName: fruit, dtype: object\rLastly, similar to with loc, the second argument to iloc is optional. That is, if you provide only one argument to iloc, it treats the argument you provide as a set of desired row numbers, not column numbers. 可以只给行，不可给列 fruit_info.iloc[[0, 2]] fruit\rcolor\rpr","date":"2024-07-15","objectID":"/datalab2/:1:1","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Question 1(a) For a DataFrame d, you can add a column with d['new column name'] = ... and assign a list or array of values to the column. Add a column of integers containing 1, 2, 3, and 4 called rank1 to the fruit_info table which expresses your personal preference about the taste ordering for each fruit (1 is tastiest; 4 is least tasty). fruit_info['rank1'] = [1,2,3,4] fruit_info fruit\rcolor\rprice\rrank1\r0\rapple\rred\r1.00\r1\r1\rorange\rorange\r0.75\r2\r2\rbanana\ryellow\r0.35\r3\r3\rraspberry\rpink\r0.05\r4\rgrader.check(\"q1a\") q1a passed! 💯 ","date":"2024-07-15","objectID":"/datalab2/:1:2","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Question 1(b) You can also add a column to d with d.loc[:, 'new column name'] = .... As above, the first parameter is for the rows and second is for columns. The : means change all rows and the 'new column name' indicates the name of the column you are modifying (or in this case, adding). Add a column called rank2 to the fruit_info table which contains the same values in the same order as the rank1 column. fruit_info.loc[:, 'rank2'] = [1,2,3,4] fruit_info fruit\rcolor\rprice\rrank1\rrank2\r0\rapple\rred\r1.00\r1\r1\r1\rorange\rorange\r0.75\r2\r2\r2\rbanana\ryellow\r0.35\r3\r3\r3\rraspberry\rpink\r0.05\r4\r4\rgrader.check(\"q1b\") q1b passed! 🍀 ","date":"2024-07-15","objectID":"/datalab2/:1:3","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Question 2 Use the .drop() method to drop both the rank1 and rank2 columns you created. Make sure to use the axis parameter correctly. Note that drop does not change a table, but instead returns a new table with fewer columns or rows unless you set the optional inplace parameter. Hint: Look through the documentation to see how you can drop multiple columns of a Pandas DataFrame at once using a list of column names. fruit_info_original = fruit_info.drop(labels=['rank1','rank2'],axis=1) fruit_info_original fruit\rcolor\rprice\r0\rapple\rred\r1.00\r1\rorange\rorange\r0.75\r2\rbanana\ryellow\r0.35\r3\rraspberry\rpink\r0.05\rgrader.check(\"q2\") q2 passed! 💯 ","date":"2024-07-15","objectID":"/datalab2/:1:4","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Question 3 Use the .rename() method to rename the columns of fruit_info_original so they begin with capital letters. Set this new DataFrame to fruit_info_caps. For an example of how to use rename, see the linked documentation above. fruit_info_caps = fruit_info_original.rename(columns={'fruit':'Fruit', 'color':'Color', 'price':'Price'}) fruit_info_caps Fruit\rColor\rPrice\r0\rapple\rred\r1.00\r1\rorange\rorange\r0.75\r2\rbanana\ryellow\r0.35\r3\rraspberry\rpink\r0.05\rgrader.check(\"q3\") q3 passed! 🎉 ","date":"2024-07-15","objectID":"/datalab2/:1:5","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Babynames Dataset For the new few questions of this lab, let’s move on to a real world dataset. We’ll be using the babynames dataset from Lecture 1. The babynames dataset contains a record of the given names of babies born in the United States each year. First let’s run the following cells to build the DataFrame baby_names. The cells below download the data from the web and extract the data into a DataFrame. There should be a total of 6215834 records. ","date":"2024-07-15","objectID":"/datalab2/:1:6","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"fetch_and_cache Helper The following function downloads and caches data in the data/ directory and returns the Path to the downloaded file. The cell below the function describes how it works. You are not expected to understand this code, but you may find it useful as a reference as a practitioner of data science after the course. import requests from pathlib import Path def fetch_and_cache(data_url, file, data_dir=\"data\", force=False): \"\"\" Download and cache a url and return the file object. data_url: the web address to download file: the file in which to save the results. data_dir: (default=\"data\") the location to save the data force: if true the file is always re-downloaded return: The pathlib.Path to the file. \"\"\" data_dir = Path(data_dir) data_dir.mkdir(exist_ok=True) file_path = data_dir/Path(file) if force and file_path.exists(): file_path.unlink() if force or not file_path.exists(): print('Downloading...', end=' ') resp = requests.get(data_url) with file_path.open('wb') as f: f.write(resp.content) print('Done!') else: import time created = time.ctime(file_path.stat().st_ctime) print(\"Using cached version downloaded at\", created) return file_path In Python, a Path object represents the filesystem paths to files (and other resources). The pathlib module is effective for writing code that works on different operating systems and filesystems. To check if a file exists at a path, use .exists(). To create a directory for a path, use .mkdir(). To remove a file that might be a symbolic link, use .unlink(). This function creates a path to a directory that will contain data files. It ensures that the directory exists (which is required to write files in that directory), then proceeds to download the file based on its URL. The benefit of this function is that not only can you force when you want a new file to be downloaded using the force parameter, but in cases when you don’t need the file to be re-downloaded, you can use the cached version and save download time. Below we use fetch_and_cache to download the namesbystate.zip zip file, which is a compressed directory of CSV files. This might take a little while! Consider stretching. data_url = 'https://www.ssa.gov/oact/babynames/state/namesbystate.zip' namesbystate_path = fetch_and_cache(data_url, 'namesbystate.zip') Using cached version downloaded at Fri Jul 12 20:04:41 2024\rThe following cell builds the final full baby_names DataFrame. It first builds one DataFrame per state, because that’s how the data are stored in the zip file. Here is documentation for pd.concat if you want to know more about its functionality. As before, you are not expected to understand this code. import zipfile zf = zipfile.ZipFile(namesbystate_path, 'r') column_labels = ['State', 'Sex', 'Year', 'Name', 'Count'] def load_dataframe_from_zip(zf, f): with zf.open(f) as fh: return pd.read_csv(fh, header=None, names=column_labels) states = [ load_dataframe_from_zip(zf, f) for f in sorted(zf.filelist, key=lambda x:x.filename) if f.filename.endswith('.TXT') ] baby_names = states[0] for state_df in states[1:]: baby_names = pd.concat([baby_names, state_df]) baby_names = baby_names.reset_index().iloc[:, 1:] len(baby_names) 6215834\rbaby_names.head() State\rSex\rYear\rName\rCount\r0\rAK\rF\r1910\rMary\r14\r1\rAK\rF\r1910\rAnnie\r12\r2\rAK\rF\r1910\rAnna\r10\r3\rAK\rF\r1910\rMargaret\r8\r4\rAK\rF\r1910\rHelen\r7\r","date":"2024-07-15","objectID":"/datalab2/:1:7","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Selection Examples on Baby Names As with our synthetic fruit dataset, we can use loc and iloc to select rows and columns of interest from our dataset. baby_names.loc[2:5, 'Name']# Series 2 Anna\r3 Margaret\r4 Helen\r5 Elsie\rName: Name, dtype: object\rNotice the difference between the following cell and the previous one, just passing in 'Name' returns a Series while ['Name'] returns a DataFrame. baby_names.loc[2:5, ['Name']] #df Name\r2\rAnna\r3\rMargaret\r4\rHelen\r5\rElsie\rThe code below collects the rows in positions 1 through 3, and the column in position 3 (“Name”). baby_names.iloc[1:4, [3]] Name\r1\rAnnie\r2\rAnna\r3\rMargaret\r","date":"2024-07-15","objectID":"/datalab2/:1:8","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Question 4 Use .loc to select Name and Year in that order from the baby_names table. name_and_year = baby_names.loc[:, ['Name', 'Year']] name_and_year[:5] # 版本问题 Name\rYear\r0\rMary\r1910\r1\rAnnie\r1910\r2\rAnna\r1910\r3\rMargaret\r1910\r4\rHelen\r1910\rgrader.check(\"q4\") Now repeat the same selection using the plain [] notation. 接受一个list of columns name_and_year = baby_names[['Name','Year']] name_and_year[:5] Name\rYear\r0\rMary\r1910\r1\rAnnie\r1910\r2\rAnna\r1910\r3\rMargaret\r1910\r4\rHelen\r1910\r","date":"2024-07-15","objectID":"/datalab2/:1:9","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Filtering Data ","date":"2024-07-15","objectID":"/datalab2/:2:0","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Review: Filtering with boolean arrays Filtering is the process of removing unwanted material. In your quest for cleaner data, you will undoubtedly filter your data at some point: whether it be for clearing up cases with missing values, for culling out fishy outliers, or for analyzing subgroups of your data set. Example usage looks like df[df['column name'] \u003c 5]. For your reference, some commonly used comparison operators are given below. Symbol Usage Meaning == a == b Does a equal b? \u003c= a \u003c= b Is a less than or equal to b? \u003e= a \u003e= b Is a greater than or equal to b? \u003c a \u003c b Is a less than b? \u003e a \u003e b Is a greater than b? ~ ~p Returns negation of p | p | q p OR q \u0026 p \u0026 q p AND q ^ p ^ q p XOR q (exclusive or) In the following we construct the DataFrame containing only names registered in California注意这里十分重要! ca = baby_names[baby_names['State'] == 'CA'] ca.head(5) State\rSex\rYear\rName\rCount\r390635\rCA\rF\r1910\rMary\r295\r390636\rCA\rF\r1910\rHelen\r239\r390637\rCA\rF\r1910\rDorothy\r220\r390638\rCA\rF\r1910\rMargaret\r163\r390639\rCA\rF\r1910\rFrances\r134\r","date":"2024-07-15","objectID":"/datalab2/:2:1","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Question 5 Using a boolean array, select the names in Year 2000 (from baby_names) that have larger than 3000 counts. Keep all columns from the original baby_names DataFrame. Note: Note that compound expressions have to be grouped with parentheses. That is, any time you use p \u0026 q to filter the DataFrame, make sure to use df[(df[p]) \u0026 (df[q])] or df.loc[(df[p]) \u0026 (df[q])]. You may use either [] or loc. Both will achieve the same result. For more on [] vs. loc see the stack overflow links from the intro portion of this lab. result = baby_names[(baby_names['Year'] == 2000) \u0026 (baby_names['Count'] \u003e 3000)] result.head() State\rSex\rYear\rName\rCount\r725638\rCA\rM\r2000\rDaniel\r4342\r725639\rCA\rM\r2000\rAnthony\r3839\r725640\rCA\rM\r2000\rJose\r3804\r725641\rCA\rM\r2000\rAndrew\r3600\r725642\rCA\rM\r2000\rMichael\r3572\rgrader.check(\"q5\") Query Review Recall that pandas also has a query command. For example, we can get California baby names with the code below. ca = baby_names.query('State == \"CA\"') ca.head(5) State\rSex\rYear\rName\rCount\r390635\rCA\rF\r1910\rMary\r295\r390636\rCA\rF\r1910\rHelen\r239\r390637\rCA\rF\r1910\rDorothy\r220\r390638\rCA\rF\r1910\rMargaret\r163\r390639\rCA\rF\r1910\rFrances\r134\rUsing the query command, select the names in Year 2000 (from baby_names) that have larger than 3000 counts. result_using_query = baby_names.query(\"Count \u003e 3000 and Year == 2000\") result_using_query.head(5) State\rSex\rYear\rName\rCount\r725638\rCA\rM\r2000\rDaniel\r4342\r725639\rCA\rM\r2000\rAnthony\r3839\r725640\rCA\rM\r2000\rJose\r3804\r725641\rCA\rM\r2000\rAndrew\r3600\r725642\rCA\rM\r2000\rMichael\r3572\r","date":"2024-07-15","objectID":"/datalab2/:2:2","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Groupby Let’s now turn to using groupby from lecture 4. Note: This slide provides a visual picture of how groupby.agg works if you’d like a reference. ","date":"2024-07-15","objectID":"/datalab2/:3:0","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Question 6: Elections Review: Let’s start by reading in the election dataset from the pandas lectures. # run this cell elections = pd.read_csv(\"data/elections.csv\") elections.head(5) Year\rCandidate\rParty\rPopular vote\rResult\r%\r0\r1824\rAndrew Jackson\rDemocratic-Republican\r151271\rloss\r57.210122\r1\r1824\rJohn Quincy Adams\rDemocratic-Republican\r113142\rwin\r42.789878\r2\r1828\rAndrew Jackson\rDemocratic\r642806\rwin\r56.203927\r3\r1828\rJohn Quincy Adams\rNational Republican\r500897\rloss\r43.796073\r4\r1832\rAndrew Jackson\rDemocratic\r702735\rwin\r54.574789\rAs we saw, we can groupby a specific column, e.g. “Party”. It turns out that using some syntax we didn’t cover in lecture, we can print out the subframes that result. This isn’t something you’ll do for any practical purpose. However, it may help you get an understanding of what groupby is actually doing. An example is given below for elections since 1980. # run this cell for n, g in elections.query(\"Year \u003e= 1980\").groupby(\"Party\"): print(f\"Name: {n}\") # by the way this is an \"f string\", a relatively new and great feature of Python display(g) Name: Citizens\rYear\rCandidate\rParty\rPopular vote\rResult\r%\r127\r1980\rBarry Commoner\rCitizens\r233052\rloss\r0.270182\rName: Constitution\rYear\rCandidate\rParty\rPopular vote\rResult\r%\r160\r2004\rMichael Peroutka\rConstitution\r143630\rloss\r0.117542\r164\r2008\rChuck Baldwin\rConstitution\r199750\rloss\r0.152398\r172\r2016\rDarrell Castle\rConstitution\r203091\rloss\r0.149640\rName: Democratic\rYear\rCandidate\rParty\rPopular vote\rResult\r%\r129\r1980\rJimmy Carter\rDemocratic\r35480115\rloss\r41.132848\r134\r1984\rWalter Mondale\rDemocratic\r37577352\rloss\r40.729429\r137\r1988\rMichael Dukakis\rDemocratic\r41809074\rloss\r45.770691\r140\r1992\rBill Clinton\rDemocratic\r44909806\rwin\r43.118485\r144\r1996\rBill Clinton\rDemocratic\r47400125\rwin\r49.296938\r151\r2000\rAl Gore\rDemocratic\r50999897\rloss\r48.491813\r158\r2004\rJohn Kerry\rDemocratic\r59028444\rloss\r48.306775\r162\r2008\rBarack Obama\rDemocratic\r69498516\rwin\r53.023510\r168\r2012\rBarack Obama\rDemocratic\r65915795\rwin\r51.258484\r176\r2016\rHillary Clinton\rDemocratic\r65853514\rloss\r48.521539\r178\r2020\rJoseph Biden\rDemocratic\r81268924\rwin\r51.311515\rName: Green\rYear\rCandidate\rParty\rPopular vote\rResult\r%\r149\r1996\rRalph Nader\rGreen\r685297\rloss\r0.712721\r155\r2000\rRalph Nader\rGreen\r2882955\rloss\r2.741176\r156\r2004\rDavid Cobb\rGreen\r119859\rloss\r0.098088\r165\r2008\rCynthia McKinney\rGreen\r161797\rloss\r0.123442\r170\r2012\rJill Stein\rGreen\r469627\rloss\r0.365199\r177\r2016\rJill Stein\rGreen\r1457226\rloss\r1.073699\r181\r2020\rHoward Hawkins\rGreen\r405035\rloss\r0.255731\rName: Independent\rYear\rCandidate\rParty\rPopular vote\rResult\r%\r130\r1980\rJohn B. Anderson\rIndependent\r5719850\rloss\r6.631143\r143\r1992\rRoss Perot\rIndependent\r19743821\rloss\r18.956298\r161\r2004\rRalph Nader\rIndependent\r465151\rloss\r0.380663\r167\r2008\rRalph Nader\rIndependent\r739034\rloss\r0.563842\r174\r2016\rEvan McMullin\rIndependent\r732273\rloss\r0.539546\rName: Libertarian\rYear\rCandidate\rParty\rPopular vote\rResult\r%\r128\r1980\rEd Clark\rLibertarian\r921128\rloss\r1.067883\r132\r1984\rDavid Bergland\rLibertarian\r228111\rloss\r0.247245\r138\r1988\rRon Paul\rLibertarian\r431750\rloss\r0.472660\r139\r1992\rAndre Marrou\rLibertarian\r290087\rloss\r0.278516\r146\r1996\rHarry Browne\rLibertarian\r485759\rloss\r0.505198\r153\r2000\rHarry Browne\rLibertarian\r384431\rloss\r0.365525\r159\r2004\rMichael Badnarik\rLibertarian\r397265\rloss\r0.325108\r163\r2008\rBob Barr\rLibertarian\r523715\rloss\r0.399565\r169\r2012\rGary Johnson\rLibertarian\r1275971\rloss\r0.992241\r175\r2016\rGary Johnson\rLibertarian\r4489235\rloss\r3.307714\r180\r2020\rJo Jorgensen\rLibertarian\r1865724\rloss\r1.177979\rName: Natural Law\rYear\rCandidate\rParty\rPopular vote\rResult\r%\r148\r1996\rJohn Hagelin\rNatural Law\r113670\rloss\r0.118219\rName: New Alliance\rYear\rCandidate\rParty\rPopular vote\rResult\r%\r136\r1988\rLenora Fulani\rNew Alliance\r217221\rloss\r0.237804\rName: Populist\rYear\rCandidate\rParty\rPopular vote\rResult\r%\r141\r1992\rBo Gritz\rPopulist\r106152\rloss\r0.101918\rName: Reform\rYear\rCandidate\rParty\rPopular vote\rResult\r%\r150\r1996\rRoss Perot\rReform\r8085294\rloss\r8.408844\r154\r2000\rPat Buchanan\rReform\r448895\rl","date":"2024-07-15","objectID":"/datalab2/:3:1","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Question 6a Using groupby.agg or one of the shorthand methods (groupby.min, groupby.first, etc.), create a Series best_result_percentage_only that returns a Series showing the entire best result for every party, sorted in decreasing order. Your Series should include only parties which have earned at least 10% of the vote in some election. Your result should look like this: Party Democratic 61.344703 Republican 60.907806 Democratic-Republican 57.210122 National Union 54.951512 Whig 53.051213 Liberal Republican 44.071406 National Republican 43.796073 Northern Democratic 29.522311 Progressive 27.457433 American 21.554001 Independent 18.956298 Southern Democratic 18.138998 American Independent 13.571218 Constitutional Union 12.639283 Free Soil 10.138474 Name: %, dtype: float64 A list of named groupby.agg shorthand methods is here (you’ll have to scroll down about one page). best_result_percentage_only = elections[elections['%']\u003e=10].groupby('Party')['%'].agg(max).sort_values(ascending=False) # put your code above this line best_result_percentage_only C:\\Users\\86135\\AppData\\Local\\Temp\\ipykernel_61736\\687541662.py:1: FutureWarning: The provided callable \u003cbuilt-in function max\u003e is currently using SeriesGroupBy.max. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"max\" instead.\rbest_result_percentage_only = elections[elections['%']\u003e=10].groupby('Party')['%'].agg(max).sort_values(ascending=False)\rParty\rDemocratic 61.344703\rRepublican 60.907806\rDemocratic-Republican 57.210122\rNational Union 54.951512\rWhig 53.051213\rLiberal Republican 44.071406\rNational Republican 43.796073\rNorthern Democratic 29.522311\rProgressive 27.457433\rAmerican 21.554001\rIndependent 18.956298\rSouthern Democratic 18.138998\rAmerican Independent 13.571218\rConstitutional Union 12.639283\rFree Soil 10.138474\rName: %, dtype: float64\rgrader.check(\"q6a\") ","date":"2024-07-15","objectID":"/datalab2/:3:2","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Question 6b Repeat Question 6a. However, this time, your result should be a DataFrame showing all available information rather than only the percentage as a series. This question is trickier than Question 6a. Make sure to check the Lecture 4 slides if you’re stuck! It’s very easy to make a subtle mistake that shows Woodrow Wilson and Howard Taft both winning the 2020 election. For example, the first 3 rows of your table should be: Party Year Candidate Popular Vote Result % Democratic 1964 Lyndon Johnson 43127041 win 61.344703 Republican 1972 Richard Nixon 47168710 win 60.907806 Democratic-Republican 1824 Andrew Jackson 151271 loss 57.210122 Note that the index is Party. In other words, don’t use reset_index. best_result = elections[elections['%']\u003e=10].sort_values(by='%',ascending=False).groupby(['Party']).agg(lambda x: x.iloc[0]).sort_values(by='%',ascending=False) # @ 52:03 in the video of Lecture 4 # put your code above this line best_result Year\rCandidate\rPopular vote\rResult\r%\rParty\rDemocratic\r1964\rLyndon Johnson\r43127041\rwin\r61.344703\rRepublican\r1972\rRichard Nixon\r47168710\rwin\r60.907806\rDemocratic-Republican\r1824\rAndrew Jackson\r151271\rloss\r57.210122\rNational Union\r1864\rAbraham Lincoln\r2211317\rwin\r54.951512\rWhig\r1840\rWilliam Henry Harrison\r1275583\rwin\r53.051213\rLiberal Republican\r1872\rHorace Greeley\r2834761\rloss\r44.071406\rNational Republican\r1828\rJohn Quincy Adams\r500897\rloss\r43.796073\rNorthern Democratic\r1860\rStephen A. Douglas\r1380202\rloss\r29.522311\rProgressive\r1912\rTheodore Roosevelt\r4122721\rloss\r27.457433\rAmerican\r1856\rMillard Fillmore\r873053\rloss\r21.554001\rIndependent\r1992\rRoss Perot\r19743821\rloss\r18.956298\rSouthern Democratic\r1860\rJohn C. Breckinridge\r848019\rloss\r18.138998\rAmerican Independent\r1968\rGeorge Wallace\r9901118\rloss\r13.571218\rConstitutional Union\r1860\rJohn Bell\r590901\rloss\r12.639283\rFree Soil\r1848\rMartin Van Buren\r291501\rloss\r10.138474\rgrader.check(\"q6b\") ","date":"2024-07-15","objectID":"/datalab2/:3:3","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Question 6c Our DataFrame contains a number of parties which have never had a successful presidential run. For example, the 2020 elections included candiates from the Libertarian and Green parties, neither of which have elected a president. # just run this cell elections.tail(5) Year\rCandidate\rParty\rPopular vote\rResult\r%\r177\r2016\rJill Stein\rGreen\r1457226\rloss\r1.073699\r178\r2020\rJoseph Biden\rDemocratic\r81268924\rwin\r51.311515\r179\r2020\rDonald Trump\rRepublican\r74216154\rloss\r46.858542\r180\r2020\rJo Jorgensen\rLibertarian\r1865724\rloss\r1.177979\r181\r2020\rHoward Hawkins\rGreen\r405035\rloss\r0.255731\rSuppose we were conducting an analysis trying to focus our attention on parties that had elected a president. The most natural approach is to use groupby.filter. This is an incredibly powerful but subtle tool for filtering data. As a reminder of how filter works, see this slide. The code below accomplishes the task at hand. It does this by creating a function that returns True if and only if a sub-dataframe (a.k.a. group) contains at least one winner. This function in turn uses the Pandas function “any”. # just run this cell def at_least_one_candidate_in_the_frame_has_won(frame): \"\"\"Returns df with rows only kept for parties that have won at least one election \"\"\" return (frame[\"Result\"] == 'win').any() winners_only = ( elections .groupby(\"Party\") .filter(at_least_one_candidate_in_the_frame_has_won) ) winners_only.tail(5) Year\rCandidate\rParty\rPopular vote\rResult\r%\r171\r2012\rMitt Romney\rRepublican\r60933504\rloss\r47.384076\r173\r2016\rDonald Trump\rRepublican\r62984828\rwin\r46.407862\r176\r2016\rHillary Clinton\rDemocratic\r65853514\rloss\r48.521539\r178\r2020\rJoseph Biden\rDemocratic\r81268924\rwin\r51.311515\r179\r2020\rDonald Trump\rRepublican\r74216154\rloss\r46.858542\rAlternately we could have used a lambda function instead of explicitly defining a named function using def. # just run this cell (alternative) winners_only = ( elections .groupby(\"Party\") .filter(lambda x : (x[\"Result\"] == \"win\").any()) ) winners_only.tail(5) Year\rCandidate\rParty\rPopular vote\rResult\r%\r171\r2012\rMitt Romney\rRepublican\r60933504\rloss\r47.384076\r173\r2016\rDonald Trump\rRepublican\r62984828\rwin\r46.407862\r176\r2016\rHillary Clinton\rDemocratic\r65853514\rloss\r48.521539\r178\r2020\rJoseph Biden\rDemocratic\r81268924\rwin\r51.311515\r179\r2020\rDonald Trump\rRepublican\r74216154\rloss\r46.858542\rFor your exercise, you’ll do a less restrictive filtering of the elections data. Exercise: Using filter, create a DataFrame major_party_results_since_1988 that includes all election results starting in 1988, but only show a row if the Party it belongs to has earned at least 1% of the popular vote in ANY election since 1988. For example, in 1988, you should not include the New Alliance candidate, since this party has not earned 1% of the vote since 1988. However, you should include the Libertarian candidate from 1988 despite only having 0.47 percent of the vote in 1988, because in 2016 and 2020, the Libertarian candidates Gary Johnson and Jo Jorgensen exceeded 1% of the vote. For example, the first three rows of the table you generate should look like: Year Candidate Party Popular vote Result % 135 1988 George H. W. Bush Republican 48886597 win 53.5188 137 1988 Michael Dukakis Democratic 41809074 loss 45.7707 138 1988 Ron Paul Libertarian 431750 loss 0.47266 major_party_results_since_1988 = elections[(elections['Year']\u003e=1988)].groupby('Party').filter(lambda x: (x['%'] \u003e= 1).any()) major_party_results_since_1988.head() Year\rCandidate\rParty\rPopular vote\rResult\r%\r135\r1988\rGeorge H. W. Bush\rRepublican\r48886597\rwin\r53.518845\r137\r1988\rMichael Dukakis\rDemocratic\r41809074\rloss\r45.770691\r138\r1988\rRon Paul\rLibertarian\r431750\rloss\r0.472660\r139\r1992\rAndre Marrou\rLibertarian\r290087\rloss\r0.278516\r140\r1992\rBill Clinton\rDemocratic\r44909806\rwin\r43.118485\rgrader.check(\"q6c\") ","date":"2024-07-15","objectID":"/datalab2/:3:4","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Question 7 Pandas provides special purpose functions for working with specific common data types such as strings and dates. For example, the code below provides the length of every Candidate’s name from our elections dataset. elections[\"Candidate\"].str.len() 0 14\r1 17\r2 14\r3 17\r4 14\r..\r177 10\r178 12\r179 12\r180 12\r181 14\rName: Candidate, Length: 182, dtype: int64\rExercise: Using .str.split. Create a new DataFrame called elections_with_first_name with a new column First Name that is equal to the Candidate’s first name. See the Pandas str documentation for documentation on using str.split. Hint: Use [0] somewhere in your code. elections_with_first_name = elections.copy() # your code here elections_with_first_name['First Name'] = elections_with_first_name['Candidate'].str.split(' ').str[0].to_frame() # end your code elections_with_first_name Year\rCandidate\rParty\rPopular vote\rResult\r%\rFirst Name\r0\r1824\rAndrew Jackson\rDemocratic-Republican\r151271\rloss\r57.210122\rAndrew\r1\r1824\rJohn Quincy Adams\rDemocratic-Republican\r113142\rwin\r42.789878\rJohn\r2\r1828\rAndrew Jackson\rDemocratic\r642806\rwin\r56.203927\rAndrew\r3\r1828\rJohn Quincy Adams\rNational Republican\r500897\rloss\r43.796073\rJohn\r4\r1832\rAndrew Jackson\rDemocratic\r702735\rwin\r54.574789\rAndrew\r...\r...\r...\r...\r...\r...\r...\r...\r177\r2016\rJill Stein\rGreen\r1457226\rloss\r1.073699\rJill\r178\r2020\rJoseph Biden\rDemocratic\r81268924\rwin\r51.311515\rJoseph\r179\r2020\rDonald Trump\rRepublican\r74216154\rloss\r46.858542\rDonald\r180\r2020\rJo Jorgensen\rLibertarian\r1865724\rloss\r1.177979\rJo\r181\r2020\rHoward Hawkins\rGreen\r405035\rloss\r0.255731\rHoward\r182 rows × 7 columns grader.check(\"q7\") q7 passed! 🙌 ","date":"2024-07-15","objectID":"/datalab2/:3:5","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Question 8 The code below creates a table with the frequency of all names from 2020. # just run this cell baby_names_2020 = ( baby_names.query('Year == 2020') .groupby(\"Name\") .sum()[[\"Count\"]] .reset_index() ) baby_names_2020 Name\rCount\r0\rAaden\r15\r1\rAadhira\r6\r2\rAadhvik\r5\r3\rAadhya\r186\r4\rAadi\r14\r...\r...\r...\r8697\rZymere\r6\r8698\rZymir\r74\r8699\rZyon\r130\r8700\rZyra\r33\r8701\rZyrah\r5\r8702 rows × 2 columns Exercise: Using the pd.merge function described in lecture, combine the baby_names_2020 table with the elections_with_first_name table you created earlier to form presidential_candidates_and_name_popularity. presidential_candidates_and_name_popularity = pd.merge(elections_with_first_name,baby_names_2020, left_on='First Name', right_on='Name') presidential_candidates_and_name_popularity Year\rCandidate\rParty\rPopular vote\rResult\r%\rFirst Name\rName\rCount\r0\r1824\rAndrew Jackson\rDemocratic-Republican\r151271\rloss\r57.210122\rAndrew\rAndrew\r5991\r1\r1824\rJohn Quincy Adams\rDemocratic-Republican\r113142\rwin\r42.789878\rJohn\rJohn\r8180\r2\r1828\rAndrew Jackson\rDemocratic\r642806\rwin\r56.203927\rAndrew\rAndrew\r5991\r3\r1828\rJohn Quincy Adams\rNational Republican\r500897\rloss\r43.796073\rJohn\rJohn\r8180\r4\r1832\rAndrew Jackson\rDemocratic\r702735\rwin\r54.574789\rAndrew\rAndrew\r5991\r...\r...\r...\r...\r...\r...\r...\r...\r...\r...\r148\r2016\rHillary Clinton\rDemocratic\r65853514\rloss\r48.521539\rHillary\rHillary\r20\r149\r2020\rJoseph Biden\rDemocratic\r81268924\rwin\r51.311515\rJoseph\rJoseph\r8349\r150\r2020\rDonald Trump\rRepublican\r74216154\rloss\r46.858542\rDonald\rDonald\r407\r151\r2020\rJo Jorgensen\rLibertarian\r1865724\rloss\r1.177979\rJo\rJo\r6\r152\r2020\rHoward Hawkins\rGreen\r405035\rloss\r0.255731\rHoward\rHoward\r131\r153 rows × 9 columns grader.check(\"q8\") ","date":"2024-07-15","objectID":"/datalab2/:3:6","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Bonus Exercises The following exercises are optional and use the ca_baby_names dataset defined below. perhaps next time! 😎 # just run this cell ca_baby_names = baby_names.query('State == \"CA\"') ca_baby_names State\rSex\rYear\rName\rCount\r390635\rCA\rF\r1910\rMary\r295\r390636\rCA\rF\r1910\rHelen\r239\r390637\rCA\rF\r1910\rDorothy\r220\r390638\rCA\rF\r1910\rMargaret\r163\r390639\rCA\rF\r1910\rFrances\r134\r...\r...\r...\r...\r...\r...\r784809\rCA\rM\r2020\rZiaan\r5\r784810\rCA\rM\r2020\rZiad\r5\r784811\rCA\rM\r2020\rZiaire\r5\r784812\rCA\rM\r2020\rZidan\r5\r784813\rCA\rM\r2020\rZymir\r5\r394179 rows × 5 columns Sorted Female Name Counts Create a Series female_name_since_2000_count which gives the total number of occurrences of each name for female babies born in California from the year 2000 or later. The index should be the name, and the value should be the total number of births. Your Series should be ordered in decreasing order of count. For example, your first row should have index “Emily” and value 52334, because 52334 Emilys have been born since the year 2000 in California. female_name_since_2000_count = female_name_since_2000_count Counts for All Names Using groupby, create a Series count_for_names_2020 listing all baby names from 2020 in California, in decreasing order of popularity. The result should not be broken down by sex! If a name is used by both male and female babies, the number you provide should be the total. Note: In this question we are now computing the number of registered babies with a given name. For example, count_for_names_2020[\"Noah\"] should be the number 2631 because in 2018 there were 2631 Noahs born (23 female and 2608 male). ... count_for_names_2020 ","date":"2024-07-15","objectID":"/datalab2/:4:0","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Extra: Explore the Data Set The popularity of some baby names may be influenced by cultural phenomena, such as a political figure coming to power. Below, we plot the popularity of name Hillary for female babies in Calfiornia over time. What do you notice about this plot? What real-world events in the U.S. occurred when there was a steep drop in babies named Hillary? hillary_baby_name = baby_names[(baby_names['Name'] == 'Hillary') \u0026 (baby_names['State'] == 'CA') \u0026 (baby_names['Sex'] == 'F')] plt.plot(hillary_baby_name['Year'], hillary_baby_name['Count']) plt.title(\"Hillary Popularity Over Time\") plt.xlabel('Year') plt.ylabel('Count'); The code above is hard coded to generate a dataframe representing the popularity of the female name Hillary in the state of California. While this approach works, it’s inelegant. Here we’ll use a more elegant approach that builds a dataframe such that: It contains ALL names. The counts are summed across all 50 states, not just California. To do this, we use groupby, though here we’re grouping on two columns (“Name” and “Year”) instead of just one. After grouping, we use the sum aggregation function. # just run this cell counts_aggregated_by_name_and_year = baby_names.groupby([\"Name\", \"Year\"]).sum() counts_aggregated_by_name_and_year Note that the resulting DataFrame is multi-indexed, i.e. it has two indices. The outer index is the Name, and the inner index is the Year. In order to visualize this data, we’ll use reset_index in order to set the index back to an integer and transform the Name and Year back into columnar data. # just run this cell counts_aggregated_by_name_and_year = counts_aggregated_by_name_and_year.reset_index() counts_aggregated_by_name_and_year Similar to before, we can plot the popularity of a given name by selecting the name we want to visualize. The code below is very similar to the plotting code above, except that we use query to get the name of interest instead of using a boolean array. Note: Here we use a special syntax @name_of_interest to tell the query command to use the python variable name_of_interest. Try out some other names and see what trends you observe. Note that since this is the American social security database, international names are not well represented. # just run this cell name_of_interest = 'Hillary' chosen_baby_name = counts_aggregated_by_name_and_year.query(\"Name == @name_of_interest\") plt.plot(chosen_baby_name['Year'], chosen_baby_name['Count']) plt.title(f\"Popularity Of {name_of_interest} Over Time\") plt.xlabel('Year') plt.ylabel('Count'); To double-check your work, the cell below will rerun all of the autograder tests. grader.check_all() ","date":"2024-07-15","objectID":"/datalab2/:4:1","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"Submission Make sure you have run all cells in your notebook in order before running the cell below, so that all images/graphs appear in the output. The cell below will generate a zip file for you to submit. Please save before exporting! # Save your notebook first, then run this cell to export your submission. grader.export(pdf=False) ","date":"2024-07-15","objectID":"/datalab2/:5:0","tags":["Pandas"],"title":"DATA100-lab2","uri":"/datalab2/"},{"categories":["DATA100"],"content":"distribution 定义 ","date":"2024-07-15","objectID":"/datal7/:1:0","tags":null,"title":"DATA100-L7: Visualization Ⅰ","uri":"/datal7/"},{"categories":["DATA100"],"content":"bar plots for distribution ","date":"2024-07-15","objectID":"/datal7/:2:0","tags":null,"title":"DATA100-L7: Visualization Ⅰ","uri":"/datal7/"},{"categories":["DATA100"],"content":"data8 example ","date":"2024-07-15","objectID":"/datal7/:2:1","tags":null,"title":"DATA100-L7: Visualization Ⅰ","uri":"/datal7/"},{"categories":["DATA100"],"content":"compound way ","date":"2024-07-15","objectID":"/datal7/:2:2","tags":null,"title":"DATA100-L7: Visualization Ⅰ","uri":"/datal7/"},{"categories":["DATA100"],"content":"seaborn example import seaborn as sns sns.countplot(x='variable', data=df) # rug plot sns.rugplot(x='variable', data=df, color='black') ","date":"2024-07-15","objectID":"/datal7/:2:3","tags":null,"title":"DATA100-L7: Visualization Ⅰ","uri":"/datal7/"},{"categories":["DATA100"],"content":"plotly example ","date":"2024-07-15","objectID":"/datal7/:2:4","tags":null,"title":"DATA100-L7: Visualization Ⅰ","uri":"/datal7/"},{"categories":["DATA100"],"content":"处理异常值（outliers）和峰值（mode） ","date":"2024-07-15","objectID":"/datal7/:3:0","tags":null,"title":"DATA100-L7: Visualization Ⅰ","uri":"/datal7/"},{"categories":["DATA100"],"content":"density curve 密度曲线看峰 箱型图 import seaborn as sns sns.boxplot(x='variable', data=df) violin plot 和箱型图对比来看，violin plot宽度有意义 import seaborn as sns sns.violinplot(x='variable', data=df) 处理overplotting random jitter ","date":"2024-07-15","objectID":"/datal7/:3:1","tags":null,"title":"DATA100-L7: Visualization Ⅰ","uri":"/datal7/"},{"categories":["DATA100"],"content":"text data ","date":"2024-07-15","objectID":"/datal6/:1:0","tags":null,"title":"DATA100-L6: Regex","uri":"/datal6/"},{"categories":["DATA100"],"content":"python string methods .replace(str1, str2) .split('/') ","date":"2024-07-15","objectID":"/datal6/:1:1","tags":null,"title":"DATA100-L6: Regex","uri":"/datal6/"},{"categories":["DATA100"],"content":"regex 参考Tools正则表达式笔记 | 优先级较低 感兴趣的练习↓ https://alf.nu/RegexGolf ","date":"2024-07-15","objectID":"/datal6/:2:0","tags":null,"title":"DATA100-L6: Regex","uri":"/datal6/"},{"categories":["DATA100"],"content":"python re .sub() pattern(r\"......\") is a raw string, which means that backslashes are not interpreted as escape characters. eg: “\\\\section” in regular str, “\\section” in raw str. .findall(pattern, string) import re pattern = r'\\b\\w{3}\\b' string = 'The quick brown fox jumps over the lazy dog' matches = re.findall(pattern, string) print(matches) Output: ['The', 'fox', 'dog'] extract() extractall() 有时会有ser.str.extract()形式！ ","date":"2024-07-15","objectID":"/datal6/:2:1","tags":null,"title":"DATA100-L6: Regex","uri":"/datal6/"},{"categories":["DATA100"],"content":"Discussion 2: Pandas Practice We will begin our discussion of Pandas. You will practice: Selecting columns Filtering with boolean conditions Counting with value_counts import pandas as pd import numpy as np ","date":"2024-07-15","objectID":"/datadisc02/:0:0","tags":null,"title":"DATA100-disc02","uri":"/datadisc02/"},{"categories":["DATA100"],"content":"Pandas Practise In the first Pandas question, we will be working with the elections dataset from lecture. elections = pd.read_csv(\"elections.csv\") # read in the elections data into a pandas dataframe! elections.head(5) Year Candidate Party Popular vote Result % 0 1824 Andrew Jackson Democratic-Republican 151271 loss 57.210122 1 1824 John Quincy Adams Democratic-Republican 113142 win 42.789878 2 1828 Andrew Jackson Democratic 642806 win 56.203927 3 1828 John Quincy Adams National Republican 500897 loss 43.796073 4 1832 Andrew Jackson Democratic 702735 win 54.574789 ","date":"2024-07-15","objectID":"/datadisc02/:1:0","tags":null,"title":"DATA100-disc02","uri":"/datadisc02/"},{"categories":["DATA100"],"content":"Question 5 We want to select the “Popular vote” column as a pd.Series. Which of the following lines of code will error? elections['Popular vote'] elections.iloc['Popular vote'] elections.loc['Popular vote'] elections.loc[:, 'Popular vote'] elections.iloc[:, 'Popular vote'] Run each line in the cell below and see for yourself! # elections.iloc['Popular vote'] # wrong # elections.iloc[:, 'popular votes'] # wrong # elections['Popular vote'] # right # elections.loc['Popular vote'] # ket error # elections.loc[:,'Popular vote'] # right 0 151271 1 113142 2 642806 3 500897 4 702735 ... 173 62984828 174 732273 175 4489235 176 65853514 177 1457226 Name: Popular vote, Length: 178, dtype: int64 ","date":"2024-07-15","objectID":"/datadisc02/:1:1","tags":null,"title":"DATA100-disc02","uri":"/datadisc02/"},{"categories":["DATA100"],"content":"Question 6 Write one line of Pandas code that returns a pd.DataFrame that only contains election results from the 1900s. elections[(elections['Year'] \u003e= 1900) \u0026 (elections['Year'] \u003c 2000)] # 注意是 \u0026 Year Candidate Party Popular vote Result % 54 1900 John G. Woolley Prohibition 210864 loss 1.526821 55 1900 William Jennings Bryan Democratic 6370932 loss 46.130540 56 1900 William McKinley Republican 7228864 win 52.342640 57 1904 Alton B. Parker Democratic 5083880 loss 37.685116 58 1904 Eugene V. Debs Socialist 402810 loss 2.985897 ... ... ... ... ... ... ... 146 1996 Harry Browne Libertarian 485759 loss 0.505198 147 1996 Howard Phillips Taxpayers 184656 loss 0.192045 148 1996 John Hagelin Natural Law 113670 loss 0.118219 149 1996 Ralph Nader Green 685297 loss 0.712721 150 1996 Ross Perot Reform 8085294 loss 8.408844 97 rows × 6 columns ","date":"2024-07-15","objectID":"/datadisc02/:1:2","tags":null,"title":"DATA100-disc02","uri":"/datadisc02/"},{"categories":["DATA100"],"content":"Question 7 Write one line of Pandas code that returns a pd.Series, where the index is the Party, and the values are how many times that party won an election. Hint: use value_counts. # Your answer here elections['Party'].value_counts() Party Democratic 46 Republican 40 Prohibition 11 Libertarian 11 Socialist 10 Independent 6 Whig 6 Green 6 Progressive 4 Populist 3 Constitution 3 American Independent 3 American 2 National Republican 2 Democratic-Republican 2 Reform 2 Free Soil 2 Anti-Masonic 1 National Union 1 Constitutional Union 1 National Democratic 1 Union Labor 1 Greenback 1 Anti-Monopoly 1 Liberal Republican 1 Southern Democratic 1 Northern Democratic 1 Farmer–Labor 1 Dixiecrat 1 States' Rights 1 Communist 1 Union 1 Taxpayers 1 New Alliance 1 Citizens 1 Natural Law 1 Name: count, dtype: int64 ","date":"2024-07-15","objectID":"/datadisc02/:1:3","tags":null,"title":"DATA100-disc02","uri":"/datadisc02/"},{"categories":["DATA100"],"content":"Grading Assistance (Bonus) Fernando is writing a grading script to compute grades for students in Data 101. Recall that many factors go into computing a student’s final grade, including homework, discussion, exams, and labs. In this question, we will help Fernando compute the homework grades for all students using a DataFrame, hw_grades, provided by Gradescope. The Pandas DataFrame hw_grades contains homework grades for all students for all homework assignments, with one row for each combination of student and homework assignment. Any assignments that are incomplete are denoted by NaN (missing) values, and any late assignments are denoted by a True boolean value in the Late column. You may assume that the names of students are unique. Below is a sample of hw_grades. hw_grades = pd.read_csv(\"hw_grades.csv\") hw_grades.sample(5, random_state = 0) Name Assignment Grade Late 28 Sid Homework 9 82.517998 True 11 Ash Homework 2 78.264844 True 10 Ash Homework 1 98.421049 False 41 Emily Homework 2 62.900313 False 2 Meg Homework 3 89.785619 False ","date":"2024-07-15","objectID":"/datadisc02/:2:0","tags":null,"title":"DATA100-disc02","uri":"/datadisc02/"},{"categories":["DATA100"],"content":"Question 8a Assuming there is a late penalty that causes a 10% grade reduction to the student’s current score (i.e. a 65% score would become a 65% - 6.5% = 58.5%), write a line of Pandas code to calculate all the homework grades, including the late penalty if applicable, and store it in a column named ’LPGrade’. # Your answer here hw_grades['LPGrade'] = hw_grades['Grade'] * (1 - hw_grades['Late'] * 0.1) # 用个隐式转换 hw_grades.head() Name Assignment Grade Late LPGrade 0 Meg Homework 1 NaN False NaN 1 Meg Homework 2 64.191844 False 64.191844 2 Meg Homework 3 89.785619 False 89.785619 3 Meg Homework 4 74.420033 False 74.420033 4 Meg Homework 5 74.372434 True 66.935190 ","date":"2024-07-15","objectID":"/datadisc02/:2:1","tags":null,"title":"DATA100-disc02","uri":"/datadisc02/"},{"categories":["DATA100"],"content":"Question 8b Which of the following expressions outputs the students’ names and number of late assignments, from least to greatest number of late assignments? hw_grades.groupby([’Name’]).sum().sort_values() hw_grades.groupby([’Name’, ’Late’]).sum().sort_values() hw_grades.groupby([’Name’]).sum()[’Late’].sort_values() hw_grades.groupby([’Name’]).sum().sort_values()[’Late’] # Your answer here # hw_grades.groupby(['Name']).sum().sort_values() # \u003c---- Try to sort on df, but have to give 'by=...' into sort_values() hw_grades.groupby(['Name']).sum()['Late'].sort_values() Name Sid 1 Emily 2 Meg 2 Ash 3 Smith 3 Name: Late, dtype: int64 ","date":"2024-07-15","objectID":"/datadisc02/:2:2","tags":null,"title":"DATA100-disc02","uri":"/datadisc02/"},{"categories":["DATA100"],"content":"Question 8c If each assignment is weighted equally, fill in the blanks below to calculate each student’s overall homework grade, including late penalties for any applicable assignments. Hint: Recall that incomplete assignments have NaN values. How can we use fillna to replace these null values? hw_grades._________(_______) \\ .groupby(___________)[____________] \\ .agg(____________) # Your answer here hw_grades.fillna(0)\\ .groupby(['Name'])['LPGrade']\\ .agg('mean') # Python中，反斜杠 \\ 用作行续字符，它允许你将一行代码分割成多行，以提高代码的可读性。这在编写较长的一行代码时特别有用，可以避免代码过于拥挤，使得代码更易于阅读和维护。 Name Ash 80.830657 Emily 84.297725 Meg 69.218137 Sid 63.020729 Smith 58.332233 Name: LPGrade, dtype: float64 ","date":"2024-07-15","objectID":"/datadisc02/:2:3","tags":null,"title":"DATA100-disc02","uri":"/datadisc02/"},{"categories":["DATA100"],"content":"Question 8d Of all the homework assignments, which are the most difficult in terms of the median grade? Order by the median grade, from lowest to greatest. Do not consider incomplete assignments or late penalties in this calculation. Fill in the blanks below to answer this question. Hint: Recall that incomplete assignments have NaN values. How can we use dropna to remove these null values? hw_grades._________() \\ .groupby(___________)[____________] \\ .agg(____________) \\ .sort_values() # Your answer here hw_grades.dropna()\\ .groupby('Assignment')['Grade']\\ .agg('median')\\ .sort_values() Assignment Homework 2 64.160918 Homework 10 66.366211 Homework 5 74.372434 Homework 8 76.362904 Homework 4 78.207572 Homework 3 78.348163 Homework 9 82.517998 Homework 6 84.369535 Homework 1 85.473281 Homework 7 92.200688 Name: Grade, dtype: float64 ","date":"2024-07-15","objectID":"/datadisc02/:2:4","tags":null,"title":"DATA100-disc02","uri":"/datadisc02/"},{"categories":["DATA100"],"content":"EDA: Exploratory Data Analysis ","date":"2024-07-14","objectID":"/datal5/:0:0","tags":null,"title":"DATA100-L5: Data Wrangling and EDA","uri":"/datal5/"},{"categories":["DATA100"],"content":"Infinite loop DW \u0026 EDA…… DW: raw data -\u003e clean data -\u003e usable data ","date":"2024-07-14","objectID":"/datal5/:1:0","tags":null,"title":"DATA100-L5: Data Wrangling and EDA","uri":"/datal5/"},{"categories":["DATA100"],"content":"key data properties to consider in EDA ","date":"2024-07-14","objectID":"/datal5/:2:0","tags":null,"title":"DATA100-L5: Data Wrangling and EDA","uri":"/datal5/"},{"categories":["DATA100"],"content":"structure file format rectangular data: tables and matrices CSV, TabSV/TSV, json(is a dict) txt, XML pd.read_csv('filename.tsv',delimiter='\\t') turn to lec jupyter notebook to see more details 变量种类 注意：不唯一，不全面 multiple files 主键？ ","date":"2024-07-14","objectID":"/datal5/:2:1","tags":null,"title":"DATA100-L5: Data Wrangling and EDA","uri":"/datal5/"},{"categories":["DATA100"],"content":"granularity(颗粒度？) scope and temporality 颗粒度 scope: sampling frame temporality: time-series data unix time posix time ","date":"2024-07-14","objectID":"/datal5/:2:2","tags":null,"title":"DATA100-L5: Data Wrangling and EDA","uri":"/datal5/"},{"categories":["DATA100"],"content":"faithfulness missing data? ","date":"2024-07-14","objectID":"/datal5/:2:3","tags":null,"title":"DATA100-L5: Data Wrangling and EDA","uri":"/datal5/"},{"categories":["UCB-CS61B"],"content":"Exceptions throw statement: throws an exception public V get(K key) { int location = findKey(key); if (location \u003c 0) { throw new IllegalArgumentException(\"Key \" + key + \" does not exist in map.\"); } return values[findKey(key)]; } 显式抛出异常 public static void main(String[] args) { System.out.println(\"ayyy lmao\"); throw new RuntimeException(\"For no reason.\"); } ","date":"2024-07-14","objectID":"/61b-14/:0:0","tags":null,"title":"61B-14: Exceptions, Iterators, Iterables","uri":"/61b-14/"},{"categories":["UCB-CS61B"],"content":"What has been Thrown, can be Caught Dog d = new Dog(\"Lucy\", \"Retriever\", 80); d.becomeAngry(); try { d.receivePat(); } catch (Exception e) { System.out.println( \"Tried to pat: \" + e); } System.out.println(d); 由callstack顺序 exception是一种对象，有时可能见到的错误↓ 最好明确怎么处理exception public static void gulgate() throws IOException { ... throw new IOException(\"hi\"); ... } 有时需要考虑main情况 上面没有明确处理 checked与否见种类 Iteration 创建能支持for (Item i : someIterable)的情况 ","date":"2024-07-14","objectID":"/61b-14/:1:0","tags":null,"title":"61B-14: Exceptions, Iterators, Iterables","uri":"/61b-14/"},{"categories":["UCB-CS61B"],"content":"The Iterable Interface public interface Iterable\u003cT\u003e { Iterator\u003cT\u003e iterator(); } package java.util; public interface Iterator\u003cT\u003e { boolean hasNext(); T next(); } ","date":"2024-07-14","objectID":"/61b-14/:2:0","tags":null,"title":"61B-14: Exceptions, Iterators, Iterables","uri":"/61b-14/"},{"categories":["UCB-CS61B"],"content":"假如要遍历ArrayMap，需要对key进行操作 到此完成，可以执行遍历 ","date":"2024-07-14","objectID":"/61b-14/:2:1","tags":null,"title":"61B-14: Exceptions, Iterators, Iterables","uri":"/61b-14/"},{"categories":["UCB-CS61B"],"content":"Packages and JAR Files ","date":"2024-07-14","objectID":"/61b-15/:0:0","tags":null,"title":"61B-15: Packages, Access Control, Objects","uri":"/61b-15/"},{"categories":["UCB-CS61B"],"content":"创建包 At the top of every file in the package, put the package name. Make sure that the file is stored in a folder with the appropriate folder name. For a package with name ug.joshh.animal, use folder ug/joshh/animal. 要用的时候import即可 ","date":"2024-07-14","objectID":"/61b-15/:1:0","tags":null,"title":"61B-15: Packages, Access Control, Objects","uri":"/61b-15/"},{"categories":["UCB-CS61B"],"content":"default package ","date":"2024-07-14","objectID":"/61b-15/:2:0","tags":null,"title":"61B-15: Packages, Access Control, Objects","uri":"/61b-15/"},{"categories":["UCB-CS61B"],"content":"JAR Files Access Control Object Methods: Equals and toString( ) ","date":"2024-07-14","objectID":"/61b-15/:3:0","tags":null,"title":"61B-15: Packages, Access Control, Objects","uri":"/61b-15/"},{"categories":["UCB-CS61B"],"content":"toString( ) ","date":"2024-07-14","objectID":"/61b-15/:4:0","tags":null,"title":"61B-15: Packages, Access Control, Objects","uri":"/61b-15/"},{"categories":["UCB-CS61B"],"content":"== vs equals( ) == compares references equals( ) compares values, but pay attention to the type! public class Date { private final int month; private final int day; private final int year; public Date(int m, int d, int y) { month = m; day = d; year = y; } public boolean equals(Object x) { if (this == x) return true; if (x == null) return false; if (this.getClass() != x.getClass()) { return false; } Date that = (Date) x; if (this.day != that.day) { return false; } if (this.month != that.month) { return false; } if (this.year != that.year) { return false; } return true; } } ","date":"2024-07-14","objectID":"/61b-15/:5:0","tags":null,"title":"61B-15: Packages, Access Control, Objects","uri":"/61b-15/"},{"categories":["UCB-CS61B"],"content":"Rules for Equals in Java 反身性：x.equals(x) == true 对称性 传递性 注意实现equals方法时，不要违背这些性质！ ","date":"2024-07-14","objectID":"/61b-15/:6:0","tags":null,"title":"61B-15: Packages, Access Control, Objects","uri":"/61b-15/"},{"categories":["UCB-CS61B"],"content":"61B: Writing Efficient Programs Programming cost. How long does it take to develop your programs? How easy is it to read, modify, and maintain your code? More important than you might think! Majority of cost is in maintenance, not development! 自顶向下，逐层抽象，分而治之，化整为零 ADT Implementations Designing ADTs 虽然extension简单，但是委托delegation更加灵活 Views 视图 在Java中，“view\"通常指的是一种数据结构的视图，它提供了一种访问和操作底层数据的方式，而不需要复制整个数据集。视图的主要优点是它们提供了一种高效的方式来操作数据子集，而不需要复制数据，从而节省内存和提高性能。然而，视图也有一些限制，例如固定大小的视图不能添加或删除元素。 Occasionally, implementation details may allow for views that are too difficult to implement for an abstract type. ","date":"2024-07-14","objectID":"/61b-16/:1:0","tags":null,"title":"61B-16: Encapsulation, Lists, Delegation vs. Extension","uri":"/61b-16/"},{"categories":["UCB-CS61B"],"content":"Programming in the Real World 对技术要敬畏 midterm review Comparing strings for equality using == vs .equals —\u003e see in autoboxing lecture 在Java中，this 是一个指向当前对象实例的引用。它通常用于引用当前类的实例成员，或者在方法中区分成员变量和局部变量。然而，你不能将 this 重新赋值为另一个对象的引用，因为 this 是一个固定的概念，它代表当前对象本身。 你提供的代码示例中，尝试将 this 赋值为一个新的 Dog 对象，这是不允许的。Java 编译器会报错，因为它违反了 this 的使用规则。 public class Dog { public void f() { this = new Dog(); // 这行代码会导致编译错误，因为不能重新赋值this } } Dog d = new Dog(); d.f(); // 调用f()方法，但由于上面的错误，这行代码实际上无法执行 如果你想要创建一个新的 Dog 对象并将其引用赋给 this，你需要使用另一个变量，比如 anotherDog。下面是修改后的代码示例： public class Dog { public void f() { Dog anotherDog = new Dog(); // 创建一个新的Dog对象 // 这里你可以使用anotherDog来引用新创建的Dog对象 } } Dog d = new Dog(); d.f(); // 现在f()方法可以正常执行，没有编译错误 在这段修改后的代码中，anotherDog 变量用于存储新创建的 Dog 对象的引用，而 this 仍然保持其原始含义，即指向当前的 Dog 对象实例。 ","date":"2024-07-14","objectID":"/61b-12/:0:0","tags":null,"title":"61B-12:  Coding in the Real World, Review","uri":"/61b-12/"},{"categories":["UCB-CS61B"],"content":"13-16几乎是java语法讲解😄 ","date":"2024-07-14","objectID":"/61b-13/:0:0","tags":null,"title":"61B-13: Generics, Autoboxing","uri":"/61b-13/"},{"categories":["UCB-CS61B"],"content":"Primitives Cannot Be Used as Actual Type Arguments ","date":"2024-07-14","objectID":"/61b-13/:1:0","tags":null,"title":"61B-13: Generics, Autoboxing","uri":"/61b-13/"},{"categories":["UCB-CS61B"],"content":"Autoboxing Wrapper Types Are (Mostly) Just Like Any Class 8种基本类型之间转换也存在widening Immutability 类似于const在cpp public class Date { public final int month; public final int day; public final int year; private boolean contrived = true; public Date(int m, int d, int y) { month = m; day = d; year = y; } } Warning: Declaring a reference as Final does not make object immutable. Example: public final ArrayDeque d = new ArrayDeque(); The d variable can never change, but the referenced deque can! 见指针常量与常量指针的区别in C++ Defining Generic Classes Goal 1: Create a class ArrayMap with the following methods: put(key, value): Associate key with value. If -1, adds k and v to the last position of the arrays. containsKey(key): Checks to see if arraymap contains the key. get(key): Returns value, assuming key exists.. keys(): Returns a list of all keys. size(): Returns number of keys. public class ArrayMap\u003cK, V\u003e { private K[] keys; private V[] values; private int size; public ArrayMap() { keys = (K[]) new Object[100]; values = (V[]) new Object[100]; size = 0; } private int findKey(K key) { for (int i = 0; i \u003c size; i++) { if (keys[i].equals(key)) { return i; } } return -1; } private int getKeyIndex(K key) { for (int i = 0; i \u003c size; i++) { if (keys[i].equals(key)) { return i; } return -1; } } public void put(K key, V value) { int i = getKeyIndex(key); if (i \u003e -1) { values[i] = value; return; } keys[size] = key; values[size] = value; size += 1; } public V get(K key) { return values[findKey(key)]; } public boolean containsKey(K key) { int i = findKey(key); return (i \u003e -1); } public List\u003cK\u003e keys() { List\u003cK\u003e list = new ArrayList\u003cK\u003e(); for (int i = 0; i \u003c size; i++) { list.add(keys[i]); } return list; } public int size() { return size; } } Generic Methods Goal: Create a class MapHelper with two methods: get(Map61B, key): Returns the value corresponding to the given key in the map if it exists, otherwise null. Unlike the ArrayMap’s get method, which crashes if the key doesn’t exist. maxKey(Map61B): Returns the maximum of all keys in the given ArrayMap. Works only if keys can be compared. public class MapHelper { public static \u003cX,Z\u003e Z get(ArrayMap\u003cX,Z\u003e map, X key) { if (map.containsKey(key)) { return map.get(key); } else { return null; } } public static \u003cX extends Comparable\u003cX\u003e,Z\u003e X maxKey(ArrayMap\u003cX,Z\u003e map) { X max = null; for (X key : map.keys()) { if (max == null || key.compareTo(max) \u003e 0) { max = key; } } return max; } } ","date":"2024-07-14","objectID":"/61b-13/:2:0","tags":null,"title":"61B-13: Generics, Autoboxing","uri":"/61b-13/"},{"categories":["UCB-CS61B"],"content":"Subtype Polymorphism 指的是可以使用父类类型的对象来引用子类类型的实例。 DIY Comparison 比较Object类对象时产生问题，如何比较？？？ 考虑写一个比较器，比较两个Object对象 加深编译理解 Comparable Interface public interface Comparable\u003cT\u003e { public int compareTo(T obj); } Comparator Interface public interface Comparator\u003cT\u003e { public int compare(T obj1, T obj2); } ","date":"2024-07-14","objectID":"/61b-10/:0:0","tags":null,"title":"61B-10: Subtype Polymorphism vs. HoFs","uri":"/61b-10/"},{"categories":["UCB-CS61B"],"content":"两者的关系↓ 总结 ","date":"2024-07-14","objectID":"/61b-10/:0:1","tags":null,"title":"61B-10: Subtype Polymorphism vs. HoFs","uri":"/61b-10/"},{"categories":["UCB-CS61B"],"content":"Java Libraries ","date":"2024-07-14","objectID":"/61b-11/:0:0","tags":null,"title":"61B-11: Libraries, Abstract Classes, Packages","uri":"/61b-11/"},{"categories":["UCB-CS61B"],"content":"Collections Collections is a package in Java that provides various utility classes for working with collections. ","date":"2024-07-14","objectID":"/61b-11/:1:0","tags":null,"title":"61B-11: Libraries, Abstract Classes, Packages","uri":"/61b-11/"},{"categories":["UCB-CS61B"],"content":"Tasks引入 3 tasks, given the text of a book: Create a list of all words in the book. Count the number of unique words. Keep track of the number of times that specific words are mentioned. #1 way set public static int countUniqueWords(List\u003cString\u003e words) { Set\u003cString\u003e ss = new HashSet\u003c\u003e(); for (String s : words) { ss.add(s); } return ss.size(); } public static int countUniqueWords(List\u003cString\u003e words) { Set\u003cString\u003e ss = new HashSet\u003c\u003e(); ss.addAll(words); return ss; } #2 way map public static Map\u003cString, Integer\u003e collectWordCount(List\u003cString\u003e words, List\u003cString\u003e targets) { Map\u003cString, Integer\u003e wordCounts = new HashMap\u003c\u003e(); for (String s : targets) { wordCounts.put(s, 0); } for (String s : words) { if (wordCounts.containsKey(s)) { int oldCount = wordCounts.get(s); wordCounts.put(s, oldCount + 1); } } return wordCounts; } Python里面则是dict实现，咋一看似乎更好？但是？ Java9新特点： Interfaces and Abstract Classes More interface details: Can provide variables, but they are public static final. final means the value can never change. A class can implement multiple interfaces. ","date":"2024-07-14","objectID":"/61b-11/:2:0","tags":null,"title":"61B-11: Libraries, Abstract Classes, Packages","uri":"/61b-11/"},{"categories":["UCB-CS61B"],"content":"interface summary ","date":"2024-07-14","objectID":"/61b-11/:3:0","tags":null,"title":"61B-11: Libraries, Abstract Classes, Packages","uri":"/61b-11/"},{"categories":["UCB-CS61B"],"content":"abstract class intro ","date":"2024-07-14","objectID":"/61b-11/:4:0","tags":null,"title":"61B-11: Libraries, Abstract Classes, Packages","uri":"/61b-11/"},{"categories":["UCB-CS61B"],"content":"两者对比 Packages A package is a namespace that organizes classes and interfaces. ","date":"2024-07-14","objectID":"/61b-11/:5:0","tags":null,"title":"61B-11: Libraries, Abstract Classes, Packages","uri":"/61b-11/"},{"categories":["UCB-CS61B"],"content":"Implementation Inheritance: Extends extends Because of extends, RotatingSLList inherits all members of SLList: All instance and static variables. （注意public, private, protected的区别） All methods. All nested classes. Constructors are not inherited. super public class VengefulSLList\u003cItem\u003e extends SLList\u003cItem\u003e { private SLList\u003cItem\u003e deletedItems; public VengefulSLList() { deletedItems = new SLList\u003cItem\u003e(); } @Override public Item removeLast() { Item oldBack = super.removeLast(); deletedItems.addLast(oldBack); return oldBack; } public void printLostItems() { deletedItems.print(); } } 注意没有super.super的情况 ","date":"2024-07-14","objectID":"/61b-9/:0:0","tags":null,"title":"61B-9: Extends, Casting, Higher Order Functions","uri":"/61b-9/"},{"categories":["UCB-CS61B"],"content":"constructor ","date":"2024-07-14","objectID":"/61b-9/:1:0","tags":null,"title":"61B-9: Extends, Casting, Higher Order Functions","uri":"/61b-9/"},{"categories":["UCB-CS61B"],"content":"Object class Encapsulation ","date":"2024-07-14","objectID":"/61b-9/:2:0","tags":null,"title":"61B-9: Extends, Casting, Higher Order Functions","uri":"/61b-9/"},{"categories":["UCB-CS61B"],"content":"Module Module: A set of methods that work together as a whole to perform some task or set of related tasks. Implementation Inheritance Breaks Encapsulation 注意private 还有 反复自我调用↓ Type Checking and Casting 子类赋值给基类可以，反之不行 Dynamic Method Selection and Casting Puzzle Higher Order Functions (A First Look) 执行类似f(f(x))的操作 Java7及之前不能使用函数指针，考虑实体化一个函数对象 Java8及其以后： 一张图总结继承 ","date":"2024-07-14","objectID":"/61b-9/:3:0","tags":null,"title":"61B-9: Extends, Casting, Higher Order Functions","uri":"/61b-9/"},{"categories":["UCB-CS61B"],"content":"Ad Hoc Testing vs. JUnit public class TestSort { /** Tests the sort method of the Sort class. */ public static testSort() { String[] input = {\"cows\", \"dwell\", \"above\", \"clouds\"}; String[] expected = {\"above\", \"cows\", \"clouds\", \"dwell\"}; Sort.sort(input); org.junit.Assert.assertArrayEquals(expected, input); } public static void main(String[] args) { testSort(); } } Selection Sort 简单介绍一下了，关注点在junit Simpler JUnit Tests ADD, TDD, Integration Testing More On JUnit (Extra) ","date":"2024-07-14","objectID":"/61b-7/:0:0","tags":null,"title":"61B-7: Testing","uri":"/61b-7/"},{"categories":["UCB-CS61B"],"content":" but hard to maintain! Hypernyms, Hyponyms, and Interface Inheritance ","date":"2024-07-14","objectID":"/61b-8/:0:0","tags":null,"title":"61B-8: Inheritance, Implements","uri":"/61b-8/"},{"categories":["UCB-CS61B"],"content":"interface public interface List61B\u003cItem\u003e { public void addFirst(Item x); public void addLast(Item y); public Item getFirst(); public Item getLast(); public Item removeLast(); public Item get(int i); public void insert(Item x, int position); public int size(); } Overriding vs. Overloading override注意加上@Override!!! Interface Inheritance 基类存放指针问题 Answer: If X is a superclass of Y, then memory boxes for X may contain Y. An AList is-a List. Therefore List variables can hold ALList addresses. Implementation Inheritance: Default Methods public interface List61B\u003cItem\u003e { public void addFirst(Item x); public void addLast(Item y); public Item getFirst(); public Item getLast(); public Item removeLast(); public Item get(int i); public void insert(Item x, int position); public int size(); default public void print() { for (int i = 0; i \u003c size(); i += 1) { System.out.print(get(i) + \" \"); } System.out.println(); } } Static and Dynamic Type, Dynamic Method Selection ⚠️ ⚠️ ⚠️ More Dynamic Method Selection, Overloading vs. Overriding ⚠️ ⚠️ ⚠️ 紧紧盯住细节！ Interface vs. Implementation Inheritance ","date":"2024-07-14","objectID":"/61b-8/:1:0","tags":null,"title":"61B-8: Inheritance, Implements","uri":"/61b-8/"},{"categories":["UCB-CS61B"],"content":"From IntList to SLList 事实是在SLList里面添加一个Intlist数据成员 Public vs. Private or Nested Classes 介绍了private ","date":"2024-07-14","objectID":"/61b-4/:0:0","tags":null,"title":"61B-4: SLLists, Nested Classes, Sentinel Nodes","uri":"/61b-4/"},{"categories":["UCB-CS61B"],"content":"Nested Classes public class SLList { public class IntNode { public int item; public IntNode next; public IntNode(int i, IntNode n) { item = i; next = n; } } private IntNode first; public SLList(int x) { first = new IntNode(x, null); } ... } addLast() and size() 讨论recursion和iteration两种思路，略过 空间换时间初见 Sentinel Nodes 对边界现象（空指针）的讨论和保护 简化代码.addLast(x) ","date":"2024-07-14","objectID":"/61b-4/:1:0","tags":null,"title":"61B-4: SLLists, Nested Classes, Sentinel Nodes","uri":"/61b-4/"},{"categories":["UCB-CS61B"],"content":"Doubly Linked Lists 注意只有sentinel时要讨论一些特殊情况，特别是环状链表。 Generic Lists 泛型列表 public class SLList\u003cBleepBlorp\u003e { private IntNode sentinel; private int size; public class IntNode { public BleepBlorp item; public IntNode next; ... } ... } SLList\u003cInteger\u003e s1 = new SLList\u003c\u003e(5); s1.insertFront(10); SLList\u003cString\u003e s2 = new SLList\u003c\u003e(\"hi\"); s2.insertFront(\"apple\"); Arrays, AList 介绍了System.arraycopy()用来resize 2D Arrays Arrays vs. Classes array的runtime动态索引（和cpp不一样） class runtime ","date":"2024-07-14","objectID":"/61b-5/:0:0","tags":null,"title":"61B-5: DLLists, Arrays","uri":"/61b-5/"},{"categories":["UCB-CS61B"],"content":"A Last Look at Linked Lists Naive Array Lists public class AList { private int[] items; private int size; public AList() { items = new int[100]; size = 0; } public void addLast(int x) { items[size] = x; size += 1; } public int getLast() { return items[size - 1]; } public int get(int i) { return items[i]; } public int size() { return size; } } Resizing Arrays public void addLast(int x) { if (size == items.length) { int[] a = new int[size + 1]; System.arraycopy(items, 0, a, 0, size); items = a; } items[size] = x; size += 1; } private void resize(int capacity) { int[] a = new int[capacity]; System.arraycopy(items, 0, a, 0, size); items = a; } public void addLast(int x) { if (size == items.length) { resize(size + 1); } items[size] = x; size += 1; } 几何resize ","date":"2024-07-14","objectID":"/61b-6/:0:0","tags":null,"title":"61B-6: ALists, Resizing, vs. SLists","uri":"/61b-6/"},{"categories":["UCB-CS61B"],"content":"memory usage 仔细考量 Generic ALists public class AList\u003cGlorp\u003e { private Glorp[] items; private int size; public AList() { items = (Glorp []) new Object[8]; size = 0; } private void resize(int cap) { Glorp[] a = (Glorp []) new Object[cap]; // reinterprets as Glorp[] System.arraycopy(items, 0, a, 0, size); items = a; } public Glorp get(int i) { return items[i]; } public Glorp deleteBack() { Glorp returnItem = getBack(); items[size - 1] = null; // to help garbage collection size -= 1; return returnItem; } ... ","date":"2024-07-14","objectID":"/61b-6/:1:0","tags":null,"title":"61B-6: ALists, Resizing, vs. SLists","uri":"/61b-6/"},{"categories":["UCB-CS61B"],"content":"java oop Java is an object oriented language with strict requirements: Every Java file must contain a class declaration*. All code lives inside a class*, even helper functions, global constants, etc. To run a Java program, you typically define a main method using public static void main(String[] args) *: This is not completely true, e.g. we can also declare “interfaces” in .Java files that may contain code. We’ll cover these later. ","date":"2024-07-14","objectID":"/61b-1/:1:0","tags":null,"title":"61B-1: Intro, Hello World Java","uri":"/61b-1/"},{"categories":["UCB-CS61B"],"content":"Java and Static Typing The compiler checks that all the types in your program are compatible before the program ever runs! This is unlike a language like Python, where type checks are performed DURING execution. ","date":"2024-07-14","objectID":"/61b-1/:2:0","tags":null,"title":"61B-1: Intro, Hello World Java","uri":"/61b-1/"},{"categories":["UCB-CS61B"],"content":"编译初看 ","date":"2024-07-14","objectID":"/61b-2/:1:0","tags":null,"title":"61B-2: Defining and Using Classes","uri":"/61b-2/"},{"categories":["UCB-CS61B"],"content":"Defining and Instantiating Classes Static vs. Instance Members ","date":"2024-07-14","objectID":"/61b-2/:2:0","tags":null,"title":"61B-2: Defining and Using Classes","uri":"/61b-2/"},{"categories":["UCB-CS61B"],"content":"Static vs. Non-static public static void main(String[] args) Using Libraries ","date":"2024-07-14","objectID":"/61b-2/:3:0","tags":null,"title":"61B-2: Defining and Using Classes","uri":"/61b-2/"},{"categories":["UCB-CS61B"],"content":"Primitive Types 8 primitive types in Java: byte, short, int, long, float, double, boolean, char Everything else, including arrays, is a reference type. ","date":"2024-07-14","objectID":"/61b-3/:0:0","tags":null,"title":"61B-3: References, Recursion, and Lists","uri":"/61b-3/"},{"categories":["UCB-CS61B"],"content":"The Golden Rule of Equals (GRoE) Given variables y and x: y = x copies all the bits from x into y. Reference Types Everything else, including arrays, is a reference type. 和cpp的区别之一不显式使用指针 Parameter Passing pass by value 😋 pass by reference（某种意义上java纯纯pass by value 😏） Instantiation of Arrays IntList and Linked Data Structures 单链表，不赘述 ","date":"2024-07-14","objectID":"/61b-3/:1:0","tags":null,"title":"61B-3: References, Recursion, and Lists","uri":"/61b-3/"},{"categories":null,"content":"CS61ABC DATA100(DS100) 触动的瞬间😋 ","date":"2024-07-14","objectID":"/beyondcode/thinking1/:0:0","tags":null,"title":"Thinking1","uri":"/beyondcode/thinking1/"},{"categories":null,"content":"记录2024寒假时候的思考 ","date":"2024-07-14","objectID":"/beyondcode/thinking0/:0:0","tags":null,"title":"Thinking0","uri":"/beyondcode/thinking0/"},{"categories":["DATA100"],"content":"lambda function lambda x: x**2 非显式定义函数，可以直接使用lambda表达式来定义一个函数。 This is a lambda function that takes in one argument x and returns the square of x. 再看sort_values() 注意传递key df.sort_values(by='column_name', keys=lambda x: x.str.lower(), ascending=True) ","date":"2024-07-14","objectID":"/datal4/:1:0","tags":["pandas"],"title":"DATA100-L4: Pandas Ⅱ","uri":"/datal4/"},{"categories":["DATA100"],"content":"add move modify and so on sort by length of string approach1: create a new column and add to original df newdf = df[\"Name\"].str.len() # create a new column with length of each string df['length'] = newdf df.sort_values(by='length', ascending=True) drop column ","date":"2024-07-14","objectID":"/datal4/:2:0","tags":["pandas"],"title":"DATA100-L4: Pandas Ⅱ","uri":"/datal4/"},{"categories":["DATA100"],"content":"groupby.agg ","date":"2024-07-14","objectID":"/datal4/:3:0","tags":["pandas"],"title":"DATA100-L4: Pandas Ⅱ","uri":"/datal4/"},{"categories":["DATA100"],"content":"never use loops in this class! df.groupby('column_name').agg(f) f is a dictionary of functions to apply to each column. The function can be a lambda function or a named function. ","date":"2024-07-14","objectID":"/datal4/:3:1","tags":["pandas"],"title":"DATA100-L4: Pandas Ⅱ","uri":"/datal4/"},{"categories":["DATA100"],"content":"groupby type: pandas.core.groupby.generic.DataFrameGroupBy ","date":"2024-07-14","objectID":"/datal4/:4:0","tags":["pandas"],"title":"DATA100-L4: Pandas Ⅱ","uri":"/datal4/"},{"categories":["DATA100"],"content":"filter df.groupby('column_name').filter(lambda x: x['column_name'].mean() \u003e 10) This will return a new DataFrame with only the groups that have a mean value greater than 10. ","date":"2024-07-14","objectID":"/datal4/:4:1","tags":["pandas"],"title":"DATA100-L4: Pandas Ⅱ","uri":"/datal4/"},{"categories":["DATA100"],"content":"multi index 多维索引 using pivot_table() df.pivot_table(index=['column1', 'column2'], columns='column3', values='column4', aggfunc='mean') This will create a multi-index pivot table with the specified index and columns, and the mean of column4 for each group. using groupby() df.groupby(['column1', 'column2']).agg({'column3': 'mean', 'column4':'sum'}) This will group the DataFrame by column1 and column2, and calculate the mean and sum of column3 and column4 for each group. ","date":"2024-07-14","objectID":"/datal4/:4:2","tags":["pandas"],"title":"DATA100-L4: Pandas Ⅱ","uri":"/datal4/"},{"categories":["DATA100"],"content":"joining tables left.merge(right, on='column_name', how='inner', lefton='column_name_left', righton='column_name_right') ","date":"2024-07-14","objectID":"/datal4/:5:0","tags":["pandas"],"title":"DATA100-L4: Pandas Ⅱ","uri":"/datal4/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"hw01.ipynb\") HW 1: Math Review and Plotting 重点在coding，理论供参考 ","date":"2024-07-14","objectID":"/datahw01/:0:0","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Due Date: Thursday Jan 27, 11:59 PM ","date":"2024-07-14","objectID":"/datahw01/:1:0","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Collaboration Policy Data science is a collaborative activity. While you may talk with others about the homework, we ask that you write your solutions individually. If you do discuss the assignments with others please include their names at the top of your notebook. Collaborators: list collaborators here ","date":"2024-07-14","objectID":"/datahw01/:2:0","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"This Assignment The purpose of this assignment is for you to combine Python, math, and the ideas in Data 8 to draw some interesting conclusions. The methods and results will help build the foundation of Data 100. ","date":"2024-07-14","objectID":"/datahw01/:3:0","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Score Breakdown Question Points 1a 1 1b 2 2a 1 2b 1 2c 2 2d 2 2e 1 3a 2 3b 2 3c 1 3d 2 3e 2 4a 1 4b 1 4c 1 4d 1 5a 1 5b 1 5d 3 6a 2 6b(i) 2 6b(ii) 2 6c 2 Total 36 ","date":"2024-07-14","objectID":"/datahw01/:4:0","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Before You Start For each question in the assignment, please write down your answer in the answer cell(s) right below the question. We understand that it is helpful to have extra cells breaking down the process towards reaching your final answer. If you happen to create new cells below your answer to run code, NEVER add cells between a question cell and the answer cell below it. It will cause errors when we run the autograder, and it will sometimes cause a failure to generate the PDF file. Important note: The local autograder tests will not be comprehensive. You can pass the automated tests in your notebook but still fail tests in the autograder. Please be sure to check your results carefully. ","date":"2024-07-14","objectID":"/datahw01/:5:0","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Initialize your environment This cell should run without error if you’re using the course Jupyter Hub or you have set up your personal computer correctly. import numpy as np import matplotlib import matplotlib.pyplot as plt plt.style.use('fivethirtyeight') ","date":"2024-07-14","objectID":"/datahw01/:5:1","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Preliminary: Jupyter Shortcuts Here are some useful Jupyter notebook keyboard shortcuts. To learn more keyboard shortcuts, go to Help -\u003e Keyboard Shortcuts in the menu above. Here are a few we like: ctrl+return : Evaluate the current cell shift+return: Evaluate the current cell and move to the next esc : command mode (may need to press before using any of the commands below) a : create a cell above b : create a cell below dd : delete a cell m : convert a cell to markdown y : convert a cell to code ","date":"2024-07-14","objectID":"/datahw01/:5:2","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Preliminary: NumPy You should be able to understand the code in the following cells. If not, review the following: The Data 8 Textbook Chapter on NumPy DS100 NumPy Review Condensed NumPy Review The Official NumPy Tutorial Jupyter pro-tip: Pull up the docs for any function in Jupyter by running a cell with the function name and a ? at the end: np.arange? \u001b[1;31mDocstring:\u001b[0m arange([start,] stop[, step,], dtype=None, *, device=None, like=None) Return evenly spaced values within a given interval. ``arange`` can be called with a varying number of positional arguments: * ``arange(stop)``: Values are generated within the half-open interval ``[0, stop)`` (in other words, the interval including `start` but excluding `stop`). * ``arange(start, stop)``: Values are generated within the half-open interval ``[start, stop)``. * ``arange(start, stop, step)`` Values are generated within the half-open interval ``[start, stop)``, with spacing between values given by ``step``. For integer arguments the function is roughly equivalent to the Python built-in :py:class:`range`, but returns an ndarray rather than a ``range`` instance. When using a non-integer step, such as 0.1, it is often better to use `numpy.linspace`. See the Warning sections below for more information. Parameters ---------- start : integer or real, optional Start of interval. The interval includes this value. The default start value is 0. stop : integer or real End of interval. The interval does not include this value, except in some cases where `step` is not an integer and floating point round-off affects the length of `out`. step : integer or real, optional Spacing between values. For any output `out`, this is the distance between two adjacent values, ``out[i+1] - out[i]``. The default step size is 1. If `step` is specified as a position argument, `start` must also be given. dtype : dtype, optional The type of the output array. If `dtype` is not given, infer the data type from the other input arguments. device : str, optional The device on which to place the created array. Default: None. For Array-API interoperability only, so must be ``\"cpu\"`` if passed. .. versionadded:: 2.0.0 like : array_like, optional Reference object to allow the creation of arrays which are not NumPy arrays. If an array-like passed in as ``like`` supports the ``__array_function__`` protocol, the result will be defined by it. In this case, it ensures the creation of an array object compatible with that passed in via this argument. .. versionadded:: 1.20.0 Returns ------- arange : ndarray Array of evenly spaced values. For floating point arguments, the length of the result is ``ceil((stop - start)/step)``. Because of floating point overflow, this rule may result in the last element of `out` being greater than `stop`. Warnings -------- The length of the output might not be numerically stable. Another stability issue is due to the internal implementation of `numpy.arange`. The actual step value used to populate the array is ``dtype(start + step) - dtype(start)`` and not `step`. Precision loss can occur here, due to casting or due to using floating points when `start` is much larger than `step`. This can lead to unexpected behaviour. For example:: \u003e\u003e\u003e np.arange(0, 5, 0.5, dtype=int) array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) \u003e\u003e\u003e np.arange(-3, 3, 0.5, dtype=int) array([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]) In such cases, the use of `numpy.linspace` should be preferred. The built-in :py:class:`range` generates :std:doc:`Python built-in integers that have arbitrary size \u003cpython:c-api/long\u003e`, while `numpy.arange` produces `numpy.int32` or `numpy.int64` numbers. This may result in incorrect results for large integer values:: \u003e\u003e\u003e power = 40 \u003e\u003e\u003e modulo = 10000 \u003e\u003e\u003e x1 = [(n ** power) % modulo for n in range(8)] \u003e\u003e\u003e x2 = [(n ** power) % modulo for n in np.arange(8)] \u003e\u003e\u003e print(x1) [0, 1, 7776, 8801, 6176, 625, 6576, 4001] # correct \u003e\u003e\u003e print(x2) [0, 1, 7776, 7185, 0, 5969, 4816, 3361] # incorrect See Also -------- numpy","date":"2024-07-14","objectID":"/datahw01/:5:3","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Preliminary: LaTeX You should use LaTeX to format math in your answers. If you aren’t familiar with LaTeX, not to worry. It’s not hard to use in a Jupyter notebook. Just place your math in between dollar signs within Markdown cells: $ f(x) = 2x $ becomes $ f(x) = 2x $. If you have a longer equation, use double dollar signs to place it on a line by itself: $$ \\sum_{i=0}^n i^2 $$ becomes: $$ \\sum_{i=0}^n i^2$$ You can align multiple lines using the \u0026 anchor, \\\\ newline, in an align block as follows: \\begin{align} f(x) \u0026= (x - 1)^2 \\\\ \u0026= x^2 - 2x + 1 \\end{align} becomes \\begin{align} f(x) \u0026= (x - 1)^2 \\ \u0026= x^2 - 2x + 1 \\end{align} This PDF has some handy LaTeX. For more about basic LaTeX formatting, you can read this article. ","date":"2024-07-14","objectID":"/datahw01/:5:4","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Preliminary: Sums Here’s a recap of some basic algebra written in sigma notation. The facts are all just applications of the ordinary associative and distributive properties of addition and multiplication, written compactly and without the possibly ambiguous “…”. But if you are ever unsure of whether you’re working correctly with a sum, you can always try writing $\\sum_{i=1}^n a_i$ as $a_1 + a_2 + \\cdots + a_n$ and see if that helps. You can use any reasonable notation for the index over which you are summing, just as in Python you can use any reasonable name in for name in list. Thus $\\sum_{i=1}^n a_i = \\sum_{k=1}^n a_k$. $\\sum_{i=1}^n (a_i + b_i) = \\sum_{i=1}^n a_i + \\sum_{i=1}^n b_i$ $\\sum_{i=1}^n d = nd$ $\\sum_{i=1}^n (ca_i + d) = c\\sum_{i=1}^n a_i + nd$ These properties may be useful in the Least Squares Predictor question. To see the LaTeX we used, double-click this cell. Evaluate the cell to exit. ","date":"2024-07-14","objectID":"/datahw01/:5:5","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 1: Calculus In this question we will review some fundamental properties of the sigmoid function, which will be discussed when we talk more about logistic regression in the latter half of the class. The sigmoid function is defined to be $$\\sigma(x) = \\frac{1}{1+e^{-x}}$$ ","date":"2024-07-14","objectID":"/datahw01/:6:0","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 1a Show that $\\sigma(-x) = 1 - \\sigma(x)$. Note, again: In this class, you must always put your answer in the cell that immediately follows the question. DO NOT create any cells between this one and the one that says Type your answer here, replacing this text. Type your answer here, replacing this text. ","date":"2024-07-14","objectID":"/datahw01/:6:1","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 1b Show that the derivative of the sigmoid function can be written as: $$\\frac{d}{dx}\\sigma(x) = \\sigma(x)(1 - \\sigma(x))$$ This PDF has some handy LaTeX. Type your answer here, replacing this text. ","date":"2024-07-14","objectID":"/datahw01/:6:2","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 2: Probabilities and Proportions Much of data analysis involves interpreting proportions – lots and lots of related proportions. So let’s recall the basics. It might help to start by reviewing the main rules from Data 8, with particular attention to what’s being multiplied in the multiplication rule. ","date":"2024-07-14","objectID":"/datahw01/:7:0","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 2a The Pew Research Foundation publishes the results of numerous surveys, one of which is about the trust that Americans have in groups such as the military, scientists, and elected officials to act in the public interest. A table in the article summarizes the results. Pick one of the options (i) and (ii) to answer the question below; if you pick (i), fill in the blank with the percent. Then, explain your choice. The percent of surveyed U.S. adults who had a great deal of confidence in both scientists and religious leaders (i) is equal to ______________________. (ii) cannot be found with the information in the article. Type your answer here, replacing this text. ","date":"2024-07-14","objectID":"/datahw01/:7:1","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 2b In a famous (or infamous) survey, members of the Harvard medical school were asked to consider a scenario in which “a test to detect a disease whose prevalence is 1/1,000 has a false positive rate of 5 percent”. The terminology, the specific question asked in the survey, and the answer, are discussed in detail in a Stat 88 textbook section that you are strongly encouraged to read. As Stat 88 is a Data 8 connector course, the section is another look at the same ideas as in the corresponding Data 8 textbook section. The corresponding tree diagram is copied below for your reference. The survey did not provide the true positive rate. The respondents and Stat 88 were allowed to assume that the true positive rate is 1, but we will not do so here. Let the true positive rate be some unknown proportion $p$. Suppose a person is picked at random from the population. Let $N$ be the event that the person doesn’t have the disease and let $T_N$ be the event that the person’s test result is negative. Fill in Blanks 1 and 2 with options chosen from (1)-(9). The proportion $P(N \\mid T_N)$ is the number of people who $\\underline{1}$ relative to the total number of people who $\\underline{2}$. (1) are in the population (2) have the disease (3) don’t have the disease (4) test positive (5) test negative (6) have the disease and test positive (7) have the disease and test negative (8) don’t have the disease and test positive (9) don’t have the disease and test negative Assign the variable q4bi to your answer to the first blank and q4bii to your answer to the second blank. q4bi = ... q4bii = ... q4bi, q4bii grader.check(\"q2b\") ","date":"2024-07-14","objectID":"/datahw01/:7:2","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 2c (This is a continuation of the previous part.) Define a function no_disease_given_negative that takes $p$ as its argument and returns $P(N \\mid T_N)$. def no_disease_given_negative(p): ... grader.check(\"q4c\") ","date":"2024-07-14","objectID":"/datahw01/:7:3","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 2d (This part is a continuation of the previous two.) Pick all of the options (i)-(iv) that are true for all values of $p$. Explain by algebraic or probailistic reasoning; you are welcome to use your function no_disease_given_negative to try a few cases numerically. Your explanation should include the reasons why you didn’t choose some options. $P(N \\mid T_N)$ is (i) equal to $0.95$. (ii) equal to $0.999 \\times 0.95$. (iii) greater than $0.999 \\times 0.95$. (iv) greater than $0.95$. Type your answer here, replacing this text. # Use this cell for experimenting if you wish, but your answer should be written in the cell above. ","date":"2024-07-14","objectID":"/datahw01/:7:4","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 2e Suzuki is one of most commonly owned makes of cars in our county (Alameda). A car heading from Berkeley to San Francisco is pulled over on the freeway for speeding. Suppose I tell you that the car is either a Suzuki or a Lamborghini, and you have to guess which of the two is more likely. What would you guess, and why? Make some reasonable assumptions and explain them (data scientists often have to do this), justify your answer, and say how it’s connected to the previous parts. Type your answer here, replacing this text. ","date":"2024-07-14","objectID":"/datahw01/:7:5","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 3: Distributions Visualizing distributions, both categorical and numerical, helps us understand variability. In Data 8 you visualized numerical distributions by drawing histograms, which look like bar charts but represent proportions by the areas of the bars instead of the heights or lengths. In this exercise you will use the hist function in matplotlib instead of the corresponding Table method to draw histograms. To start off, suppose we want to plot the probability distribution of the number of spots on a single roll of a die. That should be a flat histogram since the chance of each of the values 1 through 6 is 1/6. Here is a first attempt at drawing the histogram. faces = range(1, 7) plt.hist(faces) (array([1., 0., 1., 0., 1., 0., 1., 0., 1., 1.]), array([1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5, 5. , 5.5, 6. ]), \u003cBarContainer object of 10 artists\u003e) This default plot is not helpful. We have to choose some arguments to get a visualization that we can interpret. Note that the second printed line shows the left ends of the default bins, as well as the right end of the last bin. The first line shows the counts in the bins. If you don’t want the printed lines you can add a semi-colon at the end of the call to plt.hist, but we’ll keep the lines for now. Let’s redraw the histogram with bins of unit length centered at the possible values. By the end of the exercise you’ll see a reason for centering. Notice that the argument for specifying bins is the same as the one for the Table method hist. unit_bins = np.arange(0.5, 6.6) plt.hist(faces, bins = unit_bins) (array([1., 1., 1., 1., 1., 1.]), array([0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5]), \u003cBarContainer object of 6 artists\u003e) We need to see the edges of the bars! Let’s specify the edge color ec to be white. Here are all the colors you could use, but do try to drag yourself away from the poetic names. plt.hist(faces, bins = unit_bins, ec='white') (array([1., 1., 1., 1., 1., 1.]), array([0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5]), \u003cBarContainer object of 6 artists\u003e) That’s much better, but look at the vertical axis. It is not drawn to the density scale defined in Data 8. We want a histogram of a probability distribution, so the total area should be 1. We just have to ask for that. plt.hist(faces, bins = unit_bins, ec='white', density=True) (array([0.16666667, 0.16666667, 0.16666667, 0.16666667, 0.16666667, 0.16666667]), array([0.5, 1.5, 2.5, 3.5, 4.5, 5.5, 6.5]), \u003cBarContainer object of 6 artists\u003e) That’s the probability histogram of the number of spots on one roll of a die. The proportion is $1/6$ in each of the bins. Note: You may notice that running the above cells also displayed the return value of the last function call of each cell. This was intentional on our part to show you how plt.hist() (documentation) returned different values per plot. Note 2: Going forward, you can use a semicolon ; on the last line to suppress additional display, as below. plt.hist(faces, bins = unit_bins, ec='white', density=True); ","date":"2024-07-14","objectID":"/datahw01/:8:0","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 3a Define a function integer_distribution that takes an array of integers and draws the histogram of the distribution using unit bins centered at the integers and white edges for the bars. The histogram should be drawn to the density scale. The left-most bar should be centered at the smallest integer in the array, and the right-most bar at the largest. Your function does not have to check that the input is an array consisting only of integers. The display does not need to include the printed proportions and bins. If you have trouble defining the function, go back and carefully read all the lines of code that resulted in the probability histogram of the number of spots on one roll of a die. Pay special attention to the bins. def integer_distribution(x): bins = np.arange(min(x) - 0.5, max(x) + 1.5) plt.hist(x, bins=bins, ec='white',density=True) integer_distribution(faces) ","date":"2024-07-14","objectID":"/datahw01/:8:1","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 3b (Note: You can complete this part with just prerequisite knowledge for Data 100. That being said, Lecture 2 provides additional historical context and definitions for probability sample, sampling bias, and chance error). One way to use probability samples is to quantify sampling bias and chance error. Put briefly, if we assume that a sample distribution was selected at random from a known population, then we can quantify how likely that sample is to have arisen due to random chance (chance error). If the difference in sample and population distributions is too great, then we suspect that the given sample has bias in how it was selected from the population. Let’s see this process in a post-analysis of pre-election polling of the 1936 U.S. Presidential Election. Through the U.S. electoral college process (we’ll ignore it in this question, but read more here), Franklin D. Roosevelt won the election by an overwhelming margin. The popular vote results were approximately 61% Roosevelt (Democrat, incumbent), 37% Alf Landon (Republican), and 2% other candidates. For this problem, this is our population distribution. You can use np.random.multinomial to simulate drawing at random with replacement from a categorical distribution. The arguments are the sample size n and an array pvals of the proportions in all the categories. The function simulates n independent random draws from the distribution and returns the observed counts in all the categories. Read the documentation to see how this is described formally; we will use the formal terminology and notation in future assignments after we have discussed them in class. You will see that the function also takes a third argument size, which for our purposes will be an integer that specifies the number of times to run the entire simulation. All the runs are independent of each other. Write one line of code that uses np.random.multinomial to run 10 independent simulations of drawing 100 times at random with replacement from a population in which 61% of the people vote for Roosevelt, 37% for Landon, and 2% for other candidatdes. The output should be an array containing the counts in the Roosevelt category in the 10 simulations. It will help to recall how to slice NumPy arrays. Assign your answer to the variable sample. sample = np.random.multinomial(100, [0.61, 0.37, 0.02], size=10)[:, 0] sample array([54, 65, 58, 53, 66, 58, 61, 56, 60, 57], dtype=int32) grader.check(\"q3b\") q3b passed! 🙌 ","date":"2024-07-14","objectID":"/datahw01/:8:2","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 3c Replace the “…” in the code cell below with a Python expression so that the output of the cell is an empirical histogram of 500,000 simulated counts of voters for Roosevelt in 100 draws made at random with replacement from the voting population. After you have drawn the histogram, you might want to take a moment to recall the conclusion reached by the Literary Digest, a magazine that—while having successfully predicted the outcome of many previous presidential elections—failed to correctly predict the winner of the 1936 presidential election. In their survey of 10 million individuals, they predicted the popular vote as just 43% for Roosevelt and 57% for Landon. Based on our simulation, there was most definitely sampling bias in the Digest’s sampling process. simulated_counts = np.random.multinomial(100, [0.61, 0.37, 0.02], size=500000)[:, 0] integer_distribution(simulated_counts) ","date":"2024-07-14","objectID":"/datahw01/:8:3","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 3d As you know, the count of Roosevelt voters in a sample of 100 people drawn at random from the eligible population is expected to be 61. Just by looking at the histogram in Part c, and no other calculation, pick the correct option and explain your choice. You might want to refer to the Data 8 textbook again. The SD of the distribution of the number of Roosevelt voters in a random sample of 100 people drawn from the eligible population is closest to (i) 1.9 (ii) 4.9 (iii) 10.9 (iv) 15.9 Type your answer here. 假设上面图片是对的，用3σ原则粗略估计5左右。 ","date":"2024-07-14","objectID":"/datahw01/:8:4","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 3e The normal curve with mean $\\mu$ and SD $\\sigma$ is defined by $$ f(x) ~ = ~ \\frac{1}{\\sqrt{2\\pi}\\sigma} e^{-\\frac{1}{2}\\frac{(x-\\mu)^2}{\\sigma^2}}, ~~~ -\\infty \u003c x \u003c \\infty $$ Redraw your histogram from Part c and overlay the normal curve with $\\mu = 61$ and $\\sigma$ equal to the choice you made in Part d. You just have to call plt.plot after integer_distribution. Use np.e for $e$. For the curve, use 2 as the line width, and any color that is easy to see over the blue histogram. It’s fine to just let Python use its default color. Now you can see why centering the histogram bars over the integers was a good idea. The normal curve peaks at 26, which is the center of the corresponding bar. mu = 61 sigma = 4.9 x = np.linspace(40, 80, 200) f_x = 1/(sigma * np.sqrt(2 * np.pi)) * np.exp(-(x - mu)**2 / (2 * sigma**2)) plt.plot(x, f_x) integer_distribution(simulated_counts) ","date":"2024-07-14","objectID":"/datahw01/:8:5","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 4: Linear Algebra A common representation of data uses matrices and vectors, so it is helpful to familiarize ourselves with linear algebra notation, as well as some simple operations. Define a vector $\\vec{v}$ to be a column vector. Then, the following properties hold: $c\\vec{v}$ with $c$ some constant $c \\in \\mathbb{R}$, is equal to a new vector where every element in $c\\vec{v}$ is equal to the corresponding element in $\\vec{v}$ multiplied by $c$. For example, $2 \\begin{bmatrix} 1 \\ 2 \\ \\end{bmatrix} = \\begin{bmatrix} 2 \\ 4 \\ \\end{bmatrix}$ $\\vec{v}_1 + \\vec{v}_2$ is equal to a new vector with elements equal to the elementwise addition of $\\vec{v}_1$ and $\\vec{v}_2$. For example, $\\begin{bmatrix} 1 \\ 2 \\ \\end{bmatrix} + \\begin{bmatrix} -3 \\ 4 \\ \\end{bmatrix} = \\begin{bmatrix} -2 \\ 6 \\ \\end{bmatrix}$. The above properties form our definition for a linear combination of vectors. $\\vec{v}_3$ is a linear combination of $\\vec{v}_1$ and $\\vec{v}_2$ if $\\vec{v}_3 = a\\vec{v}_1 + b\\vec{v}_2$, where $a$ and $b$ are some constants. Oftentimes, we stack column vectors to form a matrix. Define the rank of a matrix $A$ to be equal to the maximal number of linearly independent columns in $A$. A set of columns is linearly independent if no column can be written as a linear combination of any other column(s) within the set. For example, let $A$ be a matrix with 4 columns. If three of these columns are linearly independent, but the fourth can be written as a linear combination of the other three, then $\\text{rank}(A) = 3$. For each part below, you will be presented with a set of vectors, and a matrix consisting of those vectors stacked in columns. State the rank of the matrix, and whether or not the matrix is full rank. If the matrix is not full rank, state a linear relationship among the vectors—for example: $\\vec{v}_1 = 2\\vec{v}_2$. ","date":"2024-07-14","objectID":"/datahw01/:9:0","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 4a $$ \\vec{v}_1 = \\begin{bmatrix} 1 \\ 0 \\ \\end{bmatrix} , \\vec{v}_2 = \\begin{bmatrix} 1 \\ 1 \\ \\end{bmatrix} , A = \\begin{bmatrix} \\vert \u0026 \\vert \\ \\vec{v}_1 \u0026 \\vec{v}_2 \\ \\vert \u0026 \\vert \\end{bmatrix}$$ Type your answer here, replacing this text. ","date":"2024-07-14","objectID":"/datahw01/:9:1","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 4b $$ \\vec{v}_1 = \\begin{bmatrix} 3 \\ -4 \\ \\end{bmatrix} , \\vec{v}_2 = \\begin{bmatrix} 0 \\ 0 \\ \\end{bmatrix} , B = \\begin{bmatrix} \\vert \u0026 \\vert \\ \\vec{v}_1 \u0026 \\vec{v}_2 \\ \\vert \u0026 \\vert \\end{bmatrix} $$ Type your answer here, replacing this text. ","date":"2024-07-14","objectID":"/datahw01/:9:2","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 4c $$ \\vec{v}_1 = \\begin{bmatrix} 0 \\ 1 \\ \\end{bmatrix} , \\vec{v}_2 = \\begin{bmatrix} 5 \\ 0 \\ \\end{bmatrix} , \\vec{v}_3 = \\begin{bmatrix} 10 \\ 10 \\ \\end{bmatrix} , C = \\begin{bmatrix} \\vert \u0026 \\vert \u0026 \\vert \\ \\vec{v}_1 \u0026 \\vec{v}_2 \u0026 \\vec{v}_3 \\ \\vert \u0026 \\vert \u0026 \\vert \\end{bmatrix} $$ Type your answer here, replacing this text. ","date":"2024-07-14","objectID":"/datahw01/:9:3","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 4d $$ \\vec{v}_1 = \\begin{bmatrix} 0 \\ 2 \\ 3 \\ \\end{bmatrix} , \\vec{v}_2 = \\begin{bmatrix} -2 \\ -2 \\ 5 \\ \\end{bmatrix} , \\vec{v}_3 = \\begin{bmatrix} 2 \\ 4 \\ -2 \\ \\end{bmatrix} , D = \\begin{bmatrix} \\vert \u0026 \\vert \u0026 \\vert \\ \\vec{v}_1 \u0026 \\vec{v}_2 \u0026 \\vec{v}_3 \\ \\vert \u0026 \\vert \u0026 \\vert \\end{bmatrix} $$ Type your answer here, replacing this text. ","date":"2024-07-14","objectID":"/datahw01/:9:4","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 5: A Least Squares Predictor Let the list of numbers $(x_1, x_2, \\ldots, x_n)$ be data. You can think of each index $i$ as the label of a household, and the entry $x_i$ as the annual income of Household $i$. Define the mean or average $\\mu$ of the list to be $$\\mu ~ = ~ \\frac{1}{n}\\sum_{i=1}^n x_i.$$ ","date":"2024-07-14","objectID":"/datahw01/:10:0","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 5a The $i$ th deviation from average is the difference $x_i - \\mu$. In Data 8 you saw in numerical examples that the sum of all these deviations is 0. Now prove that fact. That is, show that $\\sum_{i=1}^n (x_i - \\mu) = 0$. Type your answer here, replacing this text. ","date":"2024-07-14","objectID":"/datahw01/:10:1","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 5b Recall that the variance of a list is defined as the mean squared deviation from average, and that the standard deviation (SD) of the list is the square root of the variance. The SD is in the same units as the data and measures the rough size of the deviations from average. Denote the variance of the list by $\\sigma^2$. Write a math expression for $\\sigma^2$ in terms of the data ($x_{1} \\dots x_{n}$) and $\\mu$. We recommend building your expression by reading the definition of variance from right to left. That is, start by writing the notation for “average”, then “deviation from average”, and so on. Type your answer here, replacing this text. ","date":"2024-07-14","objectID":"/datahw01/:10:2","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Mean Squared Error Suppose you have to predict the value of $x_i$ for some $i$, but you don’t get to see $i$ and you certainly don’t get to see $x_i$. You decide that whatever $x_i$ is, you’re just going to use some number $c$ as your predictor. The error in your prediction is $x_i - c$. Thus the mean squared error (MSE) of your predictor $c$ over the entire list of $n$ data points can be written as: $$MSE(c) = \\frac{1}{n}\\sum_{i=1}^n (x_i - c)^2.$$ You may already see some similarities to your definition of variance from above! You then start to wonder—if you picked your favorite number $c = \\mu$ as the predictor, would it be “better” than other choices $c \\neq \\mu$? ","date":"2024-07-14","objectID":"/datahw01/:10:3","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 5c One common approach to defining a “best” predictor is as predictor that minimizes the MSE on the data $(x_1, \\dots, x_n)$. In this course, we commonly use calculus to find the predictor $c$ as follows: Define $MSE$ to be a function of $c$, i.e., $MSE(c)$ as above. Assume that the data points $x_1, x_2, …, x_n$ are fixed, and that $c$ is the only variable. Determine the value of $c$ that minimizes $MSE(c)$. Justify that this is indeed a minimum, not a maximum. Step 1 is done for you in the problem statement; follow steps 2 and 3 to show that $\\mu$ is the value of $c$ that minimizes $MSE(c)$. You must do both steps. Type your answer here, replacing this text. Your proof above shows that $\\mu$ is the least squares constant predictor. ","date":"2024-07-14","objectID":"/datahw01/:10:4","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 6: A More Familiar Least Squares Predictor In Data 8 you found (numerically) the least squares linear predictor of a variable $y$ based on a related variable $x$. In this course, we will prove your findings using a generalization of your calculation in the previous question. When we get to this proof later in this course, you will need to be comfortable with vector operations. For now, you will get familiar with this notation by rewriting your least squares findings from Data 8 (and the previous question) using vector notation. This question won’t require you to write LaTeX, so just focus on the mathematical notation we’re presenting. ","date":"2024-07-14","objectID":"/datahw01/:11:0","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"The Dot Product (1) We start by defining the dot product of two real vectors $x = \\begin{bmatrix} x_1 \\ x_2 \\ \\dots \\ x_n \\end{bmatrix}$ and $y = \\begin{bmatrix} y_1 \\ y_2 \\ \\dots \\ y_n \\end{bmatrix}$ as follows: $$x^T y = \\sum_{i=1}^n x_i y_i $$ Given the above definition, the dot product is (1) a scalar, not another vector; and (2) only defined for two vectors of the same length. Note: In this course we often opt for $x$ instead of $\\vec{x}$ to simplify notation; $x$ as a vector is inferred from its use in the dot product. Then $x_i$ is the $i$-th element of the vector $x$. Detail: In this course, we prefer the notation $x^Ty$ to illustrate a dot product, defined as matrix multiplication of $x^T$ and $y$. In the literature you may also see $x \\cdot y$, but we avoid this notation since the dot ($\\cdot$) notation is occasionally used for scalar values. Detail: The dot product is a special case of an inner product, where $x, y \\in \\mathbb{R}^n$. (2) We introduce a special vector, $\\mathbb{1}$, to write the mean $\\bar{x}$ of data $(x_1, x_2, \\dots, x_n)$ as a dot product: \\begin{align} \\bar{x} \u0026= \\frac{1}{n}\\sum_{i=1}^n x_i = \\frac{1}{n}\\sum_{i=1}^n 1x_i \\ \u0026= \\frac{1}{n}(x^T\\mathbb{1}). \\end{align} The data $(x_1, \\dots, x_n)$ have been defined as an $n$-dimensional column vector $x$, where $x = \\begin{bmatrix} x_1 \\ x_2 \\ \\dots \\ x_n \\end{bmatrix}$. The special vector $\\mathbb{1}$ is a vector of ones, whose length is defined by the vector operation in which it is used. So with $n$-dimensional column vector $x$, the dot product $x^T\\mathbb{1}$ implies that $\\mathbb{1}$ is an $n$-dimensional column vector where every element is $1$. Because dot products produce scalars, the multiplication of two scalars $\\frac{1}{n}$ and $x^T\\mathbb{1}$ produces another scalar, $\\bar{x}$. Note: We use bar notation for the mean ($\\bar{x}$ instead of $\\mu$) in this problem to differentiate $\\bar{x}$ from $\\bar{y}$, the latter of which is the mean of data $(y_1, \\dots, y_n)$. (3) We can further use this definition of $\\bar{x}$ to additionally write the variance $\\sigma_x^2$ of the data $(x_1, \\dots, x_n)$ as a dot product. Verify for yourself that the below operation defines $\\sigma_x^2$ as a scalar: \\begin{align} \\sigma_x^2 \u0026= \\frac{1}{n}\\sum_{i=1}^n (x_i - \\bar{x})^2 \\ \u0026= \\frac{1}{n}(x - \\bar{x})^T(x - \\bar{x}). \\end{align} ","date":"2024-07-14","objectID":"/datahw01/:11:1","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 6a To verify your understanding of the dot product as defined above, suppose you are working with $n$ datapoints ${(x_1, y_1), (x_2, y_2), \\dots, (x_n, y_n)}$. Define the $x$ data as $(x_1, \\dots, x_n)$ and the $y$ data as $(y_1, \\dots, y_n)$, and define $x$ and $y$ as two $n$-dimensional column vectors, where the $i$-th elements of $x$ and $y$ are $x_i$ and $y_i$, respectively. Define $\\bar{x}$ and $\\bar{y}$ as the means of the $x$ data and $y$ data, respectively. Define $\\sigma_x^2$ and $\\sigma_y^2$ as the variances of the $x$ data and $y$ data, respectively. Therefore $\\sigma_x = \\sqrt{\\sigma_x^2}$ and $\\sigma_y = \\sqrt{\\sigma_y^2}$ are the standard deviations of the $x$ data and $y$ data, respectively. Suppose $n = 32$. What is the dimension of each of the following expressions? Expression (i). Note there are two ways it is written in the literature. $$\\dfrac{1}{\\sigma_x} (x - \\bar{x}) = \\dfrac{x - \\bar{x}}{\\sigma_x} $$ Expression (ii). $$\\dfrac{1}{n} \\left( \\dfrac{x - \\bar{x}}{\\sigma^x}\\right)^T \\left( \\dfrac{x - \\bar{x}}{\\sigma^x}\\right)$$ Assign the variables q6a_i and q6a_ii to an integer representing the dimension of the above expressions (i) and (ii), respectively. q6a_i = ... q6a_ii = ... # do not modify these lines print(f\"Q6a(i) is {q6a_i}-dimensional\") print(f\"Q6a(ii) is {q6a_ii}-dimensional\") grader.check(\"q6a\") ","date":"2024-07-14","objectID":"/datahw01/:11:2","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Dot Products in NumPy Next, we’ll use NumPy’s matrix multiplication operators to compute expressions for the regression line, which you learned in Data 8 was the unique line that minimizes the mean squared error of estimation among all straight lines. At this time, it may be helpful to review the Data 8 section. Before we continue, let’s contextualize our computation by loading in a dataset you saw in Data 8: the relation between weight lifted and shot put distance among surveyed female collegiate athletes. We’ve plotted the point using matplotlib’s scatter function, which you will see in more detail in two weeks. # Run this cell to plot the data. weight_lifted = np.array([ 37.5, 51.5, 61.3, 61.3, 63.6, 66.1, 70. , 92.7, 90.5, 90.5, 94.8, 97. , 97. , 97. , 102. , 102. , 103.6, 100.4, 108.4, 114. , 115.3, 114.9, 114.7, 123.6, 125.8, 119.1, 118.9, 141.1]) shot_put_distance = np.array([ 6.4, 10.2, 12.4, 13. , 13.2, 13. , 12.7, 13.9, 15.5, 15.8, 15.8, 16.8, 17.1, 17.8, 14.8, 15.5, 16.1, 16.2, 17.9, 15.9, 15.8, 16.7, 17.6, 16.8, 17. , 18.2, 19.2, 18.6]) plt.scatter(weight_lifted, shot_put_distance) plt.xlabel(\"Weight Lifted\") plt.ylabel(\"Shot Put Distance\") Looks pretty linear! Let’s try to fit a regression line to this data. Define the vectors $x$ as the weight lifted data vector and $y$ as the shot put distance data vector, respectively, of the college athletes. Then the regression line uses the weight lifted $x$ to predict $\\hat{y}$, which is the linear estimate of the actual value shot put distance $y$ as follows: \\begin{align} \\hat{y} \u0026= \\hat{a} + \\hat{b}{x}\\text{, where} \\ \\hat{a} \u0026= \\bar{y} - \\hat{b}\\bar{x} \\ \\hat{b} \u0026= r \\dfrac{\\sigma_y}{\\sigma_x} \\end{align} $\\bar{x}, \\bar{y}$ and $\\sigma_x, \\sigma_y$ are the means and standard deviations, respectively of the data $x$ and $y$, respectively. Here, $r$ is the correlation coefficient as defined in Data 8! Note: We use the hat $\\hat{}$ notation to indicate values we are estimating: $\\hat{y}$, the predicted shot put distance, as well as $\\hat{a}$ and $\\hat{b}$, the respective estimated intercept and slope parameters we are using to model the “best” linear predictor of $y$ from $x$. We’ll dive into this later in the course. Note: Remember how we dropped the $\\vec{}$ vector notation? These linear regression equations therefore represent both the scalar case (predict a single value $\\hat{y}$ from a single $x$) and the vector case (predict a vector $\\hat{y}$ element-wise from a vector $x$). How convenient!! In this part, instead of using NumPy’s built-in statistical functions like np.mean() and np.std(), you are going to use NumPy’s matrix operations to create the components of the regression line from first principles. The @ operator multiplies NumPy matrices or arrays together (documentation). We can use this operator to write functions to compute statistics on data, using the expressions that we defined in part (a). Check it out: # Just run this cell. def dot_mean(arr): n = len(arr) all_ones = np.ones(n) # creates n-dimensional vector of ones return (arr.T @ all_ones)/n def dot_var(arr): n = len(arr) mean = dot_mean(arr) zero_mean_arr = arr - mean return (zero_mean_arr.T @ zero_mean_arr)/n def dot_std(arr): return np.sqrt(dot_var(arr)) print(\"np.mean(weight_lifted) =\", np.mean(weight_lifted), \"\\tdot_mean(weight_lifted) =\", dot_mean(weight_lifted)) print(\"np.var(weight_lifted) =\", np.std(weight_lifted), \"\\tdot_var(weight_lifted =\", dot_var(weight_lifted)) print(\"np.std(weight_lifted) =\", np.std(weight_lifted), \"\\tdot_std(weight_lifted =\", dot_std(weight_lifted)) Now, you will write code to define the expressions you explored in part (a) of this question. ","date":"2024-07-14","objectID":"/datahw01/:11:3","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 6b (i) Use the NumPy @ operator to compute expression (i) from part (a). For convenience, we’ve rewritten the expression below. Note that this expression is also referred to as $x$ in standard units (Data 8 textbook section). $$\\dfrac{x - \\bar{x}}{\\sigma_x} $$ Write the body of the function dot_su which takes in a 1-D NumPy array arr and returns arr in standard units. Do not use np.mean(), np.std(), np.var(), np.sum() nor any Python loops. You should only use a subset of @, /, +, -, len(), the dot_mean(), dot_var(), and dot_std() functions defined above. def dot_su(arr): ... # do not edit below this line q6bi_su = dot_su(weight_lifted) q6bi_su grader.check(\"q6bi\") ","date":"2024-07-14","objectID":"/datahw01/:11:4","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 6b (ii) Next use the NumPy @ operator to compute the correlation coefficient $r$, which is expression (ii) from part (a). For convenience, we’ve rewritten the expression below. $$r = \\dfrac{1}{n} \\left( \\dfrac{x - \\bar{x}}{\\sigma^x}\\right)^T \\left( \\dfrac{x - \\bar{x}}{\\sigma^x}\\right)$$ Write the body of the function dot_corr_coeff which takes in two 1-D NumPy arrays x and y and returns the correlation coefficient of x and y. As before, Do not use np.mean(), np.std(), np.var(), np.sum() nor any Python loops. As before, you should only use a subset of @, /, +, -, len(), the dot_mean(), dot_var(), and dot_std() functions defined above. You may also use the dot_su() function that you defined in the previous part. def dot_corr_coeff(x, y): ... # do not edit below this line q6bii_r = dot_corr_coeff(weight_lifted, shot_put_distance) q6bii_r grader.check(\"q6bii\") ","date":"2024-07-14","objectID":"/datahw01/:11:5","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Question 6c We’re ready to put everything together! Finally, use the dot_-prefixed functions in this question to compute the regression line. For convenience, we’ve rewritten the expressions below. $\\hat{y}$ is the linear estimate of the value $y$ based on $x$. \\begin{align} \\hat{y} \u0026= \\hat{a} + \\hat{b}{x}\\text{, where} \\ \\hat{a} \u0026= \\bar{y} - \\hat{b}\\bar{x} \\ \\hat{b} \u0026= r \\dfrac{\\sigma_y}{\\sigma_x} \\end{align} Define the functions compute_a_hat and compute_b_hat which return the intercept and slope, respectively, of the regression line defind above for a linear estimator of y using x. Verify how the functions are used to plot the linear regression line (implemented for you). As before, Do not use np.mean(), np.std(), np.var(), np.sum(), or any for loops. You may use a subset of @, /, +, -, len(), dot_mean(), dot_var(), dot_std(), dot_su(), dot_corr_coeff(). Hint: You may want to define a_hat in terms of b_hat. def compute_a_hat(x, y): ... def compute_b_hat(x, y): ... # do not edit below this line a_hat = compute_a_hat(weight_lifted, shot_put_distance) b_hat = compute_b_hat(weight_lifted, shot_put_distance) shot_put_hats = a_hat + b_hat * weight_lifted plt.scatter(weight_lifted, shot_put_distance) # the actual data plt.plot(weight_lifted, shot_put_hats, color='g', alpha=0.5) # the prediction line, transparent green plt.xlabel(\"Weight Lifted\") plt.ylabel(\"Shot Put Distance\") display(compute_a_hat(weight_lifted, shot_put_distance)) display(compute_b_hat(weight_lifted, shot_put_distance)) grader.check(\"q6c\") To double-check your work, the cell below will rerun all of the autograder tests. grader.check_all() ","date":"2024-07-14","objectID":"/datahw01/:11:6","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"Submission Make sure you have run all cells in your notebook in order before running the cell below, so that all images/graphs appear in the output. The cell below will generate a zip file for you to submit. Please save before exporting! # Save your notebook first, then run this cell to export your submission. grader.export() ","date":"2024-07-14","objectID":"/datahw01/:12:0","tags":["math","plotting"],"title":"DATA100-hw01","uri":"/datahw01/"},{"categories":["DATA100"],"content":"DataFrames: a data structure for tabular data ","date":"2024-07-13","objectID":"/datal3/:1:0","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["DATA100"],"content":"API always remember to turn to GPT/google/doc ","date":"2024-07-13","objectID":"/datal3/:1:1","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["DATA100"],"content":"indexing and loc/iloc generate subsets: loc: an operator select items by labels df.loc[row_indexer, column_indexer] row_indexer: can be a single label, a list of labels, slice（闭区间）, single value column_indexer: same as row_indexer returns a DataFrame or Series iloc: an operator select items by positions df.iloc[row_indexer, column_indexer] row_indexer: numeric index or a list of numeric indices，此时回到python经典索引 左闭右开 column_indexer: same as row_indexer returns a DataFrame or Series 通常情况下，我们使用 loc 进行索引 .head(6) and .tail() to get the first or last few rows of a DataFrame(syntactic sugar) ","date":"2024-07-13","objectID":"/datal3/:2:0","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["DATA100"],"content":"[ ]: context sensitive operator ","date":"2024-07-13","objectID":"/datal3/:3:0","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["DATA100"],"content":"series: a data structure for 1D labeled data ","date":"2024-07-13","objectID":"/datal3/:4:0","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["DATA100"],"content":"index: a array-like object that labels the rows and columns of a DataFrame columns: usually do not have same name. 转换： ","date":"2024-07-13","objectID":"/datal3/:5:0","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["DATA100"],"content":"conditional selection ","date":"2024-07-13","objectID":"/datal3/:6:0","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["DATA100"],"content":"类型意识! 三种数据类型中的哪一个？？？ ","date":"2024-07-13","objectID":"/datal3/:7:0","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["DATA100"],"content":"describe() ","date":"2024-07-13","objectID":"/datal3/:7:1","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["DATA100"],"content":"sample() df.sample(n=5, replace=True) # randomly select 5 rows ","date":"2024-07-13","objectID":"/datal3/:7:2","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["DATA100"],"content":"value_counts() df['column_name'].value_counts() # count the frequency of each value in a column return a Series with the count of each value in the column. ","date":"2024-07-13","objectID":"/datal3/:7:3","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["DATA100"],"content":"unique() df['column_name'].unique() # get all unique values in a column return a numpy array with the unique values in the column. ","date":"2024-07-13","objectID":"/datal3/:7:4","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["DATA100"],"content":"sort_values() df.sort_values(by='column_name', ascending=False) # sort the DataFrame by values in a column return a new DataFrame with the rows sorted by values in a column. ","date":"2024-07-13","objectID":"/datal3/:7:5","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["DATA100"],"content":"reference https://www.textbook.ds100.org/ch/a04/ref_pandas.html https://pandas.pydata.org/pandas-docs/stable/reference/index.html ","date":"2024-07-13","objectID":"/datal3/:8:0","tags":["pandas"],"title":"DATA100-L3: Pandas Ⅰ","uri":"/datal3/"},{"categories":["UCB-CS61B"],"content":"definitions A sort is a permutation (re-arrangement) of a sequence of elements that brings them into order according to some total order. A total order ≼ is: Total: x ≼ y or y ≼ x for all x, y Reflexive: x ≼ x Antisymmetric: x ≼ y and y ≼ x iff x = y (x and y are equivalent). Transitive: x ≼ y and y ≼ z implies x ≼ z. In Java, total order is typically specified by compareTo or compare methods. May be inconsistent with equals! For example sorting an array of Strings by length has items that are equivalent, but not equal, e.g. “cat” and “dog”. Goal of sorting: Given a sequence of elements with Z inversions. Perform a sequence of operations that reduces inversions to 0. ","date":"2024-07-13","objectID":"/61b-32/:1:0","tags":null,"title":"61B-32: Basic Sorting Algorithms","uri":"/61b-32/"},{"categories":["UCB-CS61B"],"content":"Performance definition Characterizations of the runtime efficiency are sometimes called the time complexity of an algorithm. Examples: DFS has time complexity Θ(V+E). Characterizations of the “extra” memory usage of an algorithm is sometimes called the space complexity of an algorithm. DFS has space complexity Θ(V). Note that the graph takes up space Θ(V+E), but we don’t count this as part of the runtime of DFS, since we’re only accounting for the extra space that DFS uses. Selection Sort and Heapsort selection Sort Properties: 直接选择法 in Chinese $Θ(N^2)$ time if we use an array (or similar data structure). ","date":"2024-07-13","objectID":"/61b-32/:2:0","tags":null,"title":"61B-32: Basic Sorting Algorithms","uri":"/61b-32/"},{"categories":["UCB-CS61B"],"content":"Naive Heapsort: Leveraging a Max-Oriented Heap 分析 ","date":"2024-07-13","objectID":"/61b-32/:3:0","tags":null,"title":"61B-32: Basic Sorting Algorithms","uri":"/61b-32/"},{"categories":["UCB-CS61B"],"content":"in-place Heapsort demo ","date":"2024-07-13","objectID":"/61b-32/:4:0","tags":null,"title":"61B-32: Basic Sorting Algorithms","uri":"/61b-32/"},{"categories":["UCB-CS61B"],"content":"performance analysis Merge Sort demo Time complexity, analysis from previous lecture: Θ(N log N runtime) Space complexity with aux array: Costs Θ(N) memory. Also possible to do in-place merge sort, but algorithm is very complicated, and runtime performance suffers by a significant constant factor. Insertion Sort General strategy: Starting with an empty output sequence. Add each item from input, inserting into output at right point. Naive approach, build entirely new output: Demo ","date":"2024-07-13","objectID":"/61b-32/:4:1","tags":null,"title":"61B-32: Basic Sorting Algorithms","uri":"/61b-32/"},{"categories":["UCB-CS61B"],"content":"in-place Insertion Sort Demo 有点像冒泡？ 看上去没什么好的表现？ Shell’s Sort (Extra) (Not on Exam) so far summary ","date":"2024-07-13","objectID":"/61b-32/:5:0","tags":null,"title":"61B-32: Basic Sorting Algorithms","uri":"/61b-32/"},{"categories":["UCB-CS61B"],"content":"Backstory, Partitioning Quick Sort Partition Sort, a.k.a. Quicksort Quicksort Runtime Theoretical analysis: Best case: Θ(N log N) Worst case: Θ(N2) Compare this to Mergesort. Best case: Θ(N log N) Worst case: Θ(N log N) Recall that Θ(N log N) vs. Θ(N2) is a really big deal. So how can Quicksort be the fastest sort empirically? Because on average it is Θ(N log N). Rigorous proof requires probability theory + calculus, but intuition + empirical analysis will hopefully convince you. Argument #2: Quicksort is BST Sort 🤔 ","date":"2024-07-13","objectID":"/61b-33/:0:0","tags":null,"title":"61B-33: Quick Sort","uri":"/61b-33/"},{"categories":["UCB-CS61B"],"content":"so far summary Avoiding the Quicksort Worst Case ","date":"2024-07-13","objectID":"/61b-33/:0:1","tags":null,"title":"61B-33: Quick Sort","uri":"/61b-33/"},{"categories":["UCB-CS61B"],"content":"summary so far ","date":"2024-07-13","objectID":"/61b-33/:1:0","tags":null,"title":"61B-33: Quick Sort","uri":"/61b-33/"},{"categories":["UCB-CS61B"],"content":"Shortest Paths in a DAG (Directed Acyclic Graphs) Dynamic Programming ","date":"2024-07-13","objectID":"/61b-31/:0:0","tags":null,"title":"61B-31: Dynamic Programming","uri":"/61b-31/"},{"categories":["UCB-CS61B"],"content":"the DAG SPT algorithm The DAG SPT algorithm can be thought of as solving increasingly large subproblems: Distance from source to source is very easy, and is just zero. We then tackle distances to vertices that are a bit farther to the right. We repeat this until we get all the way to the end of the graph. Problems grow larger and larger. By “large” we informally mean depending on more and more of the earlier subproblems. This approach of solving increasingly large subproblems is sometimes called dynamic programming. a simple and powerful idea for solving “big problems”: Identify a collection of subproblems. Solve subproblems one by one, working from smallest to largest. Use the answers to the smaller problems to help solve the larger ones. Identification of the “right” subproblems is often quite tricky. Largely beyond scope of CS61B. You’ll study this in much more detail in CS170. Longest Increasing Subsequence The Longest Increasing Subsequence (LIS) problem is a classic dynamic programming problem. ","date":"2024-07-13","objectID":"/61b-31/:1:0","tags":null,"title":"61B-31: Dynamic Programming","uri":"/61b-31/"},{"categories":["UCB-CS61B"],"content":"LLIS Related problem: Find the length of the longest increasing subsequence (LLIS). 动用负数大变小 LIS Using Dynamic Programming 还是对LLIS进行考量 Can think of the Q values as memoized answers to shorter subproblems. Q(K) is the length of the longest subsequence ending at K. Thus, length of the longest subsequence is just the maximum of all Q. no DAG version ","date":"2024-07-13","objectID":"/61b-31/:2:0","tags":null,"title":"61B-31: Dynamic Programming","uri":"/61b-31/"},{"categories":["UCB-CS61B"],"content":"summary of LLIS solutions ","date":"2024-07-13","objectID":"/61b-31/:3:0","tags":null,"title":"61B-31: Dynamic Programming","uri":"/61b-31/"},{"categories":["UCB-CS61B"],"content":"#1 ","date":"2024-07-13","objectID":"/61b-31/:3:1","tags":null,"title":"61B-31: Dynamic Programming","uri":"/61b-31/"},{"categories":["UCB-CS61B"],"content":"#2a ","date":"2024-07-13","objectID":"/61b-31/:3:2","tags":null,"title":"61B-31: Dynamic Programming","uri":"/61b-31/"},{"categories":["UCB-CS61B"],"content":"#2b Runtime for Approach 1 (Extra) https://docs.google.com/presentation/d/1RlGUoB0bvKlHkxZXogmWGEzsI9ZXRWlg3ngf1FJkpac/edit#slide=id.g1298bbb99e_0_1920 取决于怎么建立DAG ","date":"2024-07-13","objectID":"/61b-31/:3:3","tags":null,"title":"61B-31: Dynamic Programming","uri":"/61b-31/"},{"categories":["UCB-CS61B"],"content":"pros and cons ","date":"2024-07-13","objectID":"/61b-29/:0:1","tags":null,"title":"61-29: Shortest Paths","uri":"/61b-29/"},{"categories":["UCB-CS61B"],"content":"Graph Problem so far Punchline: DFS and BFS both traverse entire graphs, just in a different order (like preorder, inorder, postorder, and level order for trees). Solving graph problems is often a question of identifying the right traversal. Many traversals may work. Example: DFS for topological sort. BFS for shortest paths. Example: DFS or BFS about equally good for checking existence of path. Dijkstra’s Algorithm problem restatement: Find the shortest paths from source vertex s to some target vertex t. another problem restatement: Find the shortest path from source vertex s to all other vertices. 深层解释 ","date":"2024-07-13","objectID":"/61b-29/:1:0","tags":null,"title":"61-29: Shortest Paths","uri":"/61b-29/"},{"categories":["UCB-CS61B"],"content":"SPT（Shortest Path Tree） Edge Count If G is a connected edge-weighted graph with V vertices and E edges, how many edges are in the Shortest Paths Tree of G? [assume every vertex is reachable] Always V-1: For each vertex, there is exactly one input edge (except source). Insert all vertices into fringe PQ, storing vertices in order of distance from source. Repeat: Remove (closest) vertex v from PQ, and relax all edges pointing from v. Dijkstra’s Algorithm Demo Link. 贪心思想证明 ","date":"2024-07-13","objectID":"/61b-29/:2:0","tags":null,"title":"61-29: Shortest Paths","uri":"/61b-29/"},{"categories":["UCB-CS61B"],"content":"伪代码 http://algs4.cs.princeton.edu/44sp/DijkstraSP.java.html ","date":"2024-07-13","objectID":"/61b-29/:3:0","tags":null,"title":"61-29: Shortest Paths","uri":"/61b-29/"},{"categories":["UCB-CS61B"],"content":"runtime analysis ","date":"2024-07-13","objectID":"/61b-29/:4:0","tags":null,"title":"61-29: Shortest Paths","uri":"/61b-29/"},{"categories":["UCB-CS61B"],"content":"so far graph problems ","date":"2024-07-13","objectID":"/61b-29/:5:0","tags":null,"title":"61-29: Shortest Paths","uri":"/61b-29/"},{"categories":["UCB-CS61B"],"content":"The Problem with Dijkstra’s A* (CS188 Preview) We have only a single target in mind, so we need a different algorithm. How can we do better? A* Demo Link How do we get our estimate? Estimate is an arbitrary heuristic h(v). heuristic: “using experience to learn and improve” Doesn’t have to be perfect! /** h(v) DOES NOT CHANGE as algorithm runs. */ public method h(v) { return computeLineDistance(v.latLong, NYC.latLong); } 可视化两者对比 http://qiao.github.io/PathFinding.js/visual/ ","date":"2024-07-13","objectID":"/61b-29/:5:1","tags":null,"title":"61-29: Shortest Paths","uri":"/61b-29/"},{"categories":["UCB-CS61B"],"content":"Summary ","date":"2024-07-13","objectID":"/61b-29/:6:0","tags":null,"title":"61-29: Shortest Paths","uri":"/61b-29/"},{"categories":["UCB-CS61B"],"content":"graph problems so so far A* Tree Search vs. A* Graph Search Admissibility vs. Consistency (Extra: See CS188 for more) see Iterative DFS (Extra) see ","date":"2024-07-13","objectID":"/61b-29/:7:0","tags":null,"title":"61-29: Shortest Paths","uri":"/61b-29/"},{"categories":["UCB-CS61B"],"content":"warm up MST, Cut Property, Generic MST Algorithm ","date":"2024-07-13","objectID":"/61b-30/:0:0","tags":null,"title":"61B-30: Minimum Spanning Trees","uri":"/61b-30/"},{"categories":["UCB-CS61B"],"content":"MST vs SPT A shortest paths tree depends on the start vertex: Because it tells you how to get from a source to EVERYTHING. There is no source for a MST. Nonetheless, the MST sometimes happens to be an SPT for a specific vertex. 两者关系不大？ ","date":"2024-07-13","objectID":"/61b-30/:1:0","tags":null,"title":"61B-30: Minimum Spanning Trees","uri":"/61b-30/"},{"categories":["UCB-CS61B"],"content":"Cut Property 简单证明 cross bridge 一定在 MST 中。 ","date":"2024-07-13","objectID":"/61b-30/:2:0","tags":null,"title":"61B-30: Minimum Spanning Trees","uri":"/61b-30/"},{"categories":["UCB-CS61B"],"content":"Generic MST Algorithm Start with no edges in the MST. Find a cut that has no crossing edges in the MST. Add smallest crossing edge to the MST. Repeat until V-1 edges. This should work, but we need some way of finding a cut with no crossing edges! Random isn’t a very good idea. Prim’s Algorithm https://docs.google.com/presentation/d/1NFLbVeCuhhaZAM1z3s9zIYGGnhT4M4PWwAc-TLmCJjc/edit#slide=id.g9a60b2f52_0_0 https://docs.google.com/presentation/d/1GPizbySYMsUhnXSXKvbqV4UhPCvrt750MiqPPgU-eCY/edit#slide=id.g9a60b2f52_0_0 ","date":"2024-07-13","objectID":"/61b-30/:3:0","tags":null,"title":"61B-30: Minimum Spanning Trees","uri":"/61b-30/"},{"categories":["UCB-CS61B"],"content":"Prim’s vs. Dijkstra’s Prim’s and Dijkstra’s algorithms are exactly the same, except Dijkstra’s considers “distance from the source”, and Prim’s considers “distance from the tree.” Visit order: Dijkstra’s algorithm visits vertices in order of distance from the source. Prim’s algorithm visits vertices in order of distance from the MST under construction. Relaxation: Relaxation in Dijkstra’s considers an edge better based on distance to source. Relaxation in Prim’s considers an edge better based on distance to tree. ","date":"2024-07-13","objectID":"/61b-30/:4:0","tags":null,"title":"61B-30: Minimum Spanning Trees","uri":"/61b-30/"},{"categories":["UCB-CS61B"],"content":"pseudocode ","date":"2024-07-13","objectID":"/61b-30/:5:0","tags":null,"title":"61B-30: Minimum Spanning Trees","uri":"/61b-30/"},{"categories":["UCB-CS61B"],"content":"runtime Kruskal’s Algorithm conceptual real ","date":"2024-07-13","objectID":"/61b-30/:6:0","tags":null,"title":"61B-30: Minimum Spanning Trees","uri":"/61b-30/"},{"categories":["UCB-CS61B"],"content":"Kruskal’s Algorithm Pseudocode ","date":"2024-07-13","objectID":"/61b-30/:7:0","tags":null,"title":"61B-30: Minimum Spanning Trees","uri":"/61b-30/"},{"categories":["UCB-CS61B"],"content":"runtime ","date":"2024-07-13","objectID":"/61b-30/:8:0","tags":null,"title":"61B-30: Minimum Spanning Trees","uri":"/61b-30/"},{"categories":["UCB-CS61B"],"content":"Summary https://docs.google.com/presentation/d/1I8GSEL0CgT09_JjSUF7MfoRMJkyzPjo8lKRd8XdOaRA/edit#slide=id.g772f8a8e2_0_117 SOTA of compare-based MST algorithms 🆙 ","date":"2024-07-13","objectID":"/61b-30/:9:0","tags":null,"title":"61B-30: Minimum Spanning Trees","uri":"/61b-30/"},{"categories":["UCB-CS61B"],"content":"Depth First Paths “Depth First Search” is a more general term for any graph search algorithm that traverses a graph as deep as possible before backtracking. The term is used for several slightly different algorithms. For example: DFS may refer to the version from the previous lecture that doesn’t use any marks (and thus can get caught in a loop). DFS may refer to the version where vertices are marked. DFS may refer to a version where vertices are marked and source edges recorded (as in Depth First Paths). DFS may refer to other algorithms like the “topological sort algorithm” well discuss later in lecture. And more! space 分析可能是要考虑runtime的内存占用，因为DFS算法需要递归调用，每一次递归调用都会消耗一定的内存。 Graph Traversals 应该讲的是BFS Topological Sorting DFS, then reverse the order of the vertices. public class DepthFirstOrder { private boolean[] marked; private Stack\u003cInteger\u003e reversePostorder; public DepthFirstOrder(Digraph G) { reversePostorder = new Stack\u003cInteger\u003e(); marked = new boolean[G.V()]; for (int v = 0; v \u003c G.V(); v++) { if (!marked[v]) { dfs(G, v); } /** * Perform DFS of all unmarked vertices. * Note: Our algorithm earlier started at vertices with indegree zero. It turns out this * algorithm works no matter where you start! * */ } private void dfs(Digraph G, int v) { marked[v] = true; for (int w : G.adj(v)) { if (!marked[w]) { dfs(G, w); } } reversePostorder.push(v); // After each DFS is done, ‘visit’ vertex by putting on a stack. } public Iterable\u003cInteger\u003e reversePostorder() { return reversePostorder; } } ","date":"2024-07-13","objectID":"/61b-28/:0:0","tags":null,"title":"61B-28:  Graph Traversals","uri":"/61b-28/"},{"categories":["UCB-CS61B"],"content":"now graph problem summary 本质上还是 DFS Breadth First Search “fringe”（边缘）通常指的是一个数据结构，用于存储等待处理的节点。see public class BreadthFirstPaths { private boolean[] marked; private int[] edgeTo; ... private void bfs(Graph G, int s) { Queue\u003cInteger\u003e fringe = new Queue\u003cInteger\u003e(); fringe.enqueue(s); // set up starting vertex marked[s] = true; while (!fringe.isEmpty()) { int v = fringe.dequeue(); /** * for freshly dequeued vertex v, for each neighbor that is unmarked: * Enqueue that neighbor to the fringe. * Mark it. * Set its edgeTo to v. */ for (int w : G.adj(v)) { if (!marked[w]) { fringe.enqueue(w); marked[w] = true; edgeTo[w] = v; } } } } ","date":"2024-07-13","objectID":"/61b-28/:1:0","tags":null,"title":"61B-28:  Graph Traversals","uri":"/61b-28/"},{"categories":["UCB-CS61B"],"content":"For BSTs, the most inefficient way to add is in to put it in order. 在二叉搜索树（BST）中，最低效的方式是按升序或降序插入节点，因为这种方式会导致树变成一条链表，从而使其性能退化到O(n)的时间复杂度。 这里是一个用Java实现的例子，展示了按升序插入节点的二叉搜索树（BST）会变成链表的情况： // 定义树的节点 class TreeNode { int value; TreeNode left; TreeNode right; TreeNode(int value) { this.value = value; this.left = null; this.right = null; } } // 定义二叉搜索树 class BinarySearchTree { private TreeNode root; // 插入节点 public void insert(int value) { root = insertRec(root, value); } private TreeNode insertRec(TreeNode root, int value) { if (root == null) { root = new TreeNode(value); return root; } if (value \u003c root.value) { root.left = insertRec(root.left, value); } else { root.right = insertRec(root.right, value); } return root; } // 打印树的中序遍历 public void inorderTraversal() { inorderRec(root); System.out.println(); } private void inorderRec(TreeNode root) { if (root != null) { inorderRec(root.left); System.out.print(root.value + \" \"); inorderRec(root.right); } } // 打印树的结构（用于调试） public void printTree() { printTreeRec(root, \"\", true); } private void printTreeRec(TreeNode root, String indent, boolean last) { if (root != null) { System.out.print(indent); if (last) { System.out.print(\"R----\"); indent += \" \"; } else { System.out.print(\"L----\"); indent += \"| \"; } System.out.println(root.value); printTreeRec(root.left, indent, false); printTreeRec(root.right, indent, true); } } } // 测试类 public class Main { public static void main(String[] args) { BinarySearchTree bst = new BinarySearchTree(); // 按升序插入节点（1, 2, 3, 4, 5） bst.insert(1); bst.insert(2); bst.insert(3); bst.insert(4); bst.insert(5); System.out.println(\"Inorder Traversal of BST:\"); bst.inorderTraversal(); System.out.println(\"Tree Structure:\"); bst.printTree(); } } ","date":"2024-07-13","objectID":"/61b-26/:0:0","tags":null,"title":"61B-26: Midterm 2 Review","uri":"/61b-26/"},{"categories":["UCB-CS61B"],"content":"代码解析 TreeNode类：定义了树的节点，包括节点的值以及左子节点和右子节点。 BinarySearchTree类：定义了二叉搜索树，包括插入节点的逻辑和中序遍历打印树的结构。 insert方法：将节点按升序插入。由于每个新插入的节点都是比当前节点大的，因此所有新节点都会被插入到右子树上，导致树结构像链表。 printTree方法：用于以结构化方式打印树，用于调试树的结构。 ","date":"2024-07-13","objectID":"/61b-26/:0:1","tags":null,"title":"61B-26: Midterm 2 Review","uri":"/61b-26/"},{"categories":["UCB-CS61B"],"content":"运行结果 插入升序节点后，树的结构将变成链表样式，即每个节点只有右子节点，没有左子节点。 Inorder Traversal of BST: 1 2 3 4 5 Tree Structure: R----1 R----2 R----3 R----4 R----5 可以看到，树的结构变成了一个向右倾斜的链表，说明每个节点只有一个右子节点，没有左子节点。这种结构使得树的性能退化为O(n)的时间复杂度。 more to see https://docs.google.com/presentation/d/1TA-xr-z7df4vnJz6oo4s7OkpGLoVy1EYYTwR_8AVhxA/edit#slide=id.g35a9240b53_0_150 ","date":"2024-07-13","objectID":"/61b-26/:0:2","tags":null,"title":"61B-26: Midterm 2 Review","uri":"/61b-26/"},{"categories":["UCB-CS61B"],"content":"intro ","date":"2024-07-13","objectID":"/61b-27/:0:0","tags":null,"title":"61B-27: Graphs","uri":"/61b-27/"},{"categories":["UCB-CS61B"],"content":"types of graph ","date":"2024-07-13","objectID":"/61b-27/:1:0","tags":null,"title":"61B-27: Graphs","uri":"/61b-27/"},{"categories":["UCB-CS61B"],"content":"terminology ","date":"2024-07-13","objectID":"/61b-27/:2:0","tags":null,"title":"61B-27: Graphs","uri":"/61b-27/"},{"categories":["UCB-CS61B"],"content":"图论问题 s-t Path. Is there a path between vertices s and t? Shortest s-t Path. What is the shortest path between vertices s and t? Cycle. Does the graph contain any cycles? Euler Tour. Is there a cycle that uses every edge exactly once? Hamilton Tour. Is there a cycle that uses every vertex exactly once? Connectivity. Is the graph connected, i.e. is there a path between all vertex pairs? Biconnectivity. Is there a vertex whose removal disconnects the graph? Planarity. Can you draw the graph on a piece of paper with no crossing edges? Isomorphism. Are two graphs isomorphic (the same graph in disguise)? Graph problems: Unobvious which are easy, hard, or computationally intractable. Graph Representations Common Simplification: Integer Vertices ","date":"2024-07-13","objectID":"/61b-27/:3:0","tags":null,"title":"61B-27: Graphs","uri":"/61b-27/"},{"categories":["UCB-CS61B"],"content":"API public class Graph { public Graph(int V): // Create empty graph with v vertices public void addEdge(int v, int w): // add an edge v-w Iterable\u003cInteger\u003e adj(int v): // vertices adjacent to v int V(): // number of vertices int E(): // number of edges ... ","date":"2024-07-13","objectID":"/61b-27/:4:0","tags":null,"title":"61B-27: Graphs","uri":"/61b-27/"},{"categories":["UCB-CS61B"],"content":"#1 Adjacency Matrix ","date":"2024-07-13","objectID":"/61b-27/:5:0","tags":null,"title":"61B-27: Graphs","uri":"/61b-27/"},{"categories":["UCB-CS61B"],"content":"#2 edge set ","date":"2024-07-13","objectID":"/61b-27/:6:0","tags":null,"title":"61B-27: Graphs","uri":"/61b-27/"},{"categories":["UCB-CS61B"],"content":"#3 Adjacency List $\\Theta(V) \\rightarrow \\Theta(V^2) $ √ $$ \\Theta(V+E) $$ 才是有意思的答案 ","date":"2024-07-13","objectID":"/61b-27/:7:0","tags":null,"title":"61B-27: Graphs","uri":"/61b-27/"},{"categories":["UCB-CS61B"],"content":"总结 public class Graph { private final int V; private List\u003cInteger\u003e[] adj; public Graph(int V) { this.V = V; adj = (List\u003cInteger\u003e[]) new ArrayList[V]; // cast! for (int v = 0; v \u003c V; v++) { adj[v] = new ArrayList\u003cInteger\u003e(); } } public void addEdge(int v, int w) { adj[v].add(w); adj[w].add(v); } public Iterable\u003cInteger\u003e adj(int v) { return adj[v]; } } Depth First Traversal https://docs.google.com/presentation/d/1IJyC4cAogU2x3erW7E3hDz8jWDTLoaaot8u2ebHtpto/pub?start=false\u0026loop=false\u0026delayms=3000 ","date":"2024-07-13","objectID":"/61b-27/:8:0","tags":null,"title":"61B-27: Graphs","uri":"/61b-27/"},{"categories":["UCB-CS61B"],"content":"implementation public class Paths { public Paths(Graph G, int s): Find all paths from G boolean hasPathTo(int v): is there a path from s to v? Iterable\u003cInteger\u003e pathTo(int v): path from s to v (if any) } ","date":"2024-07-13","objectID":"/61b-27/:9:0","tags":null,"title":"61B-27: Graphs","uri":"/61b-27/"},{"categories":["UCB-CS61B"],"content":"summary ","date":"2024-07-13","objectID":"/61b-27/:10:0","tags":null,"title":"61B-27: Graphs","uri":"/61b-27/"},{"categories":["UCB-CS61B"],"content":"interface /** (Min) Priority Queue: Allowing tracking and removal of the * smallest item in a priority queue. */ public interface MinPQ\u003cItem\u003e { /** Adds the item to the priority queue. */ public void add(Item x); /** Returns the smallest item in the priority queue. */ public Item getSmallest(); /** Removes the smallest item from the priority queue. */ public Item removeSmallest(); /** Returns the size of the priority queue. */ public int size(); } 全记录下来然后排序？naive way! better way heaps ","date":"2024-07-13","objectID":"/61b-24/:0:0","tags":null,"title":"61B-24: Priority Queues and Heaps","uri":"/61b-24/"},{"categories":["UCB-CS61B"],"content":"bst way see https://goo.gl/wBKdFQ Given a heap, how do we implement PQ operations? getSmallest() - return the item in the root node. add(x) - place the new employee in the last position, and promote as high as possible. removeSmallest() - assassinate the president (of the company), promote the rightmost person in the company to president. Then demote repeatedly, always taking the ‘better’ successor. Tree Representations ","date":"2024-07-13","objectID":"/61b-24/:1:0","tags":null,"title":"61B-24: Priority Queues and Heaps","uri":"/61b-24/"},{"categories":["UCB-CS61B"],"content":"How do we Represent a Tree in Java? ","date":"2024-07-13","objectID":"/61b-24/:2:0","tags":null,"title":"61B-24: Priority Queues and Heaps","uri":"/61b-24/"},{"categories":["UCB-CS61B"],"content":"1a ","date":"2024-07-13","objectID":"/61b-24/:2:1","tags":null,"title":"61B-24: Priority Queues and Heaps","uri":"/61b-24/"},{"categories":["UCB-CS61B"],"content":"1b ","date":"2024-07-13","objectID":"/61b-24/:2:2","tags":null,"title":"61B-24: Priority Queues and Heaps","uri":"/61b-24/"},{"categories":["UCB-CS61B"],"content":"1c ","date":"2024-07-13","objectID":"/61b-24/:2:3","tags":null,"title":"61B-24: Priority Queues and Heaps","uri":"/61b-24/"},{"categories":["UCB-CS61B"],"content":"2 Store keys in an array. Store parentIDs in an array. Similar to what we did with disjointSets. ","date":"2024-07-13","objectID":"/61b-24/:2:4","tags":null,"title":"61B-24: Priority Queues and Heaps","uri":"/61b-24/"},{"categories":["UCB-CS61B"],"content":"3 Store keys in an array. Don’t store structure anywhere. 从左到右分层级编码进入数组 public class Tree3\u003cKey\u003e { Key[] keys; ... public void swim(int k) { if (keys[parent(k)] ≻ keys[k]) { swap(k, parent(k)); swim(parent(k)); } } public int parent(int k) { return (k - 1) / 2; } // 观察法 3b 对比 Data Structures Summary ","date":"2024-07-13","objectID":"/61b-24/:2:5","tags":null,"title":"61B-24: Priority Queues and Heaps","uri":"/61b-24/"},{"categories":["UCB-CS61B"],"content":"Search Data Structures (The particularly abstract ones) ","date":"2024-07-13","objectID":"/61b-24/:3:0","tags":null,"title":"61B-24: Priority Queues and Heaps","uri":"/61b-24/"},{"categories":["UCB-CS61B"],"content":"Traversals Level Order Traverse top-to-bottom, left-to-right (like reading in English): We say that the nodes are ‘visited’ in the given order. Depth First Traversals Preorder, Inorder, Postorder Basic (rough) idea: Traverse “deep nodes” (e.g. A) before shallow ones (e.g. F). ","date":"2024-07-13","objectID":"/61b-25/:0:0","tags":null,"title":"61B-25: Advanced Trees, incl. Geometric","uri":"/61b-25/"},{"categories":["UCB-CS61B"],"content":"preorder preOrder(BSTNode x) { if (x == null) return; print(x.key) preOrder(x.left) preOrder(x.right) } D B A C F E G ","date":"2024-07-13","objectID":"/61b-25/:0:1","tags":null,"title":"61B-25: Advanced Trees, incl. Geometric","uri":"/61b-25/"},{"categories":["UCB-CS61B"],"content":"inorder inOrder(BSTNode x) { if (x == null) return; inOrder(x.left) print(x.key) inOrder(x.right) } A B C D E F G ","date":"2024-07-13","objectID":"/61b-25/:0:2","tags":null,"title":"61B-25: Advanced Trees, incl. Geometric","uri":"/61b-25/"},{"categories":["UCB-CS61B"],"content":"postorder postOrder(BSTNode x) { if (x == null) return; postOrder(x.left) postOrder(x.right) print(x.key) } A C B E G F D ","date":"2024-07-13","objectID":"/61b-25/:0:3","tags":null,"title":"61B-25: Advanced Trees, incl. Geometric","uri":"/61b-25/"},{"categories":["UCB-CS61B"],"content":"trick to think about ","date":"2024-07-13","objectID":"/61b-25/:1:0","tags":null,"title":"61B-25: Advanced Trees, incl. Geometric","uri":"/61b-25/"},{"categories":["UCB-CS61B"],"content":"visitor pattern interface Action\u003cLabel\u003e { void visit(Tree\u003cLabel\u003e T); } class FindPig implements Action\u003cString\u003e { boolean found = false; @Override void visit(Tree\u003cString\u003e T) { if (\"pig\".equals(T.label)) { found = true; } } } void preorderTraverse(Tree\u003cLabel\u003e T, Action\u003cLabel\u003e whatToDo) { if (T == null) { return; } whatToDo.visit(T); /* before we hard coded a print */ preorderTraverse(T.left, whatToDo); preorderTraverse(T.right, whatToDo); } preorderTraverse(someTree, new FindPig()); What is the runtime of a preorder traversal in terms of N, the number of nodes? (in code below, assume the visit action takes constant time) Θ(N) : Every node visited exactly once. Constant work per visit. Level Order Traversal ","date":"2024-07-13","objectID":"/61b-25/:2:0","tags":null,"title":"61B-25: Advanced Trees, incl. Geometric","uri":"/61b-25/"},{"categories":["UCB-CS61B"],"content":"Iterative Deepening public void levelOrder(Tree T, Action toDo) { for (int i = 0; i \u003c T.height(); i += 1) { visitLevel(T, i, toDo); } } // Run visitLevel H times, one for each level. public void visitLevel(Tree T, int level, Action toDo) { if (T == null) { return; } if (lev == 0) { toDo.visit(T.key); } else { visitLevel(T.left(), lev - 1, toDo); visitLevel(T.right(), lev - 1, toDo); } } For algorithms whose runtime depends on height, difference between bushy tree and spindly tree can be huge! Range Finding 问题描述 Easy approach, just do a traversal of the whole tree, and use visitor pattern to collect matching items. $\\Theta(N)$ better way: Pruning, Restricting our search to only nodes that might contain the answers we seek. $\\Theta(log N+R)$ ，其中R是匹配的的个数。 Spatial Trees 2D Range Finding, Building Trees of Two Dimensional Data Optional: Tree Iterators https://docs.google.com/presentation/d/14pqGRZAN_Q60xqYGR3c8XTqHdQT8BVWGPJPC_G_INJQ/edit#slide=id.g75c09ac94_0284 ","date":"2024-07-13","objectID":"/61b-25/:3:0","tags":null,"title":"61B-25: Advanced Trees, incl. Geometric","uri":"/61b-25/"},{"categories":["UCB-CS61B"],"content":"ordered linked list—\u003e binary search tree or skip list (out of course) BST Definitions A tree consists of: A set of nodes. A set of edges that connect those nodes. Constraint: There is exactly one path between any two nodes. In a rooted tree, we call one node the root. Every node N except the root has exactly one parent, defined as the first node on the path from N to the root. Unlike (most) real trees, the root is usually depicted at the top of the tree. A node with no child is called a leaf. In a rooted binary tree, every node has either 0, 1, or 2 children (subtrees). ","date":"2024-07-13","objectID":"/61b-21/:0:0","tags":null,"title":"61B-21: Trees, BSTs","uri":"/61b-21/"},{"categories":["UCB-CS61B"],"content":"Properties of BSTs A binary search tree is a rooted binary tree with the BST property. BST Property. For every node X in the tree: Every key in the left subtree is less than X’s key. Every key in the right subtree is greater than X’s key. One consequence of these rules: No duplicate keys allowed! BST Operations ","date":"2024-07-13","objectID":"/61b-21/:1:0","tags":null,"title":"61B-21: Trees, BSTs","uri":"/61b-21/"},{"categories":["UCB-CS61B"],"content":"Finding a searchKey in a BST static BST find(BST T, Key sk) { if (T == null) return null; if (sk.keyequals(T.label())) return T; else if (sk ≺ T.label()) return find(T.left, sk); else return find(T.right, sk); } runtime: $O(h)$, where $h$ is the height of the tree, i.e., $O(log (N))$, where $N$ is the number of nodes in the tree. ","date":"2024-07-13","objectID":"/61b-21/:2:0","tags":null,"title":"61B-21: Trees, BSTs","uri":"/61b-21/"},{"categories":["UCB-CS61B"],"content":"Inserting a new key into a BST static BST insert(BST T, Key ik) { if (T == null) return new BST(ik); if (ik ≺ T.label()) T.left = insert(T.left, ik); else if (ik ≻ T.label()) T.right = insert(T.right, ik); return T; } ","date":"2024-07-13","objectID":"/61b-21/:3:0","tags":null,"title":"61B-21: Trees, BSTs","uri":"/61b-21/"},{"categories":["UCB-CS61B"],"content":"Deleting a key from a BST no child: simply remove the node. one child: replace the node with its child. two children: find the inorder successor (smallest in the right subtree) and replace the node with it. Then recursively delete the inorder successor from the right subtree. BST Performance ","date":"2024-07-13","objectID":"/61b-21/:4:0","tags":null,"title":"61B-21: Trees, BSTs","uri":"/61b-21/"},{"categories":["UCB-CS61B"],"content":"Tree Height Performance of spindly trees can be just as bad as a linked list! usually, the height of a BST is $O(log(N))$, where $N$ is the number of nodes in the tree. ","date":"2024-07-13","objectID":"/61b-21/:5:0","tags":null,"title":"61B-21: Trees, BSTs","uri":"/61b-21/"},{"categories":["UCB-CS61B"],"content":"Insertion demo Random inserts take on average only Θ(log N) each. ","date":"2024-07-13","objectID":"/61b-21/:6:0","tags":null,"title":"61B-21: Trees, BSTs","uri":"/61b-21/"},{"categories":["UCB-CS61B"],"content":"Deletion demo https://docs.google.com/presentation/d/1rEHpAx8Xu2LnJBWsRPWy8blL20qb96Q5UhdZtQYFkBI/edit#slide=id.g75707c75c_0224 ","date":"2024-07-13","objectID":"/61b-21/:7:0","tags":null,"title":"61B-21: Trees, BSTs","uri":"/61b-21/"},{"categories":["UCB-CS61B"],"content":"To avoid the worst-case time complexity of O(n), we need to use a balanced binary search tree. Tree Rotation Non-obvious fact: Rotation allows balancing of any BST. One way to achieve balance: Rotate after each insertion and deletion to maintain balance. … the mystery is to know which rotations. We’ll come back to this. B-trees / 2-3 trees / 2-3-4 trees ","date":"2024-07-13","objectID":"/61b-22/:0:0","tags":null,"title":"61B-22: Balanced BSTs","uri":"/61b-22/"},{"categories":["UCB-CS61B"],"content":"search tree ","date":"2024-07-13","objectID":"/61b-22/:1:0","tags":null,"title":"61B-22: Balanced BSTs","uri":"/61b-22/"},{"categories":["UCB-CS61B"],"content":"weird solution to achieve balance add leaf overstuff leaf, but can not be too juicy! ","date":"2024-07-13","objectID":"/61b-22/:2:0","tags":null,"title":"61B-22: Balanced BSTs","uri":"/61b-22/"},{"categories":["UCB-CS61B"],"content":"Performance of B-trees Splitting tree is a better name, but I didn’t invent them, so we’re stuck with their real name: B-trees. A B-tree of order M=4 (like we used today) is also called a 2-3-4 tree or a 2-4 tree. The name refers to the number of children that a node can have, e.g. a 2-3-4 tree node may have 2, 3, or 4 children. A B-tree of order M=3 (like in the textbook) is also called a 2-3 tree. Red-Black Trees There are many types of search trees: Binary search trees: Require rotations to maintain balance. There are many strategies for rotation. Coming up with a strategy is hard. 2-3 trees: No rotations required. Clever (and strange idea): Build a BST that is isometric (structurally identical) to a 2-3 tree. Use rotations to ensure the isometry. Since 2-3 trees are balanced, rotations on BST will ensure balance. Maintaining Isometry Through Rotations (Optional) Violations for LLRBs: Two red children. Two consecutive red links. Right red child. Operations for Fixing LLRB Tree Violations: Tree rotations and Color Flips! when insert , use red link if right-insert happens, rotateLeft two red children? two reds in a row? Left-Red-Right-Red? ","date":"2024-07-13","objectID":"/61b-22/:3:0","tags":null,"title":"61B-22: Balanced BSTs","uri":"/61b-22/"},{"categories":["UCB-CS61B"],"content":"summary ","date":"2024-07-13","objectID":"/61b-22/:4:0","tags":null,"title":"61B-22: Balanced BSTs","uri":"/61b-22/"},{"categories":["UCB-CS61B"],"content":"起因，无序array ","date":"2024-07-13","objectID":"/61b-23/:0:0","tags":null,"title":"61B-23: Hashing","uri":"/61b-23/"},{"categories":["UCB-CS61B"],"content":"Using data as an Index One extreme approach: All data is really just bits. Use data itself as an array index. Store true and false in the array. Extremely wasteful of memory. To support checking presence of all positive integers, we need 2 billion booleans. Need some way to generalize beyond integers. public class DataIndexedIntegerSet { boolean[] present; public DataIndexedIntegerSet() { present = new boolean[16]; } public insert(int i) { present[i] = true; } public contains(int i) { return present[i]; } } Binary Representations DataIndexedSet insert a cat 但是有弱点↓ collision handling \u0026 computing a hashCode！ Handling Collisions 抽屉原理告诉我们，不可以只靠扩展数组容量来处理之。 Suppose N items have the same hashcode h: Instead of storing true in position h, store a list of these N items at position h. ","date":"2024-07-13","objectID":"/61b-23/:1:0","tags":null,"title":"61B-23: Hashing","uri":"/61b-23/"},{"categories":["UCB-CS61B"],"content":"external chaining Depends on the number of items in the ‘bucket’. If N items are distributed across M buckets, average time grows with N/M = L, also known as the load factor. Average runtime is Θ(L). Whenever L=N/M exceeds some number, increase M by resizing. 负数索引 Hash Functions ","date":"2024-07-13","objectID":"/61b-23/:2:0","tags":null,"title":"61B-23: Hashing","uri":"/61b-23/"},{"categories":["UCB-CS61B"],"content":"str example @Override public int hashCode() { int hashCode = 1; for (Object o : this) { hashCode = hashCode * 31; hashCode = hashCode + o.hashCode(); } return hashCode; } ","date":"2024-07-13","objectID":"/61b-23/:3:0","tags":null,"title":"61B-23: Hashing","uri":"/61b-23/"},{"categories":["UCB-CS61B"],"content":"recursive example ","date":"2024-07-13","objectID":"/61b-23/:4:0","tags":null,"title":"61B-23: Hashing","uri":"/61b-23/"},{"categories":["UCB-CS61B"],"content":"default hashCode() All Objects have hashCode() function. Default: returns this (i.e. address of object). Can have strange consequences: “hello”.hashCode() is not the same as (“h” + “ello”).hashCode() Can override for your type. Hash tables (HashSet, HashMap, etc.) are so important that Java requires that all objects implement hashCode(). ","date":"2024-07-13","objectID":"/61b-23/:5:0","tags":null,"title":"61B-23: Hashing","uri":"/61b-23/"},{"categories":["UCB-CS61B"],"content":"HashSets and HashMaps Java provides a hash table based implementation of sets and maps. Idea is very similar to what we’ve done in lecture. Warning: Never store mutable objects in a HashSet or HashMap! Warning #2: Never override equals without also overriding hashCode. extra ","date":"2024-07-13","objectID":"/61b-23/:6:0","tags":null,"title":"61B-23: Hashing","uri":"/61b-23/"},{"categories":["UCB-CS61B"],"content":"Big-O Notation ","date":"2024-07-13","objectID":"/61b-19/:1:0","tags":null,"title":"61B-19: Asymptotics III","uri":"/61b-19/"},{"categories":["UCB-CS61B"],"content":"细节分析 ","date":"2024-07-13","objectID":"/61b-19/:2:0","tags":null,"title":"61B-19: Asymptotics III","uri":"/61b-19/"},{"categories":["UCB-CS61B"],"content":"局限性 ","date":"2024-07-13","objectID":"/61b-19/:3:0","tags":null,"title":"61B-19: Asymptotics III","uri":"/61b-19/"},{"categories":["UCB-CS61B"],"content":"对比 Important: Big O does not mean “worst case”! Often abused to mean this. ","date":"2024-07-13","objectID":"/61b-19/:4:0","tags":null,"title":"61B-19: Asymptotics III","uri":"/61b-19/"},{"categories":["UCB-CS61B"],"content":"大O记号的用处 ","date":"2024-07-13","objectID":"/61b-19/:5:0","tags":null,"title":"61B-19: Asymptotics III","uri":"/61b-19/"},{"categories":["UCB-CS61B"],"content":"Big-Omega Notation $\\Omega(f(n))$ ","date":"2024-07-13","objectID":"/61b-19/:6:0","tags":null,"title":"61B-19: Asymptotics III","uri":"/61b-19/"},{"categories":["UCB-CS61B"],"content":"大Ω记号的用处 ","date":"2024-07-13","objectID":"/61b-19/:7:0","tags":null,"title":"61B-19: Asymptotics III","uri":"/61b-19/"},{"categories":["UCB-CS61B"],"content":"非严格证明和严格证明 ","date":"2024-07-13","objectID":"/61b-19/:8:0","tags":null,"title":"61B-19: Asymptotics III","uri":"/61b-19/"},{"categories":["UCB-CS61B"],"content":"不相交集问题 public interface DisjointSets { /** Connects two items P and Q. */ void connect(int p, int q); /** Checks to see if two items are connected. */ boolean isConnected(int p, int q); } ","date":"2024-07-13","objectID":"/61b-20/:0:0","tags":null,"title":"61B-20: Disjoint Sets","uri":"/61b-20/"},{"categories":["UCB-CS61B"],"content":"naive implementation 真的链接两个元素，然后考虑遍历整个集合，判断是否有两个元素是连通的。 ","date":"2024-07-13","objectID":"/61b-20/:0:1","tags":null,"title":"61B-20: Disjoint Sets","uri":"/61b-20/"},{"categories":["UCB-CS61B"],"content":"better implementation Better approach: Model connectedness in terms of sets. How things are connected isn’t something we need to know.😉 ","date":"2024-07-13","objectID":"/61b-20/:0:2","tags":null,"title":"61B-20: Disjoint Sets","uri":"/61b-20/"},{"categories":["UCB-CS61B"],"content":"quick-find public class QuickFindDS implements DisjointSets { private int[] id; // really fast public boolean isConnected(int p, int q) { return id[p] == id[q]; } public void connect(int p, int q) { int pid = id[p]; int qid = id[q]; for (int i = 0; i \u003c id.length; i++) { if (id[i] == pid) { id[i] = qid; } }... } // constructor public QuickFindDS(int N) { id = new int[N]; for (int i = 0; i \u003c N; i++) id[i] = i; } } ","date":"2024-07-13","objectID":"/61b-20/:1:0","tags":null,"title":"61B-20: Disjoint Sets","uri":"/61b-20/"},{"categories":["UCB-CS61B"],"content":"quick-union 考虑不用数组，用 🌳😋 tree can not be too tall: 树不能太高，否则会退化成链表⚠️ public class QuickUnionDS implements DisjointSets { private int[] parent; public QuickUnionDS(int N) { parent = new int[N]; for (int i = 0; i \u003c N; i++) parent[i] = i; } // linear time to create N trees private int find(int p) { while (p != parent[p]) p = parent[p]; // p[i] and i 很重要！ return p; } public boolean isConnected(int p, int q) { return find(p) == find(q); } public void connect(int p, int q) { int i = find(p); int j = find(q); parent[i] = j; // 合并两个树 } } ","date":"2024-07-13","objectID":"/61b-20/:2:0","tags":null,"title":"61B-20: Disjoint Sets","uri":"/61b-20/"},{"categories":["UCB-CS61B"],"content":"weighted quick-union 希望平衡权重 权重可以是树的大小，也可以是树的深度。 以下考虑元素个数（树的大小） New rule（目前是不加证明的经验公式）: Always link root of smaller tree to larger tree. public class WeightedQuickUnionDS implements DisjointSets { private int[] parent; private int[] size; // size of each tree public WeightedQuickUnionDS(int N) { parent = new int[N]; size = new int[N]; // 增加了size array记录 for (int i = 0; i \u003c N; i++) { parent[i] = i; size[i] = 1; // each tree is of size 1 } } // find and isConnected are the same as before! private int find(int p) { while (p != parent[p]) p = parent[p]; // p[i] and i 很重要！ return p; } public boolean isConnected(int p, int q) { return find(p) == find(q); } public void connect(int p, int q) { int i = find(p); int j = find(q); if (size[i] \u003c size[j]) { parent[i] = j; size[j] += size[i]; // add size of i to j } else { parent[j] = i; size[i] += size[j]; // add size of j to i } } } ","date":"2024-07-13","objectID":"/61b-20/:3:0","tags":null,"title":"61B-20: Disjoint Sets","uri":"/61b-20/"},{"categories":["UCB-CS61B"],"content":"path compression（UCB-CS170😋） 路径压缩：将树的根节点指向树的根节点，减少树的高度。 路径压缩的好处： 减少树的高度，使得find和isConnected的效率更高。 减少内存消耗。 log*(n) is the iterated log - it’s the number of times you need to apply log to n to go below 1. Note that 2^65536 is higher than the number of atoms in the universe. ","date":"2024-07-13","objectID":"/61b-20/:4:0","tags":null,"title":"61B-20: Disjoint Sets","uri":"/61b-20/"},{"categories":["UCB-CS61B"],"content":"不加证明给出目前最极限的情况 $\\alpha(N)$ public class WeightedQuickUnionDSWithPathCompression implements DisjointSets { private int[] parent; private int[] size; public WeightedQuickUnionDSWithPathCompression(int N) { parent = new int[N]; size = new int[N]; for (int i = 0; i \u003c N; i++) { parent[i] = i; size[i] = 1; } } // find 并不会太难 乐 private int find(int p) { if (p == parent[p]) { return p; } else { parent[p] = find(parent[p]); return parent[p]; } } public boolean isConnected(int p, int q) { return find(p) == find(q); } public void connect(int p, int q) { int i = find(p); int j = find(q); if (i == j) return; if (size[i] \u003c size[j]) { parent[i] = j; size[j] += size[i]; } else { parent[j] = i; size[i] += size[j]; } } } ","date":"2024-07-13","objectID":"/61b-20/:4:1","tags":null,"title":"61B-20: Disjoint Sets","uri":"/61b-20/"},{"categories":["UCB-CS61B"],"content":"references Nazca Lines: http://redicecreations.com/ul_img/24592nazca_bird.jpg Implementation code adapted from Algorithms, 4th edition and Professor Jonathan Shewchuk’s lecture notes on disjoint sets, where he presents a faster one-array solution. I would recommend taking a look. (http://www.cs.berkeley.edu/~jrs/61b/lec/33) The proof of the inverse ackermann runtime for disjoint sets is given here: http://www.uni-trier.de/fileadmin/fb4/prof/INF/DEA/Uebungen_LVA-Ankuendigungen/ws07/KAuD/effi.pdf as originally proved by Tarjan here at UC Berkeley in 1975. ","date":"2024-07-13","objectID":"/61b-20/:5:0","tags":null,"title":"61B-20: Disjoint Sets","uri":"/61b-20/"},{"categories":["UCB-CS61B"],"content":"没有捷径，全靠仔细 for loops ","date":"2024-07-13","objectID":"/61b-18/:1:0","tags":null,"title":"61B-18: Asymptotics II","uri":"/61b-18/"},{"categories":["UCB-CS61B"],"content":"recursion 形如$\\Theta(n^k)$, $k$ 是递归的深度 ","date":"2024-07-13","objectID":"/61b-18/:2:0","tags":null,"title":"61B-18: Asymptotics II","uri":"/61b-18/"},{"categories":["UCB-CS61B"],"content":"binary search 形如$\\Theta(\\log n)$ C(N) = ⌊log2(N)⌋+1 ","date":"2024-07-13","objectID":"/61b-18/:3:0","tags":null,"title":"61B-18: Asymptotics II","uri":"/61b-18/"},{"categories":["UCB-CS61B"],"content":"merge sort 形如$\\Theta(n\\log n)$ ","date":"2024-07-13","objectID":"/61b-18/:4:0","tags":null,"title":"61B-18: Asymptotics II","uri":"/61b-18/"},{"categories":["UCB-CS61B"],"content":"Runtime Characterizations In most cases, we care only about asymptotic behavior, i.e. what happens for very large N. ","date":"2024-07-13","objectID":"/61b-17/:1:0","tags":null,"title":"61B-17: Asymptotics I","uri":"/61b-17/"},{"categories":["UCB-CS61B"],"content":"Intuitive Simplification Consider only the worst case. Restrict Attention to One Operation. 找得好并且巧的话可很快看出，退而求其次的话可以考虑画图分析 Eliminate low order terms. Eliminate multiplicative constants. ","date":"2024-07-13","objectID":"/61b-17/:2:0","tags":null,"title":"61B-17: Asymptotics I","uri":"/61b-17/"},{"categories":["UCB-CS61B"],"content":"Big-Theta Notation $\\Theta(f(n))$ The only difference is that we use the Θ symbol anywhere we would have said “order of growth”. ","date":"2024-07-13","objectID":"/61b-17/:3:0","tags":null,"title":"61B-17: Asymptotics I","uri":"/61b-17/"},{"categories":["DATA100"],"content":" # Initialize Otter import otter grader = otter.Notebook(\"lab01.ipynb\") Lab 01 Welcome to the first lab of Data 100! This lab is meant to help you familiarize yourself with JupyterHub, review Python and numpy, and introduce you to matplotlib, a Python visualization library. ","date":"2024-07-13","objectID":"/datalab1/:0:0","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"Part 1: Jupyter Tips ","date":"2024-07-13","objectID":"/datalab1/:1:0","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"Viewing Documentation To output the documentation for a function, use the help function. # help(print) ?print You can also use Jupyter to view function documentation inside your notebook. The function must already be defined in the kernel for this to work. Below, click your mouse anywhere on the print block below and use Shift + Tab to view the function’s documentation. ","date":"2024-07-13","objectID":"/datalab1/:1:1","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"Importing Libraries and Magic Commands import pandas as pd import numpy as np import matplotlib.pyplot as plt plt.style.use('fivethirtyeight') %matplotlib inline %matplotlib inline is a Jupyter magic command that configures the notebook so that Matplotlib displays any plots that you draw directly in the notebook rather than to a file, allowing you to view the plots upon executing your code. (Note: In practice, this is no longer necessary, but we’re showing it to you now anyway.) Another useful magic command is %%time, which times the execution of that cell. You can use this by writing it as the first line of a cell. (Note that %% is used for cell magic commands that apply to the entire cell, whereas % is used for line magic commands that only apply to a single line.) %%time lst = [] for i in range(100): lst.append(i) CPU times: total: 0 ns\rWall time: 0 ns\r","date":"2024-07-13","objectID":"/datalab1/:1:2","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"Keyboard Shortcuts To learn about keyboard shortcuts, go to Help –\u003e Keyboard Shortcuts in the menu above. Here are a few that we like: Ctrl + Return (or Cmd + Return on Mac): Evaluate the current cell Shift + Return: Evaluate the current cell and move to the next ESC : command mode (may need to press before using any of the commands below) a : create a cell above b : create a cell below dd : delete a cell z : undo the last cell operation m : convert a cell to markdown y : convert a cell to code ","date":"2024-07-13","objectID":"/datalab1/:1:3","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"Part 2: Prerequisites ","date":"2024-07-13","objectID":"/datalab1/:2:0","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"Python Python is the main programming language we’ll use in the course. We expect that you’ve taken CS 61A, Data 8, or an equivalent class, so we will not be covering general Python syntax. If any of the following exercises are challenging (or if you would like to refresh your Python knowledge), please review one or more of the following materials. Python Tutorial: Introduction to Python from the creators of Python. Composing Programs Chapter 1: This is more of a introduction to programming with Python. Advanced Crash Course: A fast crash course which assumes some programming background. ","date":"2024-07-13","objectID":"/datalab1/:2:1","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"NumPy NumPy is the numerical computing module introduced in Data 8, which is a prerequisite for this course. Here’s a quick recap of NumPy. For more review, read the following materials. NumPy Quick Start Tutorial DS100 NumPy Review Stanford CS231n NumPy Tutorial The Data 8 Textbook Chapter on NumPy ","date":"2024-07-13","objectID":"/datalab1/:2:2","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"Question 1 The core of NumPy is the array. Like Python lists, arrays store data; however, they store data in a more efficient manner. In many cases, this allows for faster computation and data manipulation. In Data 8, we used make_array from the datascience module, but that’s not the most typical way. Instead, use np.array to create an array. It takes a sequence, such as a list or range. Below, create an array arr containing the values 1, 2, 3, 4, and 5 (in that order). arr = np.array([1,2,3,4,5]) grader.check(\"q1\") q1 passed! 🌟 In addition to values in the array, we can access attributes such as shape and data type. A full list of attributes can be found here. arr[3] np.int64(4)\rarr[2:4] # 左闭右开 array([3, 4])\rarr.shape # 一维长度为5 (5,)\rarr.dtype dtype('int64')\rArrays, unlike Python lists, cannot store items of different data types. # A regular Python list can store items of different data types [1, '3'] [1, '3']\r# Arrays will convert everything to the same data type np.array([1, '3']) array(['1', '3'], dtype='\u003cU21')\r# Another example of array type conversion np.array([5, 8.3]) array([5. , 8.3])\rArrays are also useful in performing vectorized operations. Given two or more arrays of equal length, arithmetic will perform element-wise computations across the arrays. For example, observe the following: # Python list addition will concatenate the two lists [1, 2, 3] + [4, 5, 6] [1, 2, 3, 4, 5, 6]\r# NumPy array addition will add them element-wise np.array([1, 2, 3]) + np.array([4, 5, 6]) array([5, 7, 9])\r","date":"2024-07-13","objectID":"/datalab1/:2:3","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"Question 2 Question 2a Write a function summation that evaluates the following summation for $n \\geq 1$: $$\\sum_{i=1}^{n} i^3 + 3 i^2$$ Note: You should not use for loops in your solution. Check the NumPy documentation. If you’re stuck, try a search engine! Searching the web for examples of how to use modules is very common in data science. # 用好np向量化 def summation(n): \"\"\"Compute the summation i^3 + 3 * i^2 for 1 \u003c= i \u003c= n.\"\"\" arr = np.arange(1, n+1) newArr = arr**3 + 3 * arr**2 return int(np.sum(newArr)) grader.check(\"q2a\") q2a passed! 💯 Question 2b Write a function elementwise_array_sum that computes the square of each value in list_1, the cube of each value in list_2, then returns a list containing the element-wise sum of these results. Assume that list_1 and list_2 have the same number of elements, do not use for loops. The input parameters will both be python lists, so you may need to convert the lists into arrays before performing your operations. The output should be a numpy array. def elementwise_array_sum(list_1, list_2): \"\"\"Compute x^2 + y^3 for each x, y in list_1, list_2. Assume list_1 and list_2 have the same length. Return a NumPy array. \"\"\" assert len(list_1) == len(list_2), \"both args must have the same number of elements\" # create a NumPy array from the two lists arr1 = np.array(list_1) arr2 = np.array(list_2) arr_sum = arr1 ** 2 + arr2 ** 3 return arr_sum grader.check(\"q2b\") q2b passed! 🌟 You might have been told that Python is slow, but array arithmetic is carried out very fast, even for large arrays. Below is an implementation of the above code that does not use NumPy arrays. def elementwise_list_sum(list_1, list_2): \"\"\"Compute x^2 + y^3 for each x, y in list_1, list_2. Assume list_1 and list_2 have the same length. \"\"\" return [x ** 2 + y ** 3 for x, y in zip(list_1, list_2)] For ten numbers, elementwise_list_sum and elementwise_array_sum both take a similar amount of time. sample_list_1 = list(range(10)) sample_array_1 = np.arange(10) %%time elementwise_list_sum(sample_list_1, sample_list_1) CPU times: total: 0 ns\rWall time: 0 ns\r[0, 2, 12, 36, 80, 150, 252, 392, 576, 810]\r%%time elementwise_array_sum(sample_array_1, sample_array_1) CPU times: total: 0 ns\rWall time: 0 ns\rarray([ 0, 2, 12, 36, 80, 150, 252, 392, 576, 810])\rThe time difference seems negligible for a list/array of size 10; depending on your setup, you may even observe that elementwise_list_sum executes faster than elementwise_array_sum! However, we will commonly be working with much larger datasets: sample_list_2 = list(range(100000)) sample_array_2 = np.arange(100000) %%time elementwise_list_sum(sample_list_2, sample_list_2) ; # The semicolon hides the output CPU times: total: 15.6 ms\rWall time: 33.2 ms\r%%time elementwise_array_sum(sample_array_2, sample_array_2) CPU times: total: 0 ns\rWall time: 557 μs\rarray([ 0, 2, 12, ...,\r999920002099982, 999950000799996, 999980000100000])\rWith the larger dataset, we see that using NumPy results in code that executes over 50 times faster! Throughout this course (and in the real world), you will find that writing efficient code will be important; arrays and vectorized operations are the most common way of making Python programs run quickly. Question 2c Recall the formula for population variance below: $$\\sigma^2 = \\frac{\\sum_{i=1}^N (x_i - \\mu)^2}{N}$$ Complete the functions below to compute the population variance of population, an array of numbers. For this question, do not use built in NumPy functions, such as np.var. Again, avoid using for loops! def mean(population): \"\"\" Returns the mean of population (mu) Keyword arguments: population -- a numpy array of numbers \"\"\" # Calculate the mean of a population return sum(population)/float(len(population)) def variance(population): \"\"\" Returns the variance of population (sigma squared) Keyword arguments: population -- a numpy array of numbers \"\"\" # Calculate the variance of a population mu = mean(population) return sum((population-mu) ** 2)/float(len(populati","date":"2024-07-13","objectID":"/datalab1/:2:4","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"Part 3: Plotting Here we explore plotting using matplotlib and numpy. ","date":"2024-07-13","objectID":"/datalab1/:3:0","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"Question 3 Consider the function $f(x) = x^2$ for $-\\infty \u003c x \u003c \\infty$. Question 3a Find the equation of the tangent line to $f$ at $x = 0$. Use LaTeX to type your solution, such that it looks like the serif font used to display the math expressions in the sentences above. HINT: You can click any text cell to see the raw Markdown syntax. $tangent line: 切线$ $y = 0$ Question 3b Find the equation of the tangent line to $f$ at $x = 8$. Please use LaTeX to type your solution. $y = 16x$ Question 3c Write code to plot the function $f$, the tangent line at $x=8$, and the tangent line at $x=0$. Set the range of the x-axis to (-15, 15) and the range of the y-axis to (-100, 300) and the figure size to (4,4). Your resulting plot should look like this (it’s okay if the colors in your plot don’t match with ours, as long as they’re all different colors): You should use the plt.plot function to plot lines. You may find the following functions useful: plt.plot(..) plt.figure(figsize=..) plt.ylim(..) plt.axhline(..) def f(x): return x ** 2 def df(x): return 2*x def plot(f, df): plt.figure(figsize=(4, 4)) x = np.array([-15, 15]) plt.plot(x,f(x),color='blue') plt.plot(x,df(x),color='green') plt.axhline(0,color='red') plt.ylim(-100, 300) plot(f, df) ","date":"2024-07-13","objectID":"/datalab1/:3:1","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"Question 4 (Ungraded) Data science is a rapidly expanding field and no degree program can hope to teach you everything that will be helpful to you as a data scientist. So it’s important that you become familiar with looking up documentation and learning how to read it. Below is a section of code that plots a three-dimensional “wireframe” plot. You’ll see what that means when you draw it. Replace each # Your answer here with a description of what the line above does, what the arguments being passed in are, and how the arguments are used in the function. For example, np.arange(2, 5, 0.2) # This returns an array of numbers from 2 to 5 with an interval size of 0.2 Hint: The Shift + Tab tip from earlier in the notebook may help here. Remember that objects must be defined in order for the documentation shortcut to work; for example, all of the documentation will show for method calls from np since we’ve already executed import numpy as np. However, since z is not yet defined in the kernel, z.reshape(x.shape) will not show documentation until you run the line z = np.cos(squared). from mpl_toolkits.mplot3d import axes3d u = np.linspace(1.5 * np.pi, -1.5 * np.pi, 100) # Your answer here [x, y] = np.meshgrid(u, u) # Your answer here squared = np.sqrt(x.flatten() ** 2 + y.flatten() ** 2) z = np.cos(squared) # Your answer here z = z.reshape(x.shape) # Your answer here fig = plt.figure(figsize = (6, 6)) ax = fig.add_subplot(111, projection = '3d') # Your answer here ax.plot_wireframe(x, y, z, rstride = 5, cstride = 5, lw = 2) # Your answer here ax.view_init(elev = 60, azim = 25) # Your answer here plt.savefig(\"figure1.png\") # Your answer here ","date":"2024-07-13","objectID":"/datalab1/:3:2","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"Question 5 (Ungraded) Do you think that eating french fries with mayonnaise is a crime? Tell us what you think in the following Markdown cell. :) To double-check your work, the cell below will rerun all of the autograder tests. grader.check_all() ","date":"2024-07-13","objectID":"/datalab1/:3:3","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"Submission Make sure you have run all cells in your notebook in order before running the cell below, so that all images/graphs appear in the output. The cell below will generate a zip file for you to submit. Please save before exporting! # Save your notebook first, then run this cell to export your submission. grader.export(pdf=False) ","date":"2024-07-13","objectID":"/datalab1/:4:0","tags":["Jupyter","numpy","matplotlib"],"title":"DATA100-lab1","uri":"/datalab1/"},{"categories":["DATA100"],"content":"two common errors chance error: randomness can vary bias error: systematic error in one direction ","date":"2024-07-13","objectID":"/datal2/:1:0","tags":null,"title":"DATA100-L2: Data Sampling and Probability","uri":"/datal2/"},{"categories":["DATA100"],"content":"bias ","date":"2024-07-13","objectID":"/datal2/:2:0","tags":null,"title":"DATA100-L2: Data Sampling and Probability","uri":"/datal2/"},{"categories":["DATA100"],"content":"common non-random samples convenience samples: samples that are easy to obtain but may not be representative of the population quota samples: samples that are drawn from a limited number of individuals or groups ","date":"2024-07-13","objectID":"/datal2/:3:0","tags":null,"title":"DATA100-L2: Data Sampling and Probability","uri":"/datal2/"},{"categories":["DATA100"],"content":"random samples random can produce biases but we can estimate the bias and chance error properties of random samples: 明确概率 no need to be same chance 😋 scheme of random sampling: “Random sample with replacement” 是统计学中的一个术语，指的是在进行抽样时，每次抽取的样本在放回原总体之后，再进行下一次抽取。这意味着同一个个体或元素有可能被多次抽取。 这种抽样方法的特点包括： 每次抽取都是独立的，即前一次的抽取结果不会影响后一次的抽取。 总体中的每个元素在每次抽取中被选中的概率是相同的。 由于样本被放回，样本的大小可以等于或小于总体的大小。 与之相对的是 “Random sample without replacement”，即不放回抽样，这种情况下，一旦一个元素被抽取，它就不会再次被抽取，因此抽取的样本量总是小于总体的大小。😉 SRS：🤔注意是每个\"pair\"！ ","date":"2024-07-13","objectID":"/datal2/:4:0","tags":null,"title":"DATA100-L2: Data Sampling and Probability","uri":"/datal2/"},{"categories":["DATA100"],"content":"多项式和二项式分布采样 ","date":"2024-07-13","objectID":"/datal2/:5:0","tags":null,"title":"DATA100-L2: Data Sampling and Probability","uri":"/datal2/"},{"categories":["DATA100"],"content":"cycle of data science ","date":"2024-07-12","objectID":"/datal1/:1:0","tags":null,"title":"DATA100-L1: course overview","uri":"/datal1/"},{"categories":["UCB-CS61B"],"content":"math problems $$ N! ∈ \\Omega (N^{N}) ? $$ √ $$ log(N!) ∈ \\Omega (NlogN) ? $$ √ $$ NlogN∈ \\Omega (log(N!)) ? $$ √ 所以可以推出： $$ NlogN ∈ \\Theta (logN!) $$ $$ log(N!) ∈ \\Theta (NlogN) $$ ","date":"2024-07-11","objectID":"/61b-35/:1:0","tags":null,"title":"61B-35: Sorting and Algorithmic Bounds","uri":"/61b-35/"},{"categories":["UCB-CS61B"],"content":"TUCS用时 上下界？ the ultimate comparison sort run time $$ \\Omega(NlogN) $$ $$ O(NlogN) $$ 下面开始证明： 考虑下界，对n个物体进行排序，有N！种可能，用两两比大小，考虑决策树的高度$$ H = \\log_2 N! $$ 因此下界为 $$ \\Omega (log(N!)) $$ 或者 $$ \\Omega (NlogN) $$ 上界通过TUCS的性质可以通过具体示例反证得到，比如用merge sort ","date":"2024-07-11","objectID":"/61b-35/:2:0","tags":null,"title":"61B-35: Sorting and Algorithmic Bounds","uri":"/61b-35/"},{"categories":["UCB-CS61B"],"content":"More quick sort, Stability, Shuffling ","date":"2024-07-11","objectID":"/61b-34/:0:0","tags":null,"title":"61B-34: More Quick Sort, Stability, Shuffling","uri":"/61b-34/"},{"categories":["UCB-CS61B"],"content":"quick sort VS merge sort QuicksortL3S = left + 3-scan + shuffle Quicksort_LTHS: Tony Hoare partition scheme: L ptr 仅仅指向小的 G ptr 仅仅指向大的 ptr walk towards to each other, stopping on a hated item 两个都停下来的话， 交换一下， 然后移动其中一个 when ptrs cross, done. 和G交换pivot ","date":"2024-07-11","objectID":"/61b-34/:1:0","tags":null,"title":"61B-34: More Quick Sort, Stability, Shuffling","uri":"/61b-34/"},{"categories":["UCB-CS61B"],"content":"Not random smarter pivot selection: median Quicksort_PickTH 考虑了如何计算数组地址的复杂度， 以及如何选择pivot的复杂度。 worst case: $$ \\Theta(NlogN) $$ 但实际上并没有那么好，因为计算中位数的复杂度是$$\\Theta(N)$$。耗费了更多时间。 ","date":"2024-07-11","objectID":"/61b-34/:2:0","tags":null,"title":"61B-34: More Quick Sort, Stability, Shuffling","uri":"/61b-34/"},{"categories":["UCB-CS61B"],"content":"quick select–using partitioning worst case: a sorted array $$ \\Theta(N^2) $$ on average: $$ N + N/2 + N/4 +… + 1 = \\Theta(N) $$ ","date":"2024-07-11","objectID":"/61b-34/:3:0","tags":null,"title":"61B-34: More Quick Sort, Stability, Shuffling","uri":"/61b-34/"},{"categories":["UCB-CS61B"],"content":"stability for stable sort, we need to keep the relative order of equal elements Is insertion sort stable? yes, it is stable. Is quick sort stable? depends on the partitioning scheme. ","date":"2024-07-11","objectID":"/61b-34/:4:0","tags":null,"title":"61B-34: More Quick Sort, Stability, Shuffling","uri":"/61b-34/"},{"categories":["UCB-CS61B"],"content":"adaptive array.sort() is adaptive 查看java官方文档 ","date":"2024-07-11","objectID":"/61b-34/:5:0","tags":null,"title":"61B-34: More Quick Sort, Stability, Shuffling","uri":"/61b-34/"},{"categories":["UCB-CS61B"],"content":"shuffling random number and then sort ","date":"2024-07-11","objectID":"/61b-34/:6:0","tags":null,"title":"61B-34: More Quick Sort, Stability, Shuffling","uri":"/61b-34/"},{"categories":["UCB-CS61B"],"content":"信息无损性 模糊性 ","date":"2024-07-11","objectID":"/61b-38/:0:0","tags":null,"title":"61B-38: Compression","uri":"/61b-38/"},{"categories":["UCB-CS61B"],"content":"prefix-free codes ","date":"2024-07-11","objectID":"/61b-38/:1:0","tags":null,"title":"61B-38: Compression","uri":"/61b-38/"},{"categories":["UCB-CS61B"],"content":"Huffman codes ","date":"2024-07-11","objectID":"/61b-38/:1:1","tags":null,"title":"61B-38: Compression","uri":"/61b-38/"},{"categories":["UCB-CS61B"],"content":"shannon-fano codes using tries to convert compressed data into a original data longest prefix matching ","date":"2024-07-11","objectID":"/61b-38/:1:2","tags":null,"title":"61B-38: Compression","uri":"/61b-38/"},{"categories":["UCB-CS61B"],"content":"self-extracting bits ","date":"2024-07-11","objectID":"/61b-38/:2:0","tags":null,"title":"61B-38: Compression","uri":"/61b-38/"},{"categories":["UCB-CS61B"],"content":"Overview ","date":"2024-07-11","objectID":"/61b-37/:1:0","tags":null,"title":"61B-37:overview, Tries","uri":"/61b-37/"},{"categories":["UCB-CS61B"],"content":"Tries——前缀树/字典树 usages: prefix matching approximate matching keysWithPrefix(String prefix) // returns all keys in the trie that start with the given prefix longestPrefixOf(String query) // returns the longest key in the trie that is a prefix of the query ","date":"2024-07-11","objectID":"/61b-37/:2:0","tags":null,"title":"61B-37:overview, Tries","uri":"/61b-37/"},{"categories":["UCB-CS61B"],"content":"implementation private class Node{ boolean exists; Map\u003cCharacter, Node\u003e links; public Node(){ links = new TreeMap\u003c\u003e(); exists = false; } } ","date":"2024-07-11","objectID":"/61b-37/:3:0","tags":null,"title":"61B-37:overview, Tries","uri":"/61b-37/"},{"categories":["UCB-CS61B"],"content":"T9 keyboard ","date":"2024-07-11","objectID":"/61b-37/:4:0","tags":null,"title":"61B-37:overview, Tries","uri":"/61b-37/"},{"categories":["UCB-CS61B"],"content":"Ternary search Tries public class TSTSet\u003cValue\u003e{ private Node\u003cValue\u003e root; private static class Node\u003cValue\u003e{ private char c; private Node\u003cValue\u003e lo, mid, hi; } } 但是这种实现方式表现不佳 ","date":"2024-07-11","objectID":"/61b-37/:5:0","tags":null,"title":"61B-37:overview, Tries","uri":"/61b-37/"},{"categories":["UCB-CS61B"],"content":"radix sort 不用comparisons的排序算法，时间复杂度O(dn)，d为最大数的位数，n为待排序数的个数。 空间换时间 bucket sort counting sort: 找出待排序数的最大值max，确定计数数组的长度为max+1。 遍历待排序数，将每个数的个位数值作为索引，将该索引对应的计数数组元素加1。 遍历计数数组，将每个元素的值作为索引，将该索引对应的元素值输出到结果数组中。 runtime: O(n+k) LSD radix sort: least significant digit radix sort 找出待排序数的最大值max，确定计数数组的长度为10。 遍历待排序数，将每个数的个位数值作为索引，将该索引对应的计数数组元素加1。 LSD sort vs merge sort: similar strings:LSD sort is better dissimilar strings:merge sort is better MSD radix sort: most significant digit radix sort 找出待排序数的最大值max，确定计数数组的长度为10。 遍历待排序数，将每个数的个位数值作为索引，将该索引对应的计数数组元素加1。 遍历计数数组，将每个元素的值作为索引，将该索引对应的元素值输出到结果数组中。 runtime: O(n+k) ","date":"2024-07-10","objectID":"/61b-36/:0:0","tags":null,"title":"61B-36: Radix Sorts","uri":"/61b-36/"},{"categories":["TOOLS"],"content":"文件状态 未跟踪-未修改-已修改-暂存 git add \u003cname\u003e - *-\u003e暂存 git commit -m \"message\" - 暂存-\u003e未修改 git rm \u003cname\u003e - 未修改-\u003e未跟踪 ","date":"2024-06-29","objectID":"/tools/git/git/:1:0","tags":null,"title":"Git","uri":"/tools/git/git/"},{"categories":["TOOLS"],"content":"查看状态 git status 更加细致几行几列 git diff 查看历史日志 git log --pretty=oneline git log --graph --oneline --decorate ","date":"2024-06-29","objectID":"/tools/git/git/:1:1","tags":null,"title":"Git","uri":"/tools/git/git/"},{"categories":["TOOLS"],"content":"基本操作 ","date":"2024-06-29","objectID":"/tools/git/git/:2:0","tags":null,"title":"Git","uri":"/tools/git/git/"},{"categories":["TOOLS"],"content":"基础配置 git config --global user.name \"your name\" git config --global user.email \"your email\" ","date":"2024-06-29","objectID":"/tools/git/git/:2:1","tags":null,"title":"Git","uri":"/tools/git/git/"},{"categories":["TOOLS"],"content":"创建版本库 mkdir myproject cd myproject git init ","date":"2024-06-29","objectID":"/tools/git/git/:2:2","tags":null,"title":"Git","uri":"/tools/git/git/"},{"categories":["TOOLS"],"content":"克隆版本库 git clone https://github.com/username/repository.git ","date":"2024-06-29","objectID":"/tools/git/git/:2:3","tags":null,"title":"Git","uri":"/tools/git/git/"},{"categories":["TOOLS"],"content":"跟踪文件or文件夹 git add \u003cfilename\u003e git rm \u003cfilename\u003e git rm --cache \u003cfilename\u003e ","date":"2024-06-29","objectID":"/tools/git/git/:2:4","tags":null,"title":"Git","uri":"/tools/git/git/"},{"categories":["TOOLS"],"content":"设置缓存状态 git add git reset HEAD \u003cfilename\u003e ","date":"2024-06-29","objectID":"/tools/git/git/:2:5","tags":null,"title":"Git","uri":"/tools/git/git/"},{"categories":["TOOLS"],"content":"提交修改 git commit -m \"commit message str\" 撤销非首次修改 git reset head~ --soft ","date":"2024-06-29","objectID":"/tools/git/git/:2:6","tags":null,"title":"Git","uri":"/tools/git/git/"},{"categories":["TOOLS"],"content":"和github联系 git remote add origin https://github.com/username/repository.git git remote git remote rename origin old_name 推到远程仓库 git push origin master ssh连接？ ","date":"2024-06-29","objectID":"/tools/git/git/:2:7","tags":null,"title":"Git","uri":"/tools/git/git/"},{"categories":["TOOLS"],"content":"分支管理 创建分支 git branch --list git branch hhzz git checkout hhzz git checkout -b hhzz 合并分支 git merge hhzz 删除分支 git branch -d hhzz ","date":"2024-06-29","objectID":"/tools/git/git/:2:8","tags":null,"title":"Git","uri":"/tools/git/git/"},{"categories":["TOOLS"],"content":"贮藏功能 stash 待施工 ","date":"2024-06-29","objectID":"/tools/git/git/:2:9","tags":null,"title":"Git","uri":"/tools/git/git/"},{"categories":["TOOLS"],"content":"重置、换基功能 待施工 ","date":"2024-06-29","objectID":"/tools/git/git/:2:10","tags":null,"title":"Git","uri":"/tools/git/git/"},{"categories":["TOOLS"],"content":"Regular Expressions ","date":"2024-06-29","objectID":"/tools/reg/:0:0","tags":null,"title":"正则表达式笔记","uri":"/tools/reg/"},{"categories":["TOOLS"],"content":"注意版本和文档！ ","date":"2024-06-29","objectID":"/tools/reg/:1:0","tags":null,"title":"正则表达式笔记","uri":"/tools/reg/"},{"categories":["TOOLS"],"content":"常用工具 https://regex101.com/ https://regexr.com/ python re模块 字符 . 匹配任意一个字符 [] 匹配括号中的任意一个字符,如 [a-zA-Z1-3] 匹配大写字母或小写字母或数字1-3, [^] 匹配除了括号中的字符 预定字符类 \\d 匹配数字 \\D 匹配非数字 \\w 匹配字母、数字或下划线 \\W 匹配非字母、数字或下划线 \\s 匹配空白字符或者tab \\S 匹配非空白字符 边界匹配 ^ 匹配字符串的开头 $ 匹配字符串的结尾 \\b 匹配单词的边界, 如 \\bthe\\b 匹配the \\B 匹配非单词边界 数量词 * 匹配前面的字符0次或多次 + 匹配前面的字符1次或多次 ? 匹配前面的字符0次或1次 {n} 匹配前面的字符n次 {n,} 匹配前面的字符至少n次 {n,m} 匹配前面的字符至少n次, 至多m次 非贪婪匹配 量词默认是贪婪匹配, 即尽可能多的匹配字符, 如 a.*b 会匹配到最长的以a开头的b 后面的量词加上? 则为非贪婪匹配, 即尽可能少的匹配字符, 如 a.*?b 会匹配到最短的以a开头的b 分组与捕获 () 用来创建分组, 捕获括号中的字符, 并在匹配时返回匹配到的内容 [] 用来创建字符类, 如 [Pp] 匹配P或p | 用来创建或关系, 如 a(bc|de) 匹配a后面是bc或de \\n 引用分组, 如 \\1 引用第一个分组 $n 引用第n个分组 ?: 非捕获分组, 如 (?:abc) 匹配abc, 不捕获匹配到的内容 前瞻和后顾 正向前瞻 (?=abc) 匹配abc前面的字符 反向前瞻 (?!abc) 匹配abc前面的字符 正向后顾 (?\u003c=abc) 匹配abc后面的字符 反向后顾 (?\u003c!abc) 匹配abc后面的字符 ","date":"2024-06-29","objectID":"/tools/reg/:2:0","tags":null,"title":"正则表达式笔记","uri":"/tools/reg/"},{"categories":["Programming Language Crash Course"],"content":"learning pointer(advanced version) 为了防止搞混而写 ","date":"2024-05-05","objectID":"/crash/cpp1/:0:0","tags":["C++"],"title":"C++ ptr","uri":"/crash/cpp1/"},{"categories":["Programming Language Crash Course"],"content":"下标为0?首地址? void test0(){ int arr[] = {1, 2, 3}; cout \u003c\u003c \u0026arr[0] \u003c\u003c endl; cout \u003c\u003c \u0026arr \u003c\u003c endl; cout \u003c\u003c arr \u003c\u003c endl; } arr \u0026arr \u0026arr[0] 存储的都是相同的地址 arr 常量指针不能被改变 ","date":"2024-05-05","objectID":"/crash/cpp1/:0:1","tags":["C++"],"title":"C++ ptr","uri":"/crash/cpp1/"},{"categories":["Programming Language Crash Course"],"content":"指向数组元素的指针(不一定是首元素)以用[]来访问数组元素 void test2() { int a[3] = {1,2,3}; int *p = a; p++; cout \u003c\u003c p[0] \u003c\u003c endl; // 2 } ","date":"2024-05-05","objectID":"/crash/cpp1/:0:2","tags":["C++"],"title":"C++ ptr","uri":"/crash/cpp1/"},{"categories":["Programming Language Crash Course"],"content":"数组类型的指针 void test2(){ int arr[] = {1, 2, 3}; int (*p)[] = \u0026arr; // 定义一个指向数组的指针 cout \u003c\u003c (*p)[0] \u003c\u003c endl; // 输出数组首地址 cout \u003c\u003c p[0] \u003c\u003c endl; // 输出数组首地址 cout \u003c\u003c p[0][0] \u003c\u003c endl; // 输出数组首元素 } int *p[] = \u0026arr vs int (*p)[] = \u0026arr???? [ ]优先级高于* int (*p)[] = \u0026arr; *p --\u003e 一个指针 （*p）[] --\u003e 指向数组的指针 int (*p)[] --\u003e 指向的数组的元素是int类型 p = \u0026arr 定义了一个指向数组的指针，(*p) = arr 解引用指针得到数组首地址，(*p)[0] = arr[0] 访问数组首元素 p[0] = arr 访问数组首地址，p[0][0] = arr[0] 访问数组首元素 ","date":"2024-05-05","objectID":"/crash/cpp1/:0:3","tags":["C++"],"title":"C++ ptr","uri":"/crash/cpp1/"},{"categories":["Programming Language Crash Course"],"content":"那么int *(*p)[] = { };水到渠成了 ","date":"2024-05-05","objectID":"/crash/cpp1/:0:4","tags":["C++"],"title":"C++ ptr","uri":"/crash/cpp1/"},{"categories":["Programming Language Crash Course"],"content":"内存映像图 内存映像图 1 2 … 内存地址从上往下递增 和CSAPP里面的栈画法有点不一样 ","date":"2024-05-05","objectID":"/crash/cpp1/:0:5","tags":["C++"],"title":"C++ ptr","uri":"/crash/cpp1/"},{"categories":["Programming Language Crash Course"],"content":"delete 申请一个连续的内存块，然后将其视为二维数组： int** arr = new int*[rows]; for (int i = 0; i \u003c rows; ++i) { arr[i] = new int[cols]; } 释放时，你需要先释放每一行的内存，然后释放行指针数组： for (int i = 0; i \u003c rows; ++i) { delete[] arr[i]; } delete[] arr; 申请一个足够大的连续内存块，然后将其视为二维数组： int* arr = new int[rows * cols]; 在这种情况下，你只需要释放一次： delete[] arr; 注意，这种方式下，arr实际上是一个一维数组，但是你可以像访问二维数组一样使用它（例如，arr[i][j]实际上是arr[i * cols + j]）。 确保在释放内存后将指针设置为nullptr，以避免悬垂指针问题： delete[] arr; arr = nullptr; // 或者使用智能指针自动管理内存 ","date":"2024-05-05","objectID":"/crash/cpp1/:0:6","tags":["C++"],"title":"C++ ptr","uri":"/crash/cpp1/"},{"categories":["Programming Language Crash Course"],"content":"char? int main() { char **p, *city[] = {\"aaa\",\"bbb\"}; for (p = city; p \u003c city + 2; ++p) { cout \u003c\u003c *p \u003c\u003c endl; } return 0; } 结果为： aaa bbb ","date":"2024-05-05","objectID":"/crash/cpp1/:0:7","tags":["C++"],"title":"C++ ptr","uri":"/crash/cpp1/"}]